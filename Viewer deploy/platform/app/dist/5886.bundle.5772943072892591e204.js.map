{"version":3,"file":"5886.bundle.5772943072892591e204.js","mappings":"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ChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,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","sources":["webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/drawImageSync.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/calculateTransform.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/enums/GenerateImageType.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/Settings.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/loaders/imageLoader.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/FrameRange.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/PointsManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/ProgressiveIterator.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/RLEVoxelMap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/actorCheck.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/applyPreset.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/autoLoad.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/buildMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateSpacingBetweenImageIds.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clamp.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/colormap.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createLinearRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/decimate.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepClone.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/fnv1aHash.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestImageId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageDataMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageSliceDataForVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSliceRange.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getSpacingInNormalDirection.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getTargetVolumeAndSpacingInNormalDir.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVoiFromSigmoidRGBTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeActorCorners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeSliceRangeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportScrollInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasFloatScalingParameters.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/hasNaNValues.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageIdToURI.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageRetrieveMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/TargetEventListeners.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/eventListener/MultiTargetEventListenerManager.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getMinMax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRuntimeId.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calibratedPixelSpacingMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isOpposite.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/indexWithinDimensions.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeViewportsContainingSameVolumes.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isPTPrescaledWithSUV.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasGPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/renderToCanvasCPU.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/loadImageToCanvas.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/historyMemo/index.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/worldToImageCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/imageToWorldCoords.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportsWithImageURI.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getClosestStackImageIndexForPoint.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getCurrentVolumeViewportSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/spatialRegistrationMetadataProvider.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateViewportsSpatialRegistration.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageCornersInWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getImageLegacy.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isValidVolume.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isVideoTransferSyntax.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertStackToVolumeViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertVolumeToStackViewport.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/roundNumber.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/convertToGrayscale.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportImageIds.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getRandomSampleFromArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/color.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/deepEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/splitImageIdsBy4DTags.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getDynamicVolumeInfo.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scaleArray.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/clip.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/scroll.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/jumpToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/createSubVolume.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getVolumeDirectionVectors.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/calculateNeighborhoodStats.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getPixelSpacingInformation.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/getViewportModality.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/invertRgbTransferFunction.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/isEqual.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/logger.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/makeVolumeMetadata.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/planar.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/snapFocalPointToSlice.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/sortImageIdsAndGetSpacing.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transferFunctionUtils.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformCanvasToIJK.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformIndexToWorld.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/transformWorldToIndex.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/updateVTKImageDataWithCornerstoneImage.js","webpack:///../../../node_modules/@cornerstonejs/core/dist/esm/utilities/windowLevel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraModifiedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/imageSpacingCalibratedEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/annotationInterpolationEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventDispatchers/cameraResetEventDispatcher.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createCameraPositionSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createPresentationViewSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createZoomPanSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createImageSliceSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/synchronizers/synchronizers/createSlabThicknessSynchronizer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/calibrateImageSpacing.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/events.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/cine/playClip.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/dynamicVolume/generateImageFromTimeData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/polyData/utils.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/Colorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/ViewportColorbar.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/extractWindowLevelRegionToolData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInSurroundingSphereCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/setAnnotationLabel.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/calculateFanShapeCorners.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/deriveFanGeometry.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/segmentLargestUSOutlineFromBuffer.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/utils/generateConvexHullFromContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/Spline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CubicSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/BSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CardinalSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/CatmullRomSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/splines/LinearSpline.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PanTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/TrackballRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/WindowLevelRegionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/getLuminanceFromRegion.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/windowlevel/calculateMinMaxMean.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/StackScrollTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/PlanarRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ZoomTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MIPJumpToClickTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/CrosshairsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/MagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AdvancedMagnifyTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceLinesTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OverlayGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SegmentationIntersectionTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointToString.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ReferenceCursors.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/ScaleOverlayTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/SculptorTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/VolumeRotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LengthTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/HeightTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/DragProbeTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/EllipticalROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CircleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ETDRSGridTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/SplineContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/LivewireContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/ArrowAnnotateTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/AngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/CobbAngleTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundDirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/UltrasoundPleuraBLineTool/UltrasoundPleuraBLineTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/KeyImageTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/AnnotationEraserTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RegionSegmentPlusTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/WholeBodySegmentTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SphereScissorsTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/CircleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/PaintFillTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/OrientationMarkerTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentSelectTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentBidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/SegmentLabelTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapEditWithContour.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/VideoRedactionTool.js","webpack:///../../../node_modules/@kitware/vtk.js/Filters/General/ContourLoopExtraction.js","webpack:///../../../node_modules/@cornerstonejs/polymorphic-segmentation/dist/esm/workers/polySegConverters.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/getSvgDrawingHelper.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/draw.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawEllipseByCoordinates.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHandles.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLink.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawLinkedTextBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawHeight.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawFan.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawArrow.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRedactionRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/ChangeTypes.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/Touch.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/eventListeners/segmentation/imageChangeEventListener.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationRenderingEngine.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStyle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/setActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentationRepresentationsToViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/normalizeSegmentationInput.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/addSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/events/triggerSegmentationDataModified.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getActiveSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getNextColorLUTIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentationRepresentationVisibility.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getViewportSegmentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeStackLabelmapFromVolume.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/computeVolumeLabelmapFromStack.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddRepresentationData.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/internalAddSegmentationRepresentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeSegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/removeColorLUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/getStackSegmentationImageIdsForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/updateLabelmapSegmentationImageReferences.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroupForViewport.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/svgNodeCache.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/BidirectionalTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandContourSegmentationTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/PlanarFreehandROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/LabelmapBaseTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/annotationHydration.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contourSegmentation/convertContourSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/contours/findHandlePolylineIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/debounce.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/drawing/getTextBoxCoordsCanvas.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getCalibratedUnits.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getSphereBoundsInfo.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/getViewportForAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/isObject.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/sphere/pointInSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/isAxisAlignedRectangle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/SegmentStatsCalculator.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/floodFill.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getBrushToolInstances.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getHoveredContourSegmentationAnnotation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtLabelmapBorder.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/getSegmentIndexAtWorldPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/growCutShader.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForBoundingBox.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runGrowCutForSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/growCut/runOneClickGrowCut.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/invalidateBrushCursor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/throttle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/touch/index.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForToolGroupIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/triggerAnnotationRenderForViewportIds.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/viewport/isViewportPreScaled.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/voi/colorbar/enums/ColorbarRangeTextPosition.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js","webpack:///../../../node_modules/@kitware/vtk.js/Common/DataModel/ImageData.js","webpack:///../../../node_modules/@kitware/vtk.js/Rendering/Core/ColorTransferFunction.js","webpack:///../../../node_modules/gl-matrix/esm/vec3.js","webpack:///../../../node_modules/d3-array/src/zip.js","webpack:///../../../node_modules/d3-interpolate/src/quantize.js"],"sourcesContent":["import now from './rendering/now';\nimport { renderColorImage } from './rendering/renderColorImage';\nimport { renderGrayscaleImage } from './rendering/renderGrayscaleImage';\nimport { renderPseudoColorImage } from './rendering/renderPseudoColorImage';\nexport default function (enabledElement, invalidated) {\n    const image = enabledElement.image;\n    if (!enabledElement.canvas || !enabledElement.image) {\n        return;\n    }\n    const start = now();\n    image.stats = {\n        lastGetPixelDataTime: -1.0,\n        lastStoredPixelDataToCanvasImageDataTime: -1.0,\n        lastPutImageDataTime: -1.0,\n        lastRenderTime: -1.0,\n        lastLutGenerateTime: -1.0,\n    };\n    if (image) {\n        let render = image.render;\n        if (!render) {\n            if (enabledElement.viewport.colormap) {\n                render = renderPseudoColorImage;\n            }\n            else if (image.color) {\n                render = renderColorImage;\n            }\n            else {\n                render = renderGrayscaleImage;\n            }\n        }\n        render(enabledElement, invalidated);\n    }\n    const renderTimeInMs = now() - start;\n    image.stats.lastRenderTime = renderTimeInMs;\n    enabledElement.invalid = false;\n    enabledElement.needsRedraw = false;\n}\n","import { Transform } from './transform';\nexport default function (enabledElement, scale) {\n    const transform = new Transform();\n    if (!enabledElement.viewport.displayedArea) {\n        return transform;\n    }\n    transform.translate(enabledElement.canvas.width / 2, enabledElement.canvas.height / 2);\n    const angle = enabledElement.viewport.rotation;\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    let widthScale = enabledElement.viewport.scale;\n    let heightScale = enabledElement.viewport.scale;\n    const width = enabledElement.viewport.displayedArea.brhc.x -\n        (enabledElement.viewport.displayedArea.tlhc.x - 1);\n    const height = enabledElement.viewport.displayedArea.brhc.y -\n        (enabledElement.viewport.displayedArea.tlhc.y - 1);\n    if (enabledElement.viewport.displayedArea.presentationSizeMode === 'NONE') {\n        if (enabledElement.image.rowPixelSpacing <\n            enabledElement.image.columnPixelSpacing) {\n            widthScale *=\n                enabledElement.image.columnPixelSpacing /\n                    enabledElement.image.rowPixelSpacing;\n        }\n        else if (enabledElement.image.columnPixelSpacing <\n            enabledElement.image.rowPixelSpacing) {\n            heightScale *=\n                enabledElement.image.rowPixelSpacing /\n                    enabledElement.image.columnPixelSpacing;\n        }\n    }\n    else {\n        widthScale = enabledElement.viewport.displayedArea.columnPixelSpacing;\n        heightScale = enabledElement.viewport.displayedArea.rowPixelSpacing;\n        if (enabledElement.viewport.displayedArea.presentationSizeMode ===\n            'SCALE TO FIT') {\n            const verticalScale = enabledElement.canvas.height / (height * heightScale);\n            const horizontalScale = enabledElement.canvas.width / (width * widthScale);\n            widthScale = heightScale = Math.min(horizontalScale, verticalScale);\n            if (enabledElement.viewport.displayedArea.rowPixelSpacing <\n                enabledElement.viewport.displayedArea.columnPixelSpacing) {\n                widthScale *=\n                    enabledElement.viewport.displayedArea.columnPixelSpacing /\n                        enabledElement.viewport.displayedArea.rowPixelSpacing;\n            }\n            else if (enabledElement.viewport.displayedArea.columnPixelSpacing <\n                enabledElement.viewport.displayedArea.rowPixelSpacing) {\n                heightScale *=\n                    enabledElement.viewport.displayedArea.rowPixelSpacing /\n                        enabledElement.viewport.displayedArea.columnPixelSpacing;\n            }\n        }\n    }\n    transform.scale(widthScale, heightScale);\n    if (angle !== 0) {\n        transform.rotate((-angle * Math.PI) / 180);\n    }\n    transform.translate(enabledElement.viewport.translation.x, enabledElement.viewport.translation.y);\n    if (angle !== 0) {\n        transform.rotate((angle * Math.PI) / 180);\n    }\n    if (scale !== undefined) {\n        transform.scale(scale, scale);\n    }\n    if (enabledElement.viewport.hflip) {\n        transform.scale(-1, 1);\n    }\n    if (enabledElement.viewport.vflip) {\n        transform.scale(1, -1);\n    }\n    transform.translate(-width / 2, -height / 2);\n    return transform;\n}\n","import createViewport from './createViewport';\nimport getImageFitScale from './getImageFitScale';\nexport default function (canvas, image, modality, colormap) {\n    if (canvas === undefined) {\n        throw new Error('getDefaultViewport: parameter canvas must not be undefined');\n    }\n    if (image === undefined) {\n        return createViewport();\n    }\n    const scale = getImageFitScale(canvas, image, 0).scaleFactor;\n    let voi;\n    if (modality === 'PT' && image.isPreScaled) {\n        voi = {\n            windowWidth: 5,\n            windowCenter: 2.5,\n        };\n    }\n    else if (image.windowWidth !== undefined &&\n        image.windowCenter !== undefined) {\n        voi = {\n            windowWidth: Array.isArray(image.windowWidth)\n                ? image.windowWidth[0]\n                : image.windowWidth,\n            windowCenter: Array.isArray(image.windowCenter)\n                ? image.windowCenter[0]\n                : image.windowCenter,\n        };\n    }\n    return {\n        scale,\n        translation: {\n            x: 0,\n            y: 0,\n        },\n        voi,\n        invert: image.invert,\n        pixelReplication: false,\n        rotation: 0,\n        hflip: false,\n        vflip: false,\n        modalityLUT: image.modalityLUT,\n        modality,\n        voiLUT: image.voiLUT,\n        colormap: colormap !== undefined ? colormap : image.colormap,\n        displayedArea: {\n            tlhc: {\n                x: 1,\n                y: 1,\n            },\n            brhc: {\n                x: image.columns,\n                y: image.rows,\n            },\n            rowPixelSpacing: image.rowPixelSpacing === undefined ? 1 : image.rowPixelSpacing,\n            columnPixelSpacing: image.columnPixelSpacing === undefined ? 1 : image.columnPixelSpacing,\n            presentationSizeMode: 'NONE',\n        },\n    };\n}\n","export var GenerateImageType;\n(function (GenerateImageType) {\n    GenerateImageType[\"SUM\"] = \"SUM\";\n    GenerateImageType[\"SUBTRACT\"] = \"SUBTRACT\";\n    GenerateImageType[\"AVERAGE\"] = \"AVERAGE\";\n})(GenerateImageType || (GenerateImageType = {}));\n","const DEFAULT_SETTINGS = Symbol('DefaultSettings');\nconst RUNTIME_SETTINGS = Symbol('RuntimeSettings');\nconst OBJECT_SETTINGS_MAP = Symbol('ObjectSettingsMap');\nconst DICTIONARY = Symbol('Dictionary');\nexport default class Settings {\n    constructor(base) {\n        const dictionary = Object.create((base instanceof Settings && DICTIONARY in base\n            ? base[DICTIONARY]\n            : null));\n        Object.seal(Object.defineProperty(this, DICTIONARY, {\n            value: dictionary,\n        }));\n    }\n    set(key, value) {\n        return set(this[DICTIONARY], key, value, null);\n    }\n    get(key) {\n        return get(this[DICTIONARY], key);\n    }\n    unset(key) {\n        return unset(this[DICTIONARY], key + '');\n    }\n    forEach(callback) {\n        iterate(this[DICTIONARY], callback);\n    }\n    extend() {\n        return new Settings(this);\n    }\n    import(root) {\n        if (isPlainObject(root)) {\n            Object.keys(root).forEach((key) => {\n                set(this[DICTIONARY], key, root[key], null);\n            });\n        }\n    }\n    dump() {\n        const context = {};\n        iterate(this[DICTIONARY], (key, value) => {\n            if (typeof value !== 'undefined') {\n                deepSet(context, key, value);\n            }\n        });\n        return context;\n    }\n    static assert(subject) {\n        return subject instanceof Settings\n            ? subject\n            : Settings.getRuntimeSettings();\n    }\n    static getDefaultSettings(subfield = null) {\n        let defaultSettings = Settings[DEFAULT_SETTINGS];\n        if (!(defaultSettings instanceof Settings)) {\n            defaultSettings = new Settings();\n            Settings[DEFAULT_SETTINGS] = defaultSettings;\n        }\n        if (subfield) {\n            const settingObj = {};\n            defaultSettings.forEach((name) => {\n                if (name.startsWith(subfield)) {\n                    const setting = name.split(`${subfield}.`)[1];\n                    settingObj[setting] = defaultSettings.get(name);\n                }\n            });\n            return settingObj;\n        }\n        return defaultSettings;\n    }\n    static getRuntimeSettings() {\n        let runtimeSettings = Settings[RUNTIME_SETTINGS];\n        if (!(runtimeSettings instanceof Settings)) {\n            runtimeSettings = new Settings(Settings.getDefaultSettings());\n            Settings[RUNTIME_SETTINGS] = runtimeSettings;\n        }\n        return runtimeSettings;\n    }\n    static getObjectSettings(subject, from) {\n        let settings = null;\n        if (subject instanceof Settings) {\n            settings = subject;\n        }\n        else if (typeof subject === 'object' && subject !== null) {\n            let objectSettingsMap = Settings[OBJECT_SETTINGS_MAP];\n            if (!(objectSettingsMap instanceof WeakMap)) {\n                objectSettingsMap = new WeakMap();\n                Settings[OBJECT_SETTINGS_MAP] = objectSettingsMap;\n            }\n            settings = objectSettingsMap.get(subject);\n            if (!(settings instanceof Settings)) {\n                settings = new Settings(Settings.assert(Settings.getObjectSettings(from)));\n                objectSettingsMap.set(subject, settings);\n            }\n        }\n        return settings;\n    }\n    static extendRuntimeSettings() {\n        return Settings.getRuntimeSettings().extend();\n    }\n}\nfunction unset(dictionary, name) {\n    if (name.endsWith('.')) {\n        let deleteCount = 0;\n        const namespace = name;\n        const base = namespace.slice(0, -1);\n        const deleteAll = base.length === 0;\n        for (const key in dictionary) {\n            if (Object.prototype.hasOwnProperty.call(dictionary, key) &&\n                (deleteAll || key.startsWith(namespace) || key === base)) {\n                delete dictionary[key];\n                ++deleteCount;\n            }\n        }\n        return deleteCount > 0;\n    }\n    return delete dictionary[name];\n}\nfunction iterate(dictionary, callback) {\n    for (const key in dictionary) {\n        callback(key, dictionary[key]);\n    }\n}\nfunction setAll(dictionary, prefix, record, references) {\n    let failCount;\n    if (references.has(record)) {\n        return set(dictionary, prefix, null, references);\n    }\n    references.add(record);\n    failCount = 0;\n    for (const field in record) {\n        if (Object.prototype.hasOwnProperty.call(record, field)) {\n            const key = field.length === 0 ? prefix : `${prefix}.${field}`;\n            if (!set(dictionary, key, record[field], references)) {\n                ++failCount;\n            }\n        }\n    }\n    references.delete(record);\n    return failCount === 0;\n}\nfunction set(dictionary, key, value, references) {\n    if (isValidKey(key)) {\n        if (isPlainObject(value)) {\n            return setAll(dictionary, key, value, references instanceof WeakSet ? references : new WeakSet());\n        }\n        dictionary[key] = value;\n        return true;\n    }\n    return false;\n}\nfunction get(dictionary, key) {\n    return dictionary[key];\n}\nfunction isValidKey(key) {\n    let last, current, previous;\n    if (typeof key !== 'string' || (last = key.length - 1) < 0) {\n        return false;\n    }\n    previous = -1;\n    while ((current = key.indexOf('.', previous + 1)) >= 0) {\n        if (current - previous < 2 || current === last) {\n            return false;\n        }\n        previous = current;\n    }\n    return true;\n}\nfunction isPlainObject(subject) {\n    if (typeof subject === 'object' && subject !== null) {\n        const prototype = Object.getPrototypeOf(subject);\n        if (prototype === Object.prototype || prototype === null) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction deepSet(context, key, value) {\n    const separator = key.indexOf('.');\n    if (separator >= 0) {\n        const subKey = key.slice(0, separator);\n        let subContext = context[subKey];\n        if (typeof subContext !== 'object' || subContext === null) {\n            const subContextValue = subContext;\n            subContext = {};\n            if (typeof subContextValue !== 'undefined') {\n                subContext[''] = subContextValue;\n            }\n            context[subKey] = subContext;\n        }\n        deepSet(subContext, key.slice(separator + 1, key.length), value);\n    }\n    else {\n        context[key] = value;\n    }\n}\nSettings.getDefaultSettings().set('useCursors', true);\n","import cache from '../cache/cache';\nimport Events from '../enums/Events';\nimport eventTarget from '../eventTarget';\nimport genericMetadataProvider from '../utilities/genericMetadataProvider';\nimport { getBufferConfiguration } from '../utilities/getBufferConfiguration';\nimport triggerEvent from '../utilities/triggerEvent';\nimport uuidv4 from '../utilities/uuidv4';\nimport VoxelManager from '../utilities/VoxelManager';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport * as metaData from '../metaData';\nimport VoxelManagerEnum from '../enums/VoxelManagerEnum';\nconst imageLoaders = {};\nlet unknownImageLoader;\nfunction loadImageFromImageLoader(imageId, options) {\n    const cachedImageLoadObject = cache.getImageLoadObject(imageId);\n    if (cachedImageLoadObject) {\n        handleImageLoadPromise(cachedImageLoadObject.promise, imageId);\n        return cachedImageLoadObject;\n    }\n    const scheme = imageId.split(':')[0];\n    const loader = imageLoaders[scheme] || unknownImageLoader;\n    if (!loader) {\n        throw new Error(`loadImageFromImageLoader: No image loader found for scheme '${scheme}'`);\n    }\n    const imageLoadObject = loader(imageId, options);\n    handleImageLoadPromise(imageLoadObject.promise, imageId);\n    return imageLoadObject;\n}\nfunction handleImageLoadPromise(imagePromise, imageId) {\n    Promise.resolve(imagePromise)\n        .then((image) => {\n        ensureVoxelManager(image);\n        triggerEvent(eventTarget, Events.IMAGE_LOADED, { image });\n    })\n        .catch((error) => {\n        const errorDetails = {\n            imageId,\n            error,\n        };\n        triggerEvent(eventTarget, Events.IMAGE_LOAD_FAILED, errorDetails);\n    });\n}\nfunction ensureVoxelManager(image) {\n    if (!image.voxelManager) {\n        const { width, height, numberOfComponents } = image;\n        const voxelManager = VoxelManager.createImageVoxelManager({\n            scalarData: image.getPixelData(),\n            width,\n            height,\n            numberOfComponents,\n        });\n        image.voxelManager = voxelManager;\n        image.getPixelData = () => voxelManager.getScalarData();\n        delete image.imageFrame.pixelData;\n    }\n}\nexport function loadImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadImage: parameter imageId must not be undefined');\n    }\n    return loadImageFromImageLoader(imageId, options).promise;\n}\nexport function loadAndCacheImage(imageId, options = { priority: 0, requestType: 'prefetch' }) {\n    if (imageId === undefined) {\n        throw new Error('loadAndCacheImage: parameter imageId must not be undefined');\n    }\n    const imageLoadObject = loadImageFromImageLoader(imageId, options);\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageLoadObject(imageId, imageLoadObject);\n    }\n    return imageLoadObject.promise;\n}\nexport function loadAndCacheImages(imageIds, options = { priority: 0, requestType: 'prefetch' }) {\n    if (!imageIds || imageIds.length === 0) {\n        throw new Error('loadAndCacheImages: parameter imageIds must be list of image Ids');\n    }\n    const allPromises = imageIds.map((imageId) => {\n        return loadAndCacheImage(imageId, options);\n    });\n    return allPromises;\n}\nexport function createAndCacheDerivedImage(referencedImageId, options = {}) {\n    if (referencedImageId === undefined) {\n        throw new Error('createAndCacheDerivedImage: parameter imageId must not be undefined');\n    }\n    if (options.imageId === undefined) {\n        options.imageId = `derived:${uuidv4()}`;\n    }\n    const { imageId, skipCreateBuffer, onCacheAdd, voxelRepresentation } = options;\n    const imagePlaneModule = metaData.get('imagePlaneModule', referencedImageId);\n    const length = imagePlaneModule.rows * imagePlaneModule.columns;\n    const { TypedArrayConstructor } = getBufferConfiguration(options.targetBuffer?.type, length);\n    const imageScalarData = new TypedArrayConstructor(skipCreateBuffer ? 1 : length);\n    const derivedImageId = imageId;\n    const referencedImagePlaneMetadata = metaData.get('imagePlaneModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePlaneModule',\n        metadata: referencedImagePlaneMetadata,\n    });\n    const referencedImageGeneralSeriesMetadata = metaData.get('generalSeriesModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalSeriesModule',\n        metadata: referencedImageGeneralSeriesMetadata,\n    });\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'generalImageModule',\n        metadata: {\n            instanceNumber: options.instanceNumber,\n        },\n    });\n    const imagePixelModule = metaData.get('imagePixelModule', referencedImageId);\n    genericMetadataProvider.add(derivedImageId, {\n        type: 'imagePixelModule',\n        metadata: {\n            ...imagePixelModule,\n            bitsAllocated: 8,\n            bitsStored: 8,\n            highBit: 7,\n            samplesPerPixel: 1,\n            pixelRepresentation: 0,\n        },\n    });\n    const localImage = createAndCacheLocalImage(imageId, {\n        scalarData: imageScalarData,\n        onCacheAdd,\n        skipCreateBuffer,\n        targetBuffer: {\n            type: imageScalarData.constructor.name,\n        },\n        voxelRepresentation,\n        dimensions: [imagePlaneModule.columns, imagePlaneModule.rows],\n        spacing: [\n            imagePlaneModule.columnPixelSpacing,\n            imagePlaneModule.rowPixelSpacing,\n        ],\n        origin: imagePlaneModule.imagePositionPatient,\n        direction: imagePlaneModule.imageOrientationPatient,\n        frameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        referencedImageId: referencedImageId,\n    });\n    localImage.referencedImageId = referencedImageId;\n    if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageSync(imageId, localImage);\n    }\n    return localImage;\n}\nexport function createAndCacheDerivedImages(referencedImageIds, options = {}) {\n    if (referencedImageIds.length === 0) {\n        throw new Error('createAndCacheDerivedImages: parameter imageIds must be list of image Ids');\n    }\n    const derivedImageIds = [];\n    const images = referencedImageIds.map((referencedImageId, index) => {\n        const newOptions = {\n            imageId: options?.getDerivedImageId?.(referencedImageId) ||\n                `derived:${uuidv4()}`,\n            ...options,\n        };\n        derivedImageIds.push(newOptions.imageId);\n        return createAndCacheDerivedImage(referencedImageId, {\n            ...newOptions,\n            instanceNumber: index + 1,\n        });\n    });\n    return images;\n}\nexport function createAndCacheLocalImage(imageId, options) {\n    const { scalarData, origin, direction, targetBuffer, skipCreateBuffer, onCacheAdd, frameOfReferenceUID, voxelRepresentation, referencedImageId, } = options;\n    const dimensions = options.dimensions;\n    const spacing = options.spacing;\n    if (!dimensions || !spacing) {\n        throw new Error('createAndCacheLocalImage: dimensions and spacing are required');\n    }\n    const width = dimensions[0];\n    const height = dimensions[1];\n    const columnPixelSpacing = spacing[0];\n    const rowPixelSpacing = spacing[1];\n    const imagePlaneModule = {\n        frameOfReferenceUID,\n        rows: height,\n        columns: width,\n        imageOrientationPatient: direction ?? [1, 0, 0, 0, 1, 0],\n        rowCosines: direction ? direction.slice(0, 3) : [1, 0, 0],\n        columnCosines: direction ? direction.slice(3, 6) : [0, 1, 0],\n        imagePositionPatient: origin ?? [0, 0, 0],\n        pixelSpacing: [rowPixelSpacing, columnPixelSpacing],\n        rowPixelSpacing: rowPixelSpacing,\n        columnPixelSpacing: columnPixelSpacing,\n    };\n    const length = width * height;\n    const numberOfComponents = scalarData.length / length;\n    let scalarDataToUse;\n    if (scalarData) {\n        if (!(scalarData instanceof Uint8Array ||\n            scalarData instanceof Float32Array ||\n            scalarData instanceof Uint16Array ||\n            scalarData instanceof Int16Array)) {\n            throw new Error('createAndCacheLocalImage: scalarData must be of type Uint8Array, Uint16Array, Int16Array or Float32Array');\n        }\n        scalarDataToUse = scalarData;\n    }\n    else if (!skipCreateBuffer) {\n        const { TypedArrayConstructor } = getBufferConfiguration(targetBuffer?.type, length);\n        const imageScalarData = new TypedArrayConstructor(length);\n        scalarDataToUse = imageScalarData;\n    }\n    let bitsAllocated, bitsStored, highBit;\n    if (scalarDataToUse instanceof Uint8Array) {\n        bitsAllocated = 8;\n        bitsStored = 8;\n        highBit = 7;\n    }\n    else if (scalarDataToUse instanceof Uint16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Int16Array) {\n        bitsAllocated = 16;\n        bitsStored = 16;\n        highBit = 15;\n    }\n    else if (scalarDataToUse instanceof Float32Array) {\n        bitsAllocated = 32;\n        bitsStored = 32;\n        highBit = 31;\n    }\n    else {\n        throw new Error('Unsupported scalarData type');\n    }\n    const imagePixelModule = {\n        samplesPerPixel: 1,\n        photometricInterpretation: scalarDataToUse.length > dimensions[0] * dimensions[1]\n            ? 'RGB'\n            : 'MONOCHROME2',\n        rows: height,\n        columns: width,\n        bitsAllocated,\n        bitsStored,\n        highBit,\n    };\n    const metadata = {\n        imagePlaneModule,\n        imagePixelModule,\n    };\n    ['imagePlaneModule', 'imagePixelModule'].forEach((type) => {\n        genericMetadataProvider.add(imageId, {\n            type,\n            metadata: metadata[type] || {},\n        });\n    });\n    const id = imageId;\n    const voxelManager = (voxelRepresentation === VoxelManagerEnum.RLE &&\n        VoxelManager.createRLEImageVoxelManager({ dimensions, id })) ||\n        VoxelManager.createImageVoxelManager({\n            height,\n            width,\n            numberOfComponents,\n            scalarData: scalarDataToUse,\n            id,\n        });\n    let minPixelValue = scalarDataToUse[0];\n    let maxPixelValue = scalarDataToUse[0];\n    for (let i = 1; i < scalarDataToUse.length; i++) {\n        if (scalarDataToUse[i] < minPixelValue) {\n            minPixelValue = scalarDataToUse[i];\n        }\n        if (scalarDataToUse[i] > maxPixelValue) {\n            maxPixelValue = scalarDataToUse[i];\n        }\n    }\n    const image = {\n        imageId: imageId,\n        intercept: 0,\n        windowCenter: 0,\n        windowWidth: 0,\n        color: imagePixelModule.photometricInterpretation === 'RGB',\n        numberOfComponents: imagePixelModule.samplesPerPixel,\n        dataType: targetBuffer?.type,\n        slope: 1,\n        minPixelValue,\n        maxPixelValue,\n        rows: imagePixelModule.rows,\n        columns: imagePixelModule.columns,\n        getCanvas: undefined,\n        height: imagePixelModule.rows,\n        width: imagePixelModule.columns,\n        rgba: undefined,\n        columnPixelSpacing: imagePlaneModule.columnPixelSpacing,\n        rowPixelSpacing: imagePlaneModule.rowPixelSpacing,\n        FrameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,\n        invert: false,\n        getPixelData: () => voxelManager.getScalarData(),\n        voxelManager,\n        sizeInBytes: scalarData.byteLength,\n        referencedImageId,\n    };\n    onCacheAdd?.(image);\n    cache.putImageSync(image.imageId, image);\n    return image;\n}\nexport function cancelLoadImage(imageId) {\n    const filterFunction = ({ additionalDetails }) => {\n        if (additionalDetails.imageId) {\n            return additionalDetails.imageId !== imageId;\n        }\n        return true;\n    };\n    imageLoadPoolManager.filterRequests(filterFunction);\n    const imageLoadObject = cache.getImageLoadObject(imageId);\n    if (imageLoadObject) {\n        imageLoadObject.cancelFn();\n    }\n}\nexport function cancelLoadImages(imageIds) {\n    imageIds.forEach((imageId) => {\n        cancelLoadImage(imageId);\n    });\n}\nexport function cancelLoadAll() {\n    const requestPool = imageLoadPoolManager.getRequestPool();\n    Object.keys(requestPool).forEach((type) => {\n        const requests = requestPool[type];\n        Object.keys(requests).forEach((priority) => {\n            const requestDetails = requests[priority].pop();\n            if (!requestDetails) {\n                return;\n            }\n            const additionalDetails = requestDetails.additionalDetails;\n            const { imageId, volumeId } = additionalDetails;\n            let loadObject;\n            if (imageId) {\n                loadObject = cache.getImageLoadObject(imageId);\n            }\n            else if (volumeId) {\n                loadObject = cache.getVolumeLoadObject(volumeId);\n            }\n            if (loadObject) {\n                loadObject.cancel();\n            }\n        });\n        imageLoadPoolManager.clearRequestStack(type);\n    });\n}\nexport function registerImageLoader(scheme, imageLoader) {\n    imageLoaders[scheme] = imageLoader;\n}\nexport function registerUnknownImageLoader(imageLoader) {\n    const oldImageLoader = unknownImageLoader;\n    unknownImageLoader = imageLoader;\n    return oldImageLoader;\n}\nexport function unregisterAllImageLoaders() {\n    Object.keys(imageLoaders).forEach((imageLoader) => delete imageLoaders[imageLoader]);\n    unknownImageLoader = undefined;\n}\nexport function createAndCacheDerivedLabelmapImages(referencedImageIds, options = {}) {\n    return createAndCacheDerivedImages(referencedImageIds, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\nexport function createAndCacheDerivedLabelmapImage(referencedImageId, options = {}) {\n    return createAndCacheDerivedImage(referencedImageId, {\n        ...options,\n        targetBuffer: { type: 'Uint8Array' },\n    });\n}\n","export default class FrameRange {\n    static { this.frameRangeExtractor = /(\\/frames\\/|[&?]frameNumber=)([^/&?]*)/i; }\n    static imageIdToFrames(imageId) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const range = match[2].split('-').map((it) => Number(it));\n        if (range.length === 1) {\n            return range[0];\n        }\n        return range;\n    }\n    static imageIdToFrameEnd(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[1] : range;\n    }\n    static imageIdToFrameStart(imageId) {\n        const range = this.imageIdToFrames(imageId);\n        return Array.isArray(range) ? range[0] : range;\n    }\n    static framesToString(range) {\n        if (Array.isArray(range)) {\n            return `${range[0]}-${range[1]}`;\n        }\n        return String(range);\n    }\n    static framesToImageId(imageId, range) {\n        const match = imageId.match(this.frameRangeExtractor);\n        if (!match || !match[2]) {\n            return null;\n        }\n        const newRangeString = this.framesToString(range);\n        return imageId.replace(this.frameRangeExtractor, `${match[1]}${newRangeString}`);\n    }\n}\n","export default class PointsManager {\n    constructor(configuration = {}) {\n        this._dimensions = 3;\n        this._length = 0;\n        this._byteSize = 4;\n        this.growSize = 128;\n        const { initialSize = 1024, dimensions = 3, growSize = 128, } = configuration;\n        const itemLength = initialSize * dimensions;\n        this.growSize = growSize;\n        this.array = new ArrayBuffer(itemLength * this._byteSize);\n        this.data = new Float32Array(this.array);\n        this._dimensions = dimensions;\n    }\n    forEach(func) {\n        for (let i = 0; i < this._length; i++) {\n            func(this.getPoint(i), i);\n        }\n    }\n    get length() {\n        return this._length;\n    }\n    get dimensions() {\n        return this._dimensions;\n    }\n    get dimensionLength() {\n        return this._length * this._dimensions;\n    }\n    getPoint(index) {\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        return this.data.subarray(offset, offset + this._dimensions);\n    }\n    getPointArray(index) {\n        const array = [];\n        if (index < 0) {\n            index += this._length;\n        }\n        if (index < 0 || index >= this._length) {\n            return;\n        }\n        const offset = this._dimensions * index;\n        for (let i = 0; i < this._dimensions; i++) {\n            array.push(this.data[i + offset]);\n        }\n        return array;\n    }\n    grow(additionalSize = 1, growSize = this.growSize) {\n        if (this.dimensionLength + additionalSize * this._dimensions <=\n            this.data.length) {\n            return;\n        }\n        const newSize = this.data.length + growSize;\n        const newArray = new ArrayBuffer(newSize * this._dimensions * this._byteSize);\n        const newData = new Float32Array(newArray);\n        newData.set(this.data);\n        this.data = newData;\n        this.array = newArray;\n    }\n    reverse() {\n        const midLength = Math.floor(this._length / 2);\n        for (let i = 0; i < midLength; i++) {\n            const indexStart = i * this._dimensions;\n            const indexEnd = (this._length - 1 - i) * this._dimensions;\n            for (let dimension = 0; dimension < this._dimensions; dimension++) {\n                const valueStart = this.data[indexStart + dimension];\n                this.data[indexStart + dimension] = this.data[indexEnd + dimension];\n                this.data[indexEnd + dimension] = valueStart;\n            }\n        }\n    }\n    getTypedArray() {\n        return this.data;\n    }\n    push(point) {\n        this.grow(1);\n        const offset = this.length * this._dimensions;\n        for (let i = 0; i < this._dimensions; i++) {\n            this.data[i + offset] = point[i];\n        }\n        this._length++;\n    }\n    map(f) {\n        const mapData = [];\n        for (let i = 0; i < this._length; i++) {\n            mapData.push(f(this.getPoint(i), i));\n        }\n        return mapData;\n    }\n    get points() {\n        return this.map((p) => p);\n    }\n    toXYZ() {\n        const xyz = { x: [], y: [] };\n        if (this._dimensions >= 3) {\n            xyz.z = [];\n        }\n        const { x, y, z } = xyz;\n        this.forEach((p) => {\n            x.push(p[0]);\n            y.push(p[1]);\n            if (z) {\n                z.push(p[2]);\n            }\n        });\n        return xyz;\n    }\n    static fromXYZ({ x, y, z }) {\n        const array = PointsManager.create3(x.length);\n        let offset = 0;\n        for (let i = 0; i < x.length; i++) {\n            array.data[offset++] = x[i];\n            array.data[offset++] = y[i];\n            array.data[offset++] = z ? z[i] : 0;\n        }\n        array._length = x.length;\n        return array;\n    }\n    subselect(count = 10, offset = 0) {\n        const selected = new PointsManager({\n            initialSize: count,\n            dimensions: this._dimensions,\n        });\n        for (let i = 0; i < count; i++) {\n            const index = (offset + Math.floor((this.length * i) / count)) % this.length;\n            selected.push(this.getPoint(index));\n        }\n        return selected;\n    }\n    static create3(initialSize = 128, points) {\n        initialSize = Math.max(initialSize, points?.length || 0);\n        const newPoints = new PointsManager({ initialSize, dimensions: 3 });\n        if (points) {\n            points.forEach((point) => newPoints.push(point));\n        }\n        return newPoints;\n    }\n    static create2(initialSize = 128) {\n        return new PointsManager({ initialSize, dimensions: 2 });\n    }\n}\n","export class PromiseIterator extends Promise {\n}\nexport default class ProgressiveIterator {\n    constructor(name) {\n        this.name = name || 'unknown';\n    }\n    static as(promise) {\n        if (promise.iterator) {\n            return promise.iterator;\n        }\n        const iterator = new ProgressiveIterator('as iterator');\n        promise.then((v) => {\n            try {\n                iterator.add(v, true);\n            }\n            catch (e) {\n                iterator.reject(e);\n            }\n        }, (reason) => {\n            iterator.reject(reason);\n        });\n        return iterator;\n    }\n    add(x, done = false) {\n        this.nextValue = x;\n        this.done ||= done;\n        if (this.waiting) {\n            this.waiting.resolve(x);\n            this.waiting = undefined;\n        }\n    }\n    resolve() {\n        this.done = true;\n        if (this.waiting) {\n            this.waiting.resolve(this.nextValue);\n            this.waiting = undefined;\n        }\n    }\n    reject(reason) {\n        this.rejectReason = reason;\n        this.waiting?.reject(reason);\n    }\n    getRecent() {\n        if (this.rejectReason) {\n            throw this.rejectReason;\n        }\n        return this.nextValue;\n    }\n    async *[Symbol.asyncIterator]() {\n        while (!this.done) {\n            if (this.rejectReason) {\n                throw this.rejectReason;\n            }\n            if (this.nextValue !== undefined) {\n                yield this.nextValue;\n                if (this.done) {\n                    break;\n                }\n            }\n            if (!this.waiting) {\n                this.waiting = {};\n                this.waiting.promise = new Promise((resolve, reject) => {\n                    this.waiting.resolve = resolve;\n                    this.waiting.reject = reject;\n                });\n            }\n            await this.waiting.promise;\n        }\n        yield this.nextValue;\n    }\n    async forEach(callback, errorCallback) {\n        let index = 0;\n        try {\n            for await (const value of this) {\n                const { done } = this;\n                try {\n                    await callback(value, done, index);\n                    index++;\n                }\n                catch (e) {\n                    if (!done) {\n                        console.warn('Caught exception in intermediate value', e);\n                        continue;\n                    }\n                    if (errorCallback) {\n                        errorCallback(e, done);\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n        }\n        catch (e) {\n            if (errorCallback) {\n                errorCallback(e, true);\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n    generate(processFunction, errorCallback) {\n        return processFunction(this, this.reject.bind(this)).then(() => {\n            if (!this.done) {\n                this.resolve();\n            }\n        }, (reason) => {\n            this.reject(reason);\n            if (errorCallback) {\n                errorCallback(reason);\n            }\n            else {\n                console.warn(\"Couldn't process because\", reason);\n            }\n        });\n    }\n    async nextPromise() {\n        for await (const i of this) {\n            if (i) {\n                return i;\n            }\n        }\n        return this.nextValue;\n    }\n    async donePromise() {\n        for await (const i of this) {\n        }\n        return this.nextValue;\n    }\n    getNextPromise() {\n        const promise = this.nextPromise();\n        promise.iterator = this;\n        return promise;\n    }\n    getDonePromise() {\n        const promise = this.donePromise();\n        promise.iterator = this;\n        return promise;\n    }\n}\n","const ADJACENT_ALL = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n    [0, 0, 1],\n];\nconst ADJACENT_SINGLE_PLANE = [\n    [0, -1, 0],\n    [0, 1, 0],\n];\nconst ADJACENT_IN = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, -1],\n];\nconst ADJACENT_OUT = [\n    [0, -1, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n];\nexport default class RLEVoxelMap {\n    static copyMap(destination, source) {\n        for (const [index, row] of source.rows) {\n            destination.rows.set(index, structuredClone(row));\n        }\n    }\n    constructor(width, height, depth = 1) {\n        this.rows = new Map();\n        this.height = 1;\n        this.width = 1;\n        this.depth = 1;\n        this.jMultiple = 1;\n        this.kMultiple = 1;\n        this.numComps = 1;\n        this.pixelDataConstructor = Uint8Array;\n        this.updateScalarData = function (scalarData) {\n            scalarData.fill(0);\n            const callback = (index, rle, row) => {\n                const { start, end, value } = rle;\n                for (let i = start; i < end; i++) {\n                    scalarData[index + i] = value;\n                }\n            };\n            this.forEach(callback);\n        };\n        this.get = (index) => {\n            const i = index % this.jMultiple;\n            const j = (index - i) / this.jMultiple;\n            const rle = this.getRLE(i, j);\n            return rle?.value ?? this.defaultValue;\n        };\n        this.getRun = (j, k) => {\n            const runIndex = j + k * this.height;\n            return this.rows.get(runIndex);\n        };\n        this.set = (index, value) => {\n            if (value === undefined) {\n                return;\n            }\n            const i = index % this.width;\n            const j = (index - i) / this.width;\n            const row = this.rows.get(j);\n            if (!row) {\n                this.rows.set(j, [{ start: i, end: i + 1, value }]);\n                return;\n            }\n            const rleIndex = this.findIndex(row, i);\n            const rle1 = row[rleIndex];\n            const rle0 = row[rleIndex - 1];\n            if (!rle1) {\n                if (!rle0 || rle0.value !== value || rle0.end !== i) {\n                    row[rleIndex] = { start: i, end: i + 1, value };\n                    return;\n                }\n                rle0.end++;\n                return;\n            }\n            const { start, end, value: oldValue } = rle1;\n            if (value === oldValue && i >= start) {\n                return;\n            }\n            const rleInsert = { start: i, end: i + 1, value };\n            const isAfter = i > start;\n            const insertIndex = isAfter ? rleIndex + 1 : rleIndex;\n            const rlePrev = isAfter ? rle1 : rle0;\n            let rleNext = isAfter ? row[rleIndex + 1] : rle1;\n            if (rlePrev?.value === value && rlePrev?.end === i) {\n                rlePrev.end++;\n                if (rleNext?.value === value && rleNext.start === i + 1) {\n                    rlePrev.end = rleNext.end;\n                    row.splice(rleIndex, 1);\n                }\n                else if (rleNext?.start === i) {\n                    rleNext.start++;\n                    if (rleNext.start === rleNext.end) {\n                        row.splice(rleIndex, 1);\n                        rleNext = row[rleIndex];\n                        if (rleNext?.start === i + 1 && rleNext.value === value) {\n                            rlePrev.end = rleNext.end;\n                            row.splice(rleIndex, 1);\n                        }\n                    }\n                }\n                return;\n            }\n            if (rleNext?.value === value && rleNext.start === i + 1) {\n                rleNext.start--;\n                if (rlePrev?.end > i) {\n                    rlePrev.end = i;\n                    if (rlePrev.end === rlePrev.start) {\n                        row.splice(rleIndex, 1);\n                    }\n                }\n                return;\n            }\n            if (rleNext?.start === i && rleNext.end === i + 1) {\n                rleNext.value = value;\n                const nextnext = row[rleIndex + 1];\n                if (nextnext?.start == i + 1 && nextnext.value === value) {\n                    row.splice(rleIndex + 1, 1);\n                    rleNext.end = nextnext.end;\n                }\n                return;\n            }\n            if (i === rleNext?.start) {\n                rleNext.start++;\n            }\n            if (isAfter && end > i + 1) {\n                row.splice(insertIndex, 0, rleInsert, {\n                    start: i + 1,\n                    end: rlePrev.end,\n                    value: rlePrev.value,\n                });\n            }\n            else {\n                row.splice(insertIndex, 0, rleInsert);\n            }\n            if (rlePrev?.end > i) {\n                rlePrev.end = i;\n            }\n        };\n        this.width = width;\n        this.height = height;\n        this.depth = depth;\n        this.jMultiple = width;\n        this.kMultiple = this.jMultiple * height;\n    }\n    static { this.getScalarData = function (ArrayType = Uint8ClampedArray) {\n        const scalarData = new ArrayType(this.frameSize);\n        this.map.updateScalarData(scalarData);\n        return scalarData;\n    }; }\n    toIJK(index) {\n        const i = index % this.jMultiple;\n        const j = ((index - i) / this.jMultiple) % this.height;\n        const k = Math.floor(index / this.kMultiple);\n        return [i, j, k];\n    }\n    toIndex([i, j, k]) {\n        return i + k * this.kMultiple + j * this.jMultiple;\n    }\n    getRLE(i, j, k = 0) {\n        const row = this.rows.get(j + k * this.height);\n        if (!row) {\n            return;\n        }\n        const index = this.findIndex(row, i);\n        const rle = row[index];\n        return i >= rle?.start ? rle : undefined;\n    }\n    has(index) {\n        const i = index % this.jMultiple;\n        const j = (index - i) / this.jMultiple;\n        const rle = this.getRLE(i, j);\n        return rle?.value !== undefined;\n    }\n    delete(index) {\n        const i = index % this.width;\n        const j = (index - i) / this.width;\n        const row = this.rows.get(j);\n        if (!row) {\n            return;\n        }\n        const rleIndex = this.findIndex(row, i);\n        const rle = row[rleIndex];\n        if (!rle || rle.start > i) {\n            return;\n        }\n        if (rle.end === i + 1) {\n            rle.end--;\n            if (rle.start >= rle.end) {\n                row.splice(rleIndex, 1);\n                if (!row.length) {\n                    this.rows.delete(j);\n                }\n            }\n            return;\n        }\n        if (rle.start === i) {\n            rle.start++;\n            return;\n        }\n        const newRle = {\n            value: rle.value,\n            start: i + 1,\n            end: rle.end,\n        };\n        rle.end = i;\n        row.splice(rleIndex + 1, 0, newRle);\n    }\n    findIndex(row, i) {\n        for (let index = 0; index < row.length; index++) {\n            const { end: iEnd } = row[index];\n            if (i < iEnd) {\n                return index;\n            }\n        }\n        return row.length;\n    }\n    forEach(callback, options) {\n        const rowModified = options?.rowModified;\n        for (const [baseIndex, row] of this.rows) {\n            const rowToUse = rowModified ? [...row] : row;\n            for (const rle of rowToUse) {\n                callback(baseIndex * this.width, rle, row);\n            }\n        }\n    }\n    forEachRow(callback) {\n        for (const [baseIndex, row] of this.rows) {\n            callback(baseIndex * this.width, row);\n        }\n    }\n    clear() {\n        this.rows.clear();\n    }\n    keys() {\n        return [...this.rows.keys()];\n    }\n    getPixelData(k = 0, pixelData) {\n        if (!pixelData) {\n            pixelData = new this.pixelDataConstructor(this.width * this.height * this.numComps);\n        }\n        else {\n            pixelData.fill(0);\n        }\n        const { width, height, numComps } = this;\n        for (let j = 0; j < height; j++) {\n            const row = this.getRun(j, k);\n            if (!row) {\n                continue;\n            }\n            if (numComps === 1) {\n                for (const rle of row) {\n                    const rowOffset = j * width;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i++) {\n                        pixelData[rowOffset + i] = value;\n                    }\n                }\n            }\n            else {\n                for (const rle of row) {\n                    const rowOffset = j * width * numComps;\n                    const { start, end, value } = rle;\n                    for (let i = start; i < end; i += numComps) {\n                        for (let comp = 0; comp < numComps; comp++) {\n                            pixelData[rowOffset + i + comp] = value[comp];\n                        }\n                    }\n                }\n            }\n        }\n        return pixelData;\n    }\n    floodFill(i, j, k, value, options) {\n        const rle = this.getRLE(i, j, k);\n        if (!rle) {\n            throw new Error(`Initial point ${i},${j},${k} isn't in the RLE`);\n        }\n        const stack = [[rle, j, k]];\n        const replaceValue = rle.value;\n        if (replaceValue === value) {\n            throw new Error(`source (${replaceValue}) and destination (${value}) are identical`);\n        }\n        return this.flood(stack, replaceValue, value, options);\n    }\n    flood(stack, sourceValue, value, options) {\n        let sum = 0;\n        const { planar = true, diagonals = true, singlePlane = false, } = options || {};\n        const childOptions = { planar, diagonals, singlePlane };\n        while (stack.length) {\n            const top = stack.pop();\n            const [current] = top;\n            if (current.value !== sourceValue) {\n                continue;\n            }\n            current.value = value;\n            sum += current.end - current.start;\n            const adjacents = this.findAdjacents(top, childOptions).filter((adjacent) => adjacent && adjacent[0].value === sourceValue);\n            stack.push(...adjacents);\n        }\n        return sum;\n    }\n    fillFrom(getter, boundsIJK) {\n        for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {\n            for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {\n                let rle;\n                let row;\n                for (let i = boundsIJK[0][0]; i <= boundsIJK[0][1]; i++) {\n                    const value = getter(i, j, k);\n                    if (value === undefined) {\n                        rle = undefined;\n                        continue;\n                    }\n                    if (!row) {\n                        row = [];\n                        this.rows.set(j + k * this.height, row);\n                    }\n                    if (rle && rle.value !== value) {\n                        rle = undefined;\n                    }\n                    if (!rle) {\n                        rle = { start: i, end: i, value };\n                        row.push(rle);\n                    }\n                    rle.end++;\n                }\n            }\n        }\n    }\n    findAdjacents(item, { diagonals = true, planar = true, singlePlane = false }) {\n        const [rle, j, k, adjacentsDelta] = item;\n        const { start, end } = rle;\n        const leftRle = start > 0 && this.getRLE(start - 1, j, k);\n        const rightRle = end < this.width && this.getRLE(end, j, k);\n        const range = diagonals\n            ? [start > 0 ? start - 1 : start, end < this.width ? end + 1 : end]\n            : [start, end];\n        const adjacents = [];\n        if (leftRle) {\n            adjacents.push([leftRle, j, k]);\n        }\n        if (rightRle) {\n            adjacents.push([rightRle, j, k]);\n        }\n        for (const delta of adjacentsDelta ||\n            (singlePlane ? ADJACENT_SINGLE_PLANE : ADJACENT_ALL)) {\n            const [, delta1, delta2] = delta;\n            const testJ = delta1 + j;\n            const testK = delta2 + k;\n            if (testJ < 0 || testJ >= this.height) {\n                continue;\n            }\n            if (testK < 0 || testK >= this.depth) {\n                continue;\n            }\n            const row = this.getRun(testJ, testK);\n            if (!row) {\n                continue;\n            }\n            for (const testRle of row) {\n                const newAdjacentDelta = adjacentsDelta ||\n                    (singlePlane && ADJACENT_SINGLE_PLANE) ||\n                    (planar && delta2 > 0 && ADJACENT_OUT) ||\n                    (planar && delta2 < 0 && ADJACENT_IN) ||\n                    ADJACENT_ALL;\n                if (!(testRle.end <= range[0] || testRle.start >= range[1])) {\n                    adjacents.push([testRle, testJ, testK, newAdjacentDelta]);\n                }\n            }\n        }\n        return adjacents;\n    }\n}\n","export function isImageActor(actorEntry) {\n    return (actorIsA(actorEntry, 'vtkVolume') || actorIsA(actorEntry, 'vtkImageSlice'));\n}\nexport function actorIsA(actorEntry, actorType) {\n    const actorToCheck = 'isA' in actorEntry ? actorEntry : actorEntry.actor;\n    if (!actorToCheck) {\n        return false;\n    }\n    return !!actorToCheck.isA(actorType);\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nexport default function applyPreset(actor, preset) {\n    const colorTransferArray = preset.colorTransfer\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const { shiftRange } = getShiftRange(colorTransferArray);\n    const min = shiftRange[0];\n    const width = shiftRange[1] - shiftRange[0];\n    const cfun = vtkColorTransferFunction.newInstance();\n    const normColorTransferValuePoints = [];\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        let value = colorTransferArray[i];\n        const r = colorTransferArray[i + 1];\n        const g = colorTransferArray[i + 2];\n        const b = colorTransferArray[i + 3];\n        value = (value - min) / width;\n        normColorTransferValuePoints.push([value, r, g, b]);\n    }\n    applyPointsToRGBFunction(normColorTransferValuePoints, shiftRange, cfun);\n    actor.getProperty().setRGBTransferFunction(0, cfun);\n    const scalarOpacityArray = preset.scalarOpacity\n        .split(' ')\n        .splice(1)\n        .map(parseFloat);\n    const ofun = vtkPiecewiseFunction.newInstance();\n    const normPoints = [];\n    for (let i = 0; i < scalarOpacityArray.length; i += 2) {\n        let value = scalarOpacityArray[i];\n        const opacity = scalarOpacityArray[i + 1];\n        value = (value - min) / width;\n        normPoints.push([value, opacity]);\n    }\n    applyPointsToPiecewiseFunction(normPoints, shiftRange, ofun);\n    const property = actor.getProperty();\n    property.setScalarOpacity(0, ofun);\n    const [gradientMinValue, gradientMinOpacity, gradientMaxValue, gradientMaxOpacity,] = preset.gradientOpacity.split(' ').splice(1).map(parseFloat);\n    property.setUseGradientOpacity(0, true);\n    property.setGradientOpacityMinimumValue(0, gradientMinValue);\n    property.setGradientOpacityMinimumOpacity(0, gradientMinOpacity);\n    property.setGradientOpacityMaximumValue(0, gradientMaxValue);\n    property.setGradientOpacityMaximumOpacity(0, gradientMaxOpacity);\n    if (preset.interpolation === '1') {\n        property.setInterpolationTypeToFastLinear();\n    }\n    property.setShade(preset.shade === '1');\n    const ambient = parseFloat(preset.ambient);\n    const diffuse = parseFloat(preset.diffuse);\n    const specular = parseFloat(preset.specular);\n    const specularPower = parseFloat(preset.specularPower);\n    property.setAmbient(ambient);\n    property.setDiffuse(diffuse);\n    property.setSpecular(specular);\n    property.setSpecularPower(specularPower);\n}\nfunction getShiftRange(colorTransferArray) {\n    let min = Infinity;\n    let max = -Infinity;\n    for (let i = 0; i < colorTransferArray.length; i += 4) {\n        min = Math.min(min, colorTransferArray[i]);\n        max = Math.max(max, colorTransferArray[i]);\n    }\n    const center = (max - min) / 2;\n    return {\n        shiftRange: [-center, center],\n        min,\n        max,\n    };\n}\nfunction applyPointsToRGBFunction(points, range, cfun) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, r, g, b]) => [\n        x * width + range[0],\n        r,\n        g,\n        b,\n    ]);\n    cfun.removeAllPoints();\n    rescaled.forEach(([x, r, g, b]) => cfun.addRGBPoint(x, r, g, b));\n    return rescaled;\n}\nfunction applyPointsToPiecewiseFunction(points, range, pwf) {\n    const width = range[1] - range[0];\n    const rescaled = points.map(([x, y]) => [x * width + range[0], y]);\n    pwf.removeAllPoints();\n    rescaled.forEach(([x, y]) => pwf.addPoint(x, y));\n    return rescaled;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nconst autoLoad = (volumeId) => {\n    const renderingEngineAndViewportIds = getRenderingEngineAndViewportsContainingVolume(volumeId);\n    if (!renderingEngineAndViewportIds?.length) {\n        return;\n    }\n    renderingEngineAndViewportIds.forEach(({ renderingEngine, viewportIds }) => {\n        if (!renderingEngine.hasBeenDestroyed) {\n            renderingEngine.renderViewports(viewportIds);\n        }\n    });\n};\nfunction getRenderingEngineAndViewportsContainingVolume(volumeId) {\n    const renderingEnginesArray = getRenderingEngines();\n    const renderingEngineAndViewportIds = [];\n    renderingEnginesArray.forEach((renderingEngine) => {\n        const viewports = getViewportsWithVolumeId(volumeId);\n        if (viewports.length) {\n            renderingEngineAndViewportIds.push({\n                renderingEngine,\n                viewportIds: viewports.map((viewport) => viewport.id),\n            });\n        }\n    });\n    return renderingEngineAndViewportIds;\n}\nexport default autoLoad;\n","import * as metaData from '../metaData';\nimport { MetadataModules, VOILUTFunctionType } from '../enums';\nexport function getValidVOILUTFunction(voiLUTFunction) {\n    if (!Object.values(VOILUTFunctionType).includes(voiLUTFunction)) {\n        return VOILUTFunctionType.LINEAR;\n    }\n    return voiLUTFunction;\n}\nexport function getImagePlaneModule(imageId) {\n    const imagePlaneModule = metaData.get(MetadataModules.IMAGE_PLANE, imageId);\n    const newImagePlaneModule = {\n        ...imagePlaneModule,\n    };\n    if (!newImagePlaneModule.columnPixelSpacing) {\n        newImagePlaneModule.columnPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.rowPixelSpacing) {\n        newImagePlaneModule.rowPixelSpacing = 1;\n    }\n    if (!newImagePlaneModule.columnCosines) {\n        newImagePlaneModule.columnCosines = [0, 1, 0];\n    }\n    if (!newImagePlaneModule.rowCosines) {\n        newImagePlaneModule.rowCosines = [1, 0, 0];\n    }\n    if (!newImagePlaneModule.imagePositionPatient) {\n        newImagePlaneModule.imagePositionPatient = [0, 0, 0];\n    }\n    if (!newImagePlaneModule.imageOrientationPatient) {\n        newImagePlaneModule.imageOrientationPatient = new Float32Array([\n            1, 0, 0, 0, 1, 0,\n        ]);\n    }\n    return newImagePlaneModule;\n}\nexport function calibrateImagePlaneModule(imageId, imagePlaneModule, currentCalibration) {\n    const calibration = metaData.get('calibratedPixelSpacing', imageId);\n    const isUpdated = currentCalibration !== calibration;\n    const { scale } = calibration || {};\n    const hasPixelSpacing = scale > 0 || imagePlaneModule.rowPixelSpacing > 0;\n    imagePlaneModule.calibration = calibration;\n    if (!isUpdated) {\n        return { imagePlaneModule, hasPixelSpacing };\n    }\n    return {\n        imagePlaneModule,\n        hasPixelSpacing,\n        calibrationEvent: {\n            scale,\n            calibration,\n        },\n    };\n}\nexport function buildMetadata(image) {\n    const imageId = image.imageId;\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = metaData.get('imagePixelModule', imageId);\n    const { windowWidth, windowCenter, voiLUTFunction } = image;\n    const { modality } = metaData.get('generalSeriesModule', imageId);\n    const imageIdScalingFactor = metaData.get('scalingModule', imageId);\n    const calibration = metaData.get(MetadataModules.CALIBRATION, imageId);\n    const voiLUTFunctionEnum = getValidVOILUTFunction(voiLUTFunction);\n    const imagePlaneModule = getImagePlaneModule(imageId);\n    return {\n        calibration,\n        scalingFactor: imageIdScalingFactor,\n        voiLUTFunction: voiLUTFunctionEnum,\n        modality,\n        imagePlaneModule,\n        imagePixelModule: {\n            bitsAllocated,\n            bitsStored,\n            samplesPerPixel,\n            highBit,\n            photometricInterpretation,\n            pixelRepresentation,\n            windowWidth: windowWidth,\n            windowCenter: windowCenter,\n            modality,\n            voiLUTFunction: voiLUTFunctionEnum,\n        },\n    };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport { getConfiguration } from '../init';\nexport default function calculateSpacingBetweenImageIds(imageIds) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n    const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    const refIppVec = vec3.fromValues(referenceImagePositionPatient[0], referenceImagePositionPatient[1], referenceImagePositionPatient[2]);\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    let spacing;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        const ippVec = vec3.fromValues(imagePositionPatient[0], imagePositionPatient[1], imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, ippVec);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        const numImages = distanceImagePairs.length;\n        spacing =\n            Math.abs(distanceImagePairs[numImages - 1].distance -\n                distanceImagePairs[0].distance) /\n                (numImages - 1);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        const metadataForMiddleImage = metaData.get('imagePlaneModule', prefetchedImageIds[1]);\n        if (!metadataForMiddleImage) {\n            throw new Error('Incomplete metadata required for volume construction.');\n        }\n        const positionVector = vec3.create();\n        const middleIppVec = vec3.fromValues(metadataForMiddleImage.imagePositionPatient[0], metadataForMiddleImage.imagePositionPatient[1], metadataForMiddleImage.imagePositionPatient[2]);\n        vec3.sub(positionVector, refIppVec, middleIppVec);\n        const distanceBetweenFirstAndMiddleImages = vec3.dot(positionVector, scanAxisNormal);\n        spacing =\n            Math.abs(distanceBetweenFirstAndMiddleImages) /\n                Math.floor(imageIds.length / 2);\n    }\n    const { sliceThickness, spacingBetweenSlices } = metaData.get('imagePlaneModule', imageIds[0]);\n    const { strictZSpacingForVolumeViewport } = getConfiguration().rendering;\n    if ((spacing === 0 || isNaN(spacing)) && !strictZSpacingForVolumeViewport) {\n        if (spacingBetweenSlices) {\n            console.debug('Could not calculate spacing. Using spacingBetweenSlices');\n            spacing = spacingBetweenSlices;\n        }\n        else if (sliceThickness) {\n            console.debug('Could not calculate spacing and no spacingBetweenSlices. Using sliceThickness');\n            spacing = sliceThickness;\n        }\n        else {\n            console.debug('Could not calculate spacing. The VolumeViewport visualization is compromised. Setting spacing to 1 to render');\n            spacing = 1;\n        }\n    }\n    return spacing;\n}\n","function clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\nexport { clamp as default, clamp };\n","import vtkColorMaps from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport isEqual from './isEqual';\nimport { actorIsA } from './actorCheck';\nconst _colormaps = new Map();\nfunction registerColormap(colormap) {\n    colormap.name = colormap.name || colormap.Name;\n    _colormaps.set(colormap.name, colormap);\n}\nfunction getColormap(name) {\n    return _colormaps.get(name);\n}\nfunction getColormapNames() {\n    return Array.from(_colormaps.keys());\n}\nfunction findMatchingColormap(rgbPoints, actor) {\n    const colormapsVTK = vtkColorMaps.rgbPresetNames.map((presetName) => vtkColorMaps.getPresetByName(presetName));\n    const colormapsCS3D = getColormapNames().map((colormapName) => getColormap(colormapName));\n    const colormaps = colormapsVTK.concat(colormapsCS3D);\n    const matchedColormap = colormaps.find((colormap) => {\n        const { RGBPoints: presetRGBPoints } = colormap;\n        if (presetRGBPoints.length !== rgbPoints.length) {\n            return false;\n        }\n        for (let i = 0; i < presetRGBPoints.length; i += 4) {\n            if (!isEqual(presetRGBPoints.slice(i + 1, i + 4), rgbPoints.slice(i + 1, i + 4))) {\n                return false;\n            }\n        }\n        return true;\n    });\n    if (!matchedColormap) {\n        return null;\n    }\n    const opacity = [];\n    if (actorIsA(actor, 'vtkVolume')) {\n        const opacityPoints = actor\n            .getProperty()\n            .getScalarOpacity(0)\n            .getDataPointer();\n        if (!opacityPoints) {\n            return {\n                name: matchedColormap.Name,\n            };\n        }\n        for (let i = 0; i < opacityPoints.length; i += 2) {\n            opacity.push({\n                value: opacityPoints[i],\n                opacity: opacityPoints[i + 1],\n            });\n        }\n    }\n    return {\n        name: matchedColormap.Name,\n        opacity,\n    };\n}\nexport function setColorMapTransferFunctionForVolumeActor(volumeInfo) {\n    const { volumeActor, preset, opacity = 0.9, threshold = null, colorRange = [0, 5], } = volumeInfo;\n    const mapper = volumeActor.getMapper();\n    mapper.setSampleDistance(1.0);\n    const cfun = vtkColorTransferFunction.newInstance();\n    const presetToUse = preset || vtkColorMaps.getPresetByName('hsv');\n    cfun.applyColorMap(presetToUse);\n    cfun.setMappingRange(colorRange[0], colorRange[1]);\n    volumeActor.getProperty().setRGBTransferFunction(0, cfun);\n    updateOpacityWithThreshold(volumeActor, opacity, threshold);\n}\nexport function updateOpacity(volumeActor, newOpacity) {\n    const currentThreshold = getThresholdValue(volumeActor);\n    updateOpacityWithThreshold(volumeActor, newOpacity, currentThreshold);\n}\nexport function updateThreshold(volumeActor, newThreshold) {\n    const currentOpacity = getMaxOpacity(volumeActor);\n    updateOpacityWithThreshold(volumeActor, currentOpacity, newThreshold);\n}\nfunction updateOpacityWithThreshold(volumeActor, opacity, threshold) {\n    const meta = volumeActor.getMapper().getInputData().get('voxelManager');\n    if (!meta?.voxelManager) {\n        throw new Error('No voxel manager was found for the volume actor, or you cannot yet update opacity with a threshold using stacked images');\n    }\n    const range = meta.voxelManager.getRange();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    if (threshold !== null) {\n        const delta = Math.abs(range[1] - range[0]) * 0.001;\n        const thresholdValue = Math.max(range[0], Math.min(range[1], threshold));\n        ofun.addPoint(range[0], 0);\n        ofun.addPoint(thresholdValue - delta, 0);\n        ofun.addPoint(thresholdValue, opacity);\n        ofun.addPoint(range[1], opacity);\n    }\n    else {\n        ofun.addPoint(range[0], opacity);\n        ofun.addPoint(range[1], opacity);\n    }\n    volumeActor.getProperty().setScalarOpacity(0, ofun);\n}\nfunction getThresholdValue(volumeActor) {\n    const opacityFunction = volumeActor.getProperty().getScalarOpacity(0);\n    if (!opacityFunction) {\n        return null;\n    }\n    const dataArray = opacityFunction.getDataPointer();\n    if (!dataArray || dataArray.length <= 4) {\n        return null;\n    }\n    for (let i = 0; i < dataArray.length - 2; i += 2) {\n        const x1 = dataArray[i];\n        const y1 = dataArray[i + 1];\n        const x2 = dataArray[i + 2];\n        const y2 = dataArray[i + 3];\n        if (y1 === 0 && y2 > 0) {\n            return x2;\n        }\n    }\n    return null;\n}\nfunction getMaxOpacity(volumeActor) {\n    const opacityFunction = volumeActor.getProperty().getScalarOpacity(0);\n    if (!opacityFunction) {\n        return 1.0;\n    }\n    const dataArray = opacityFunction.getDataPointer();\n    if (!dataArray || dataArray.length === 0) {\n        return 1.0;\n    }\n    let maxOpacity = 0;\n    for (let i = 1; i < dataArray.length; i += 2) {\n        if (dataArray[i] > maxOpacity) {\n            maxOpacity = dataArray[i];\n        }\n    }\n    return maxOpacity;\n}\nexport { getColormap, getColormapNames, registerColormap, findMatchingColormap, getThresholdValue, getMaxOpacity, };\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nexport default function createLinearRGBTransferFunction(voiRange) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    let lower = 0;\n    let upper = 1024;\n    if (voiRange.lower !== undefined && voiRange.upper !== undefined) {\n        lower = voiRange.lower;\n        upper = voiRange.upper;\n    }\n    cfun.addRGBPoint(lower, 0.0, 0.0, 0.0);\n    cfun.addRGBPoint(upper, 1.0, 1.0, 1.0);\n    return cfun;\n}\n","import vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport * as windowLevelUtil from './windowLevel';\nimport { logit } from './logit';\nexport default function createSigmoidRGBTransferFunction(voiRange, approximationNodes = 1024) {\n    const { windowWidth, windowCenter } = windowLevelUtil.toWindowLevel(voiRange.lower, voiRange.upper);\n    const range = Array.from({ length: approximationNodes }, (_, i) => (i + 1) / (approximationNodes + 2));\n    const table = range.flatMap((y) => {\n        const x = logit(y, windowCenter, windowWidth);\n        return [x, y, y, y, 0.5, 0.0];\n    });\n    const cfun = vtkColorTransferFunction.newInstance();\n    cfun.buildFunctionFromArray(vtkDataArray.newInstance({\n        values: table,\n        numberOfComponents: 6,\n    }));\n    return cfun;\n}\n","export default function decimate(list, interleave, offset = 0) {\n    const interleaveIndices = [];\n    for (let i = offset; i < list.length; i += interleave) {\n        interleaveIndices.push(i);\n    }\n    return interleaveIndices;\n}\n","export function deepClone(obj) {\n    if (obj === null || typeof obj !== 'object') {\n        return obj;\n    }\n    if (typeof obj === 'function') {\n        return obj;\n    }\n    if (typeof structuredClone === 'function') {\n        return obj;\n    }\n    if (Array.isArray(obj)) {\n        return obj.map(deepClone);\n    }\n    else {\n        const clonedObj = {};\n        for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                clonedObj[key] = deepClone(obj[key]);\n            }\n        }\n        return clonedObj;\n    }\n}\n","export default function fnv1aHash(str) {\n    let hash = 0x811c9dc5;\n    for (let i = 0; i < str.length; i++) {\n        hash ^= str.charCodeAt(i);\n        hash +=\n            (hash << 1) + (hash << 4) + (hash << 7) + (hash << 8) + (hash << 24);\n    }\n    return (hash >>> 0).toString(36);\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport { coreLog } from './logger';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { EPSILON } from '../constants';\nconst log = coreLog.getLogger('utilities', 'getClosestImageId');\nexport default function getClosestImageId(imageVolume, worldPos, viewPlaneNormal, options) {\n    const { direction, spacing, imageIds } = imageVolume;\n    const { ignoreSpacing = false } = options || {};\n    if (!imageIds?.length) {\n        return;\n    }\n    const kVector = direction.slice(6, 9);\n    const dotProduct = vec3.dot(kVector, viewPlaneNormal);\n    if (Math.abs(dotProduct) < 1 - EPSILON) {\n        return;\n    }\n    let halfSpacingInNormalDirection;\n    if (!ignoreSpacing) {\n        const spacingInNormalDirection = getSpacingInNormalDirection({ direction, spacing }, viewPlaneNormal);\n        halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n    }\n    let closestImageId;\n    let minDistance = Infinity;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const imagePlaneModule = metaData.get('imagePlaneModule', imageId);\n        if (!imagePlaneModule?.imagePositionPatient) {\n            log.warn(`Missing imagePositionPatient for imageId: ${imageId}`);\n            continue;\n        }\n        const { imagePositionPatient } = imagePlaneModule;\n        const dir = vec3.create();\n        vec3.sub(dir, worldPos, imagePositionPatient);\n        const distance = Math.abs(vec3.dot(dir, viewPlaneNormal));\n        if (ignoreSpacing) {\n            if (distance < minDistance) {\n                minDistance = distance;\n                closestImageId = imageId;\n            }\n        }\n        else {\n            if (distance < halfSpacingInNormalDirection && distance < minDistance) {\n                minDistance = distance;\n                closestImageId = imageId;\n            }\n        }\n    }\n    if (closestImageId === undefined) {\n        log.warn('No imageId found within the specified criteria (half spacing or absolute closest).');\n    }\n    return closestImageId;\n}\n","import { vec3 } from 'gl-matrix';\nimport { EPSILON } from '../constants';\nimport { buildMetadata } from './buildMetadata';\nexport function getImageDataMetadata(image) {\n    const { imagePlaneModule, imagePixelModule, voiLUTFunction, modality, scalingFactor, calibration, } = buildMetadata(image);\n    let { rowCosines, columnCosines } = imagePlaneModule;\n    if (rowCosines == null || columnCosines == null) {\n        rowCosines = [1, 0, 0];\n        columnCosines = [0, 1, 0];\n    }\n    const rowCosineVec = vec3.fromValues(rowCosines[0], rowCosines[1], rowCosines[2]);\n    const colCosineVec = vec3.fromValues(columnCosines[0], columnCosines[1], columnCosines[2]);\n    const scanAxisNormal = vec3.create();\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    let origin = imagePlaneModule.imagePositionPatient;\n    if (origin == null) {\n        origin = [0, 0, 0];\n    }\n    const xSpacing = imagePlaneModule.columnPixelSpacing || image.columnPixelSpacing;\n    const ySpacing = imagePlaneModule.rowPixelSpacing || image.rowPixelSpacing;\n    const xVoxels = image.columns;\n    const yVoxels = image.rows;\n    const zSpacing = EPSILON;\n    const zVoxels = 1;\n    if (!imagePixelModule.photometricInterpretation &&\n        image.sizeInBytes === 3 * image.width * image.height) {\n        image.numberOfComponents = 3;\n    }\n    const numberOfComponents = image.numberOfComponents ||\n        _getNumCompsFromPhotometricInterpretation(imagePixelModule.photometricInterpretation);\n    return {\n        numberOfComponents,\n        origin,\n        direction: [...rowCosineVec, ...colCosineVec, ...scanAxisNormal],\n        dimensions: [xVoxels, yVoxels, zVoxels],\n        spacing: [xSpacing, ySpacing, zSpacing],\n        numVoxels: xVoxels * yVoxels * zVoxels,\n        imagePlaneModule,\n        imagePixelModule,\n        bitsAllocated: imagePixelModule.bitsAllocated,\n        voiLUTFunction,\n        modality,\n        scalingFactor,\n        calibration,\n        scanAxisNormal: scanAxisNormal,\n    };\n}\nfunction _getNumCompsFromPhotometricInterpretation(photometricInterpretation) {\n    let numberOfComponents = 1;\n    if (photometricInterpretation === 'RGB' ||\n        photometricInterpretation?.includes('YBR') ||\n        photometricInterpretation === 'PALETTE COLOR') {\n        numberOfComponents = 3;\n    }\n    return numberOfComponents;\n}\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getImageSliceDataForVolumeViewport(viewport) {\n    const camera = viewport.getCamera();\n    const { spacingInNormalDirection, imageVolume } = getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n    if (!imageVolume) {\n        return;\n    }\n    const { viewPlaneNormal, focalPoint } = camera;\n    const actorEntry = viewport\n        .getActors()\n        .find((a) => a.referencedId === imageVolume.volumeId ||\n        a.uid === imageVolume.volumeId);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', imageVolume.volumeId);\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    const { min, max, current } = sliceRange;\n    const numberOfSlices = Math.round((max - min) / spacingInNormalDirection) + 1;\n    let imageIndex = ((current - min) / (max - min)) * numberOfSlices;\n    imageIndex = Math.floor(imageIndex);\n    if (imageIndex > numberOfSlices - 1) {\n        imageIndex = numberOfSlices - 1;\n    }\n    else if (imageIndex < 0) {\n        imageIndex = 0;\n    }\n    return {\n        numberOfSlices,\n        imageIndex,\n    };\n}\nexport default getImageSliceDataForVolumeViewport;\n","import * as metaData from '../metaData';\nexport default function getScalingParameters(imageId) {\n    const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n    const generalSeriesModule = metaData.get('generalSeriesModule', imageId) || {};\n    const { modality } = generalSeriesModule;\n    const scalingParameters = {\n        rescaleSlope: modalityLutModule.rescaleSlope || 1,\n        rescaleIntercept: modalityLutModule.rescaleIntercept ?? 0,\n        modality,\n    };\n    const scalingModules = metaData.get('scalingModule', imageId) || {};\n    return {\n        ...scalingParameters,\n        ...(modality === 'PT' && {\n            suvbw: scalingModules.suvbw,\n            suvbsa: scalingModules.suvbsa,\n            suvlbm: scalingModules.suvlbm,\n        }),\n        ...(modality === 'RTDOSE' && {\n            doseGridScaling: scalingModules.DoseGridScaling,\n            doseSummation: scalingModules.DoseSummation,\n            doseType: scalingModules.DoseType,\n            doseUnit: scalingModules.DoseUnit,\n        }),\n    };\n}\n","import vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport { EPSILON } from '../constants';\nconst SMALL_EPSILON = EPSILON * EPSILON;\nconst isOne = (v) => Math.abs(Math.abs(v) - 1) < SMALL_EPSILON;\nconst isUnit = (v, off) => isOne(v[off]) || isOne(v[off + 1]) || isOne(v[off + 2]);\nconst isOrthonormal = (v) => isUnit(v, 0) && isUnit(v, 3) && isUnit(v, 6);\nexport default function getSliceRange(volumeActor, viewPlaneNormal, focalPoint) {\n    const imageData = volumeActor.getMapper().getInputData();\n    let corners;\n    const direction = imageData.getDirection();\n    if (isOrthonormal(direction)) {\n        corners = getVolumeActorCorners(volumeActor);\n    }\n    else {\n        const [dx, dy, dz] = imageData.getDimensions();\n        const cornersIdx = [\n            [0, 0, 0],\n            [dx - 1, 0, 0],\n            [0, dy - 1, 0],\n            [dx - 1, dy - 1, 0],\n            [0, 0, dz - 1],\n            [dx - 1, 0, dz - 1],\n            [0, dy - 1, dz - 1],\n            [dx - 1, dy - 1, dz - 1],\n        ];\n        corners = cornersIdx.map((it) => imageData.indexToWorld(it));\n    }\n    const transform = vtkMatrixBuilder\n        .buildFromDegree()\n        .identity()\n        .rotateFromDirections(viewPlaneNormal, [1, 0, 0]);\n    corners.forEach((pt) => transform.apply(pt));\n    const transformedFocalPoint = [...focalPoint];\n    transform.apply(transformedFocalPoint);\n    const currentSlice = transformedFocalPoint[0];\n    let minX = Infinity;\n    let maxX = -Infinity;\n    for (let i = 0; i < 8; i++) {\n        const x = corners[i][0];\n        if (x > maxX) {\n            maxX = x;\n        }\n        if (x < minX) {\n            minX = x;\n        }\n    }\n    return {\n        min: minX,\n        max: maxX,\n        current: currentSlice,\n        actor: volumeActor,\n        viewPlaneNormal,\n        focalPoint,\n    };\n}\n","import { vec3 } from 'gl-matrix';\nexport default function getSpacingInNormalDirection(imageVolume, viewPlaneNormal) {\n    const { direction, spacing } = imageVolume;\n    const iVector = direction.slice(0, 3);\n    const jVector = direction.slice(3, 6);\n    const kVector = direction.slice(6, 9);\n    const dotProducts = [\n        vec3.dot(iVector, viewPlaneNormal),\n        vec3.dot(jVector, viewPlaneNormal),\n        vec3.dot(kVector, viewPlaneNormal),\n    ];\n    const projectedSpacing = vec3.create();\n    vec3.set(projectedSpacing, dotProducts[0] * spacing[0], dotProducts[1] * spacing[1], dotProducts[2] * spacing[2]);\n    const spacingInNormalDirection = vec3.length(projectedSpacing);\n    return spacingInNormalDirection;\n}\n","import cache from '../cache/cache';\nimport { EPSILON } from '../constants';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport { getVolumeLoaderSchemes } from '../loaders/volumeLoader';\nimport { getVolumeId } from './getVolumeId';\nconst EPSILON_PART = 1 + EPSILON;\nconst startsWith = (str, starts) => starts === str.substring(0, Math.min(str.length, starts.length));\nconst isPrimaryVolume = (volume) => !!getVolumeLoaderSchemes().find((scheme) => startsWith(volume.volumeId, scheme));\nexport default function getTargetVolumeAndSpacingInNormalDir(viewport, camera, targetId, useSlabThickness = false) {\n    const { viewPlaneNormal } = camera;\n    const volumeActors = viewport.getActors();\n    if (!volumeActors.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const imageVolumes = volumeActors\n        .map((va) => {\n        const actorUID = va.referencedId ?? va.uid;\n        return cache.getVolume(actorUID);\n    })\n        .filter((iv) => !!iv);\n    if (targetId) {\n        const targetVolumeId = getVolumeId(targetId);\n        const imageVolumeIndex = imageVolumes.findIndex((iv) => targetVolumeId.includes(iv.volumeId));\n        const imageVolume = imageVolumes[imageVolumeIndex];\n        const { uid: actorUID } = volumeActors[imageVolumeIndex];\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness);\n        return { imageVolume, spacingInNormalDirection, actorUID };\n    }\n    if (!imageVolumes.length) {\n        return {\n            spacingInNormalDirection: null,\n            imageVolume: null,\n            actorUID: null,\n        };\n    }\n    const smallest = {\n        spacingInNormalDirection: Infinity,\n        imageVolume: null,\n        actorUID: null,\n    };\n    const hasPrimaryVolume = imageVolumes.find(isPrimaryVolume);\n    for (let i = 0; i < imageVolumes.length; i++) {\n        const imageVolume = imageVolumes[i];\n        if (hasPrimaryVolume && !isPrimaryVolume(imageVolume)) {\n            continue;\n        }\n        const spacingInNormalDirection = getSpacingInNormal(imageVolume, viewPlaneNormal, viewport);\n        if (spacingInNormalDirection * EPSILON_PART <\n            smallest.spacingInNormalDirection) {\n            smallest.spacingInNormalDirection = spacingInNormalDirection;\n            smallest.imageVolume = imageVolume;\n            smallest.actorUID = volumeActors[i].uid;\n        }\n    }\n    return smallest;\n}\nfunction getSpacingInNormal(imageVolume, viewPlaneNormal, viewport, useSlabThickness = false) {\n    const { slabThickness } = viewport.getProperties();\n    let spacingInNormalDirection = slabThickness;\n    if (!slabThickness || !useSlabThickness) {\n        spacingInNormalDirection = getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n    }\n    return spacingInNormalDirection;\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nfunction getViewportsWithVolumeId(volumeId) {\n    const renderingEngines = getRenderingEngines();\n    const targetViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewports = renderingEngine.getVolumeViewports();\n        const filteredViewports = viewports.filter((vp) => vp.hasVolumeId(volumeId));\n        targetViewports.push(...filteredViewports);\n    });\n    return targetViewports;\n}\nexport default getViewportsWithVolumeId;\n","export default function getVoiFromSigmoidRGBTransferFunction(cfun) {\n    let cfunRange = [];\n    const [lower, upper] = cfun.getRange();\n    cfun.getTable(lower, upper, 1024, cfunRange);\n    cfunRange = cfunRange.filter((v, k) => k % 3 === 0);\n    const cfunDomain = [...Array(1024).keys()].map((v, k) => {\n        return lower + ((upper - lower) / (1024 - 1)) * k;\n    });\n    const y1 = cfunRange[256];\n    const logy1 = Math.log((1 - y1) / y1);\n    const x1 = cfunDomain[256];\n    const y2 = cfunRange[256 * 3];\n    const logy2 = Math.log((1 - y2) / y2);\n    const x2 = cfunDomain[256 * 3];\n    const ww = Math.round((4 * (x2 - x1)) / (logy1 - logy2));\n    const wc = Math.round(x1 + (ww * logy1) / 4);\n    return [Math.round(wc - ww / 2), Math.round(wc + ww / 2)];\n}\n","export default function getVolumeActorCorners(volumeActor) {\n    const imageData = volumeActor.getMapper().getInputData();\n    const bounds = imageData.extentToBounds(imageData.getExtent());\n    return [\n        [bounds[0], bounds[2], bounds[4]],\n        [bounds[0], bounds[2], bounds[5]],\n        [bounds[0], bounds[3], bounds[4]],\n        [bounds[0], bounds[3], bounds[5]],\n        [bounds[1], bounds[2], bounds[4]],\n        [bounds[1], bounds[2], bounds[5]],\n        [bounds[1], bounds[3], bounds[4]],\n        [bounds[1], bounds[3], bounds[5]],\n    ];\n}\n","export const getVolumeId = (targetId) => {\n    const prefix = 'volumeId:';\n    const str = targetId.includes(prefix)\n        ? targetId.substring(prefix.length)\n        : targetId;\n    const index = str.indexOf('sliceIndex=');\n    return index === -1 ? str : str.substring(0, index - 1);\n};\n","import getSliceRange from './getSliceRange';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nfunction getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness = false) {\n    const camera = viewport.getCamera();\n    const { focalPoint, viewPlaneNormal } = camera;\n    const { spacingInNormalDirection, actorUID } = getTargetVolumeAndSpacingInNormalDir(viewport, camera, volumeId, useSlabThickness);\n    if (!actorUID) {\n        throw new Error(`Could not find image volume with id ${volumeId} in the viewport`);\n    }\n    const actorEntry = viewport.getActor(actorUID);\n    if (!actorEntry) {\n        console.warn('No actor found for with actorUID of', actorUID);\n        return null;\n    }\n    const volumeActor = actorEntry.actor;\n    const sliceRange = getSliceRange(volumeActor, viewPlaneNormal, focalPoint);\n    return {\n        sliceRange,\n        spacingInNormalDirection,\n        camera,\n    };\n}\nexport default getVolumeSliceRangeInfo;\n","import getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nfunction getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness = false) {\n    const { sliceRange, spacingInNormalDirection, camera } = getVolumeSliceRangeInfo(viewport, volumeId, useSlabThickness);\n    const { min, max, current } = sliceRange;\n    const numScrollSteps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * numScrollSteps;\n    const currentStepIndex = Math.round(floatingStepNumber);\n    return {\n        numScrollSteps,\n        currentStepIndex,\n        sliceRangeInfo: {\n            sliceRange,\n            spacingInNormalDirection,\n            camera,\n        },\n    };\n}\nexport default getVolumeViewportScrollInfo;\n","export const hasFloatScalingParameters = (scalingParameters) => {\n    const hasFloatRescale = Object.values(scalingParameters).some((value) => typeof value === 'number' && !Number.isInteger(value));\n    return hasFloatRescale;\n};\n","export default function hasNaNValues(input) {\n    if (Array.isArray(input)) {\n        return input.some((value) => Number.isNaN(value));\n    }\n    return Number.isNaN(input);\n}\n","export default function imageIdToURI(imageId) {\n    const colonIndex = imageId.indexOf(':');\n    return imageId.substring(colonIndex + 1);\n}\n","import { addProvider } from '../metaData';\nconst retrieveConfigurationState = new Map();\nconst IMAGE_RETRIEVE_CONFIGURATION = 'imageRetrieveConfiguration';\nconst imageRetrieveMetadataProvider = {\n    IMAGE_RETRIEVE_CONFIGURATION,\n    clear: () => {\n        retrieveConfigurationState.clear();\n    },\n    add: (key, payload) => {\n        retrieveConfigurationState.set(key, payload);\n    },\n    clone: () => {\n        return new Map(retrieveConfigurationState);\n    },\n    restore: (state) => {\n        retrieveConfigurationState.clear();\n        state.forEach((value, key) => {\n            retrieveConfigurationState.set(key, value);\n        });\n    },\n    get: (type, ...queries) => {\n        if (type === IMAGE_RETRIEVE_CONFIGURATION) {\n            return queries\n                .map((query) => retrieveConfigurationState.get(query))\n                .find((it) => it !== undefined);\n        }\n    },\n};\naddProvider(imageRetrieveMetadataProvider.get.bind(imageRetrieveMetadataProvider));\nexport default imageRetrieveMetadataProvider;\n","var EventListenerPhases;\n(function (EventListenerPhases) {\n    EventListenerPhases[EventListenerPhases[\"None\"] = 0] = \"None\";\n    EventListenerPhases[EventListenerPhases[\"Capture\"] = 1] = \"Capture\";\n    EventListenerPhases[EventListenerPhases[\"Bubble\"] = 2] = \"Bubble\";\n})(EventListenerPhases || (EventListenerPhases = {}));\nclass TargetEventListeners {\n    constructor(target) {\n        this._eventListeners = new Map();\n        this._children = new Map();\n        this._target = target;\n    }\n    get isEmpty() {\n        return this._eventListeners.size === 0 && this._children.size === 0;\n    }\n    addEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            let childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                childElementEventListener = new TargetEventListeners(this._target);\n                this._children.set(namespaceToken, childElementEventListener);\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.addEventListener(type, callback, options);\n        }\n        else {\n            this._addEventListener(type, callback, options);\n        }\n    }\n    removeEventListener(type, callback, options) {\n        const dotIndex = type.indexOf('.');\n        const isNamespace = dotIndex !== -1;\n        if (isNamespace) {\n            const namespaceToken = type.substring(0, dotIndex);\n            const childElementEventListener = this._children.get(namespaceToken);\n            if (!childElementEventListener) {\n                return;\n            }\n            type = type.substring(dotIndex + 1);\n            childElementEventListener.removeEventListener(type, callback, options);\n            if (childElementEventListener.isEmpty) {\n                this._children.delete(namespaceToken);\n            }\n        }\n        else {\n            this._removeEventListener(type, callback, options);\n        }\n    }\n    reset() {\n        Array.from(this._children.entries()).forEach(([namespace, child]) => {\n            child.reset();\n            if (child.isEmpty) {\n                this._children.delete(namespace);\n            }\n            else {\n                throw new Error('Child is not empty and cannot be removed');\n            }\n        });\n        this._unregisterAllEvents();\n    }\n    _addEventListener(type, callback, options) {\n        let listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            listenersMap = new Map();\n            this._eventListeners.set(type, listenersMap);\n        }\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const registeredPhases = listenersMap.get(callback) ?? EventListenerPhases.None;\n        if (registeredPhases & listenerPhase) {\n            console.warn('A listener is already registered for this phase');\n            return;\n        }\n        listenersMap.set(callback, registeredPhases | listenerPhase);\n        this._target.addEventListener(type, callback, options);\n    }\n    _removeEventListener(type, callback, options) {\n        const useCapture = options?.capture ?? false;\n        const listenerPhase = useCapture\n            ? EventListenerPhases.Capture\n            : EventListenerPhases.Bubble;\n        const listenersMap = this._eventListeners.get(type);\n        if (!listenersMap) {\n            return;\n        }\n        const callbacks = callback ? [callback] : Array.from(listenersMap.keys());\n        callbacks.forEach((callbackItem) => {\n            const registeredPhases = listenersMap.get(callbackItem) ?? EventListenerPhases.None;\n            const phaseRegistered = !!(registeredPhases & listenerPhase);\n            if (!phaseRegistered) {\n                return;\n            }\n            this._target.removeEventListener(type, callbackItem, options);\n            const newListenerPhase = registeredPhases ^ listenerPhase;\n            if (newListenerPhase === EventListenerPhases.None) {\n                listenersMap.delete(callbackItem);\n            }\n            else {\n                listenersMap.set(callbackItem, newListenerPhase);\n            }\n        });\n        if (!listenersMap.size) {\n            this._eventListeners.delete(type);\n        }\n    }\n    _unregisterAllListeners(type, listenersMap) {\n        Array.from(listenersMap.entries()).forEach(([listener, eventPhases]) => {\n            const startPhase = EventListenerPhases.Capture;\n            for (let currentPhase = startPhase; eventPhases; currentPhase <<= 1) {\n                if (!(eventPhases & currentPhase)) {\n                    continue;\n                }\n                const useCapture = currentPhase === EventListenerPhases.Capture ? true : false;\n                this.removeEventListener(type, listener, { capture: useCapture });\n                eventPhases ^= currentPhase;\n            }\n        });\n    }\n    _unregisterAllEvents() {\n        Array.from(this._eventListeners.entries()).forEach(([type, listenersMap]) => {\n            this._unregisterAllListeners(type, listenersMap);\n        });\n    }\n}\nexport { TargetEventListeners as default, TargetEventListeners };\n","import TargetEventListeners from './TargetEventListeners';\nclass MultiTargetEventListenerManager {\n    constructor() {\n        this._targetsEventListeners = new Map();\n    }\n    addEventListener(target, type, callback, options) {\n        let eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            eventListeners = new TargetEventListeners(target);\n            this._targetsEventListeners.set(target, eventListeners);\n        }\n        eventListeners.addEventListener(type, callback, options);\n    }\n    removeEventListener(target, type, callback, options) {\n        const eventListeners = this._targetsEventListeners.get(target);\n        if (!eventListeners) {\n            return;\n        }\n        eventListeners.removeEventListener(type, callback, options);\n        if (eventListeners.isEmpty) {\n            this._targetsEventListeners.delete(target);\n        }\n    }\n    reset() {\n        Array.from(this._targetsEventListeners.entries()).forEach(([target, targetEventListeners]) => {\n            targetEventListeners.reset();\n            this._targetsEventListeners.delete(target);\n        });\n    }\n}\nexport { MultiTargetEventListenerManager as default, MultiTargetEventListenerManager, };\n","export default function scaleRGBTransferFunction(rgbTransferFunction, scalingFactor) {\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = nodeValue1[1] * scalingFactor;\n        nodeValue1[2] = nodeValue1[2] * scalingFactor;\n        nodeValue1[3] = nodeValue1[3] * scalingFactor;\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","export default function getMinMax(storedPixelData) {\n    let min = storedPixelData[0];\n    let max = storedPixelData[0];\n    let storedPixel;\n    const numPixels = storedPixelData.length;\n    for (let index = 1; index < numPixels; index++) {\n        storedPixel = storedPixelData[index];\n        min = Math.min(min, storedPixel);\n        max = Math.max(max, storedPixel);\n    }\n    return {\n        min,\n        max,\n    };\n}\n","const LAST_RUNTIME_ID = Symbol('LastRuntimeId');\nconst GLOBAL_CONTEXT = {};\nconst DEFAULT_MAX = 0xffffffff;\nconst DEFAULT_SEPARATOR = '-';\nexport default function getRuntimeId(context, separator, max) {\n    return getNextRuntimeId(context !== null && typeof context === 'object' ? context : GLOBAL_CONTEXT, LAST_RUNTIME_ID, (typeof max === 'number' && max > 0 ? max : DEFAULT_MAX) >>> 0).join(typeof separator === 'string' ? separator : DEFAULT_SEPARATOR);\n}\nfunction getNextRuntimeId(context, symbol, max) {\n    let idComponents = context[symbol];\n    if (!(idComponents instanceof Array)) {\n        idComponents = [0];\n        Object.defineProperty(context, symbol, { value: idComponents });\n    }\n    for (let carry = true, i = 0; carry && i < idComponents.length; ++i) {\n        let n = idComponents[i] | 0;\n        if (n < max) {\n            carry = false;\n            n = n + 1;\n        }\n        else {\n            n = 0;\n            if (i + 1 === idComponents.length) {\n                idComponents.push(0);\n            }\n        }\n        idComponents[i] = n;\n    }\n    return idComponents;\n}\n","import imageIdToURI from './imageIdToURI';\nconst state = {};\nconst metadataProvider = {\n    add: (imageId, payload) => {\n        const imageURI = imageIdToURI(imageId);\n        state[imageURI] = payload;\n    },\n    get: (type, imageId) => {\n        if (type === 'calibratedPixelSpacing') {\n            const imageURI = imageIdToURI(imageId);\n            return state[imageURI];\n        }\n    },\n};\nexport default metadataProvider;\n","export default function isOpposite(v1, v2, tolerance = 1e-5) {\n    return (Math.abs(v1[0] + v2[0]) < tolerance &&\n        Math.abs(v1[1] + v2[1]) < tolerance &&\n        Math.abs(v1[2] + v2[2]) < tolerance);\n}\n","export default function indexWithinDimensions(index, dimensions) {\n    if (index[0] < 0 ||\n        index[0] >= dimensions[0] ||\n        index[1] < 0 ||\n        index[1] >= dimensions[1] ||\n        index[2] < 0 ||\n        index[2] >= dimensions[2]) {\n        return false;\n    }\n    return true;\n}\n","import { getRenderingEngines, getRenderingEngine, } from '../RenderingEngine/getRenderingEngine';\nfunction getVolumeViewportsContainingSameVolumes(targetViewport, renderingEngineId) {\n    let renderingEngines;\n    if (renderingEngineId) {\n        renderingEngines = [getRenderingEngine(renderingEngineId)];\n    }\n    else {\n        renderingEngines = getRenderingEngines();\n    }\n    const sameVolumesViewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const targetActors = targetViewport.getActors();\n        const viewports = renderingEngine.getVolumeViewports();\n        for (const vp of viewports) {\n            const vpActors = vp.getActors();\n            if (vpActors.length !== targetActors.length) {\n                continue;\n            }\n            const sameVolumes = targetActors.every(({ uid }) => vpActors.find((vpActor) => uid === vpActor.uid));\n            if (sameVolumes) {\n                sameVolumesViewports.push(vp);\n            }\n        }\n    });\n    return sameVolumesViewports;\n}\nexport default getVolumeViewportsContainingSameVolumes;\n","const isPTPrescaledWithSUV = (image) => {\n    return image.preScale.scaled && image.preScale.scalingParameters.suvbw;\n};\nexport default isPTPrescaledWithSUV;\n","import { vec3 } from 'gl-matrix';\nimport getOrCreateCanvas, { EPSILON, } from '../RenderingEngine/helpers/getOrCreateCanvas';\nimport { ViewportType, Events } from '../enums';\nimport { getRenderingEngine } from '../RenderingEngine/getRenderingEngine';\nimport RenderingEngine from '../RenderingEngine';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nexport default function renderToCanvasGPU(canvas, imageOrVolume, modality = undefined, renderingEngineId = '_thumbnails', viewportOptions = {\n    displayArea: { imageArea: [1, 1] },\n}) {\n    if (!canvas || !(canvas instanceof HTMLCanvasElement)) {\n        throw new Error('canvas element is required');\n    }\n    const isVolume = !imageOrVolume.imageId;\n    const image = !isVolume && imageOrVolume;\n    const volume = isVolume && imageOrVolume;\n    const imageIdToPrint = image.imageId || volume.volumeId;\n    const viewportId = `renderGPUViewport-${imageIdToPrint}`;\n    const element = document.createElement('div');\n    const devicePixelRatio = window.devicePixelRatio || 1;\n    if (!viewportOptions.displayArea) {\n        viewportOptions.displayArea = { imageArea: [1, 1] };\n    }\n    const originalWidth = canvas.width;\n    const originalHeight = canvas.height;\n    element.style.width = `${originalWidth / devicePixelRatio + EPSILON}px`;\n    element.style.height = `${originalHeight / devicePixelRatio + EPSILON}px`;\n    element.style.visibility = 'hidden';\n    element.style.position = 'absolute';\n    document.body.appendChild(element);\n    const uniqueId = viewportId.split(':').join('-');\n    element.setAttribute('viewport-id-for-remove', uniqueId);\n    const temporaryCanvas = getOrCreateCanvas(element);\n    const renderingEngine = getRenderingEngine(renderingEngineId) ||\n        new RenderingEngine(renderingEngineId);\n    let viewport = renderingEngine.getViewport(viewportId);\n    if (!viewport) {\n        const viewportInput = {\n            viewportId,\n            type: isVolume ? ViewportType.ORTHOGRAPHIC : ViewportType.STACK,\n            element,\n            defaultOptions: {\n                ...viewportOptions,\n                suppressEvents: true,\n            },\n        };\n        renderingEngine.enableElement(viewportInput);\n        viewport = renderingEngine.getViewport(viewportId);\n    }\n    return new Promise((resolve) => {\n        let elementRendered = false;\n        let { viewReference } = viewportOptions;\n        const onImageRendered = (eventDetail) => {\n            if (elementRendered) {\n                return;\n            }\n            if (viewReference) {\n                const useViewRef = viewReference;\n                viewReference = null;\n                viewport.setViewReference(useViewRef);\n                viewport.render();\n                return;\n            }\n            const context = canvas.getContext('2d');\n            context.drawImage(temporaryCanvas, 0, 0, temporaryCanvas.width, temporaryCanvas.height, 0, 0, canvas.width, canvas.height);\n            const origin = viewport.canvasToWorld([0, 0]);\n            const topRight = viewport.canvasToWorld([\n                temporaryCanvas.width / devicePixelRatio,\n                0,\n            ]);\n            const bottomLeft = viewport.canvasToWorld([\n                0,\n                temporaryCanvas.height / devicePixelRatio,\n            ]);\n            const rightVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([1 / devicePixelRatio, 0]), origin);\n            const downVector = vec3.sub([0, 0, 0], viewport.canvasToWorld([0, 1 / devicePixelRatio]), origin);\n            const thicknessMm = 1;\n            elementRendered = true;\n            element.removeEventListener(Events.IMAGE_RENDERED, onImageRendered);\n            setTimeout(() => {\n                renderingEngine.disableElement(viewportId);\n                const elements = document.querySelectorAll(`[viewport-id-for-remove=\"${uniqueId}\"]`);\n                elements.forEach((element) => {\n                    element.remove();\n                });\n            }, 0);\n            resolve({\n                origin,\n                bottomLeft,\n                topRight,\n                thicknessMm,\n                rightVector,\n                downVector,\n            });\n        };\n        element.addEventListener(Events.IMAGE_RENDERED, onImageRendered);\n        if (isVolume) {\n            viewport.setVolumes([volume], false, true);\n        }\n        else {\n            viewport.renderImageObject(imageOrVolume);\n        }\n        viewport.resetCamera();\n        if (modality === 'PT' && !isPTPrescaledWithSUV(image)) {\n            viewport.setProperties({\n                voiRange: {\n                    lower: image.minPixelValue,\n                    upper: image.maxPixelValue,\n                },\n            });\n        }\n        viewport.render();\n    });\n}\n","import getDefaultViewport from '../RenderingEngine/helpers/cpuFallback/rendering/getDefaultViewport';\nimport calculateTransform from '../RenderingEngine/helpers/cpuFallback/rendering/calculateTransform';\nimport drawImageSync from '../RenderingEngine/helpers/cpuFallback/drawImageSync';\nexport default function renderToCanvasCPU(canvas, imageOrVolume, modality, _renderingEngineId, _viewportOptions) {\n    const volume = imageOrVolume;\n    if (volume.volumeId) {\n        throw new Error('Unsupported volume rendering for CPU');\n    }\n    const image = imageOrVolume;\n    const viewport = getDefaultViewport(canvas, image, modality);\n    const enabledElement = {\n        canvas,\n        viewport,\n        image,\n        renderingTools: {},\n    };\n    enabledElement.transform = calculateTransform(enabledElement);\n    const invalidated = true;\n    return new Promise((resolve, reject) => {\n        drawImageSync(enabledElement, invalidated);\n        resolve(null);\n    });\n}\n","import { loadAndCacheImage } from '../loaders/imageLoader';\nimport * as metaData from '../metaData';\nimport { RequestType } from '../enums';\nimport imageLoadPoolManager from '../requestPool/imageLoadPoolManager';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport cache from '../cache/cache';\nexport default function loadImageToCanvas(options) {\n    const { canvas, imageId, viewReference, requestType = RequestType.Thumbnail, priority = -5, renderingEngineId = '_thumbnails', useCPURendering = false, thumbnail = false, imageAspect = false, viewportOptions: baseViewportOptions, } = options;\n    const volumeId = viewReference?.volumeId;\n    const isVolume = volumeId && !imageId;\n    const viewportOptions = viewReference && baseViewportOptions\n        ? { ...baseViewportOptions, viewReference }\n        : baseViewportOptions;\n    const renderFn = useCPURendering ? renderToCanvasCPU : renderToCanvasGPU;\n    return new Promise((resolve, reject) => {\n        function successCallback(imageOrVolume, imageId) {\n            const { modality } = metaData.get('generalSeriesModule', imageId) || {};\n            const image = !isVolume && imageOrVolume;\n            const volume = isVolume && imageOrVolume;\n            if (image) {\n                image.isPreScaled = image.isPreScaled || image.preScale?.scaled;\n            }\n            if (thumbnail) {\n                canvas.height = 256;\n                canvas.width = 256;\n            }\n            if (imageAspect && image) {\n                canvas.width = image && (canvas.height * image.width) / image.height;\n            }\n            canvas.style.width = `${canvas.width / devicePixelRatio}px`;\n            canvas.style.height = `${canvas.height / devicePixelRatio}px`;\n            if (volume && useCPURendering) {\n                reject(new Error('CPU rendering of volume not supported'));\n            }\n            renderFn(canvas, imageOrVolume, modality, renderingEngineId, viewportOptions).then(resolve);\n        }\n        function errorCallback(error, imageId) {\n            console.error(error, imageId);\n            reject(error);\n        }\n        function sendRequest(imageId, imageIdIndex, options) {\n            return loadAndCacheImage(imageId, options).then((image) => {\n                successCallback.call(this, image, imageId);\n            }, (error) => {\n                errorCallback.call(this, error, imageId);\n            });\n        }\n        const options = {\n            useRGBA: !!useCPURendering,\n            requestType,\n        };\n        if (volumeId) {\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                reject(new Error(`Volume id ${volumeId} not found in cache`));\n            }\n            const useImageId = volume.imageIds[0];\n            successCallback(volume, useImageId);\n        }\n        else {\n            imageLoadPoolManager.addRequest(sendRequest.bind(null, imageId, null, options), requestType, { imageId }, priority);\n        }\n    });\n}\n","import eventTarget from '../../eventTarget';\nconst Events = {\n    HISTORY_UNDO: 'CORNERSTONE_TOOLS_HISTORY_UNDO',\n    HISTORY_REDO: 'CORNERSTONE_TOOLS_HISTORY_REDO',\n};\nexport class HistoryMemo {\n    constructor(label = 'Tools', size = 50) {\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n        this.ring = new Array();\n        this.label = label;\n        this._size = size;\n    }\n    get size() {\n        return this._size;\n    }\n    set size(newSize) {\n        this.ring = new Array(newSize);\n        this._size = newSize;\n        this.position = -1;\n        this.redoAvailable = 0;\n        this.undoAvailable = 0;\n    }\n    undo(items = 1) {\n        while (items > 0 && this.undoAvailable > 0) {\n            const item = this.ring[this.position];\n            item.restoreMemo(true);\n            if (item.id) {\n                eventTarget.dispatchEvent(new CustomEvent(Events.HISTORY_UNDO, {\n                    detail: {\n                        isUndo: true,\n                        id: item.id,\n                        operationType: item.operationType || 'annotation',\n                        memo: item,\n                    },\n                }));\n            }\n            items--;\n            this.redoAvailable++;\n            this.undoAvailable--;\n            this.position = (this.position - 1 + this.size) % this.size;\n        }\n    }\n    undoIf(condition) {\n        if (this.undoAvailable > 0 && condition(this.ring[this.position])) {\n            this.undo();\n            return true;\n        }\n        return false;\n    }\n    redo(items = 1) {\n        while (items > 0 && this.redoAvailable > 0) {\n            const newPosition = (this.position + 1) % this.size;\n            const item = this.ring[newPosition];\n            item.restoreMemo(false);\n            if (item.id) {\n                eventTarget.dispatchEvent(new CustomEvent(Events.HISTORY_REDO, {\n                    detail: {\n                        isUndo: false,\n                        id: item.id,\n                        operationType: item.operationType || 'annotation',\n                        memo: item,\n                    },\n                }));\n            }\n            items--;\n            this.position = newPosition;\n            this.undoAvailable++;\n            this.redoAvailable--;\n        }\n    }\n    push(item) {\n        if (!item) {\n            return;\n        }\n        const memo = item.restoreMemo\n            ? item\n            : item.createMemo?.();\n        if (!memo) {\n            return;\n        }\n        this.redoAvailable = 0;\n        if (this.undoAvailable < this._size) {\n            this.undoAvailable++;\n        }\n        this.position = (this.position + 1) % this._size;\n        this.ring[this.position] = memo;\n        return memo;\n    }\n}\nconst DefaultHistoryMemo = new HistoryMemo();\nexport { DefaultHistoryMemo };\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nfunction worldToImageCoords(imageId, worldCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const newOrigin = vec3.create();\n    vec3.scaleAndAdd(newOrigin, origin, columnCosines, -columnPixelSpacing / 2);\n    vec3.scaleAndAdd(newOrigin, newOrigin, rowCosines, -rowPixelSpacing / 2);\n    const sub = vec3.create();\n    vec3.sub(sub, worldCoords, newOrigin);\n    const rowDistance = vec3.dot(sub, rowCosines);\n    const columnDistance = vec3.dot(sub, columnCosines);\n    const imageCoords = [\n        rowDistance / rowPixelSpacing,\n        columnDistance / columnPixelSpacing,\n    ];\n    return imageCoords;\n}\nexport default worldToImageCoords;\n","import { vec3 } from 'gl-matrix';\nimport { get } from '../metaData';\nexport default function imageToWorldCoords(imageId, imageCoords) {\n    const imagePlaneModule = get('imagePlaneModule', imageId);\n    if (!imagePlaneModule) {\n        throw new Error(`No imagePlaneModule found for imageId: ${imageId}`);\n    }\n    const { columnCosines, rowCosines, imagePositionPatient: origin, } = imagePlaneModule;\n    let { columnPixelSpacing, rowPixelSpacing } = imagePlaneModule;\n    columnPixelSpacing ||= 1;\n    rowPixelSpacing ||= 1;\n    const imageCoordsInWorld = vec3.create();\n    vec3.scaleAndAdd(imageCoordsInWorld, origin, rowCosines, rowPixelSpacing * (imageCoords[0] - 0.5));\n    vec3.scaleAndAdd(imageCoordsInWorld, imageCoordsInWorld, columnCosines, columnPixelSpacing * (imageCoords[1] - 0.5));\n    return Array.from(imageCoordsInWorld);\n}\n","import { getRenderingEngines } from '../RenderingEngine/getRenderingEngine';\nexport default function getViewportsWithImageURI(imageURI) {\n    const renderingEngines = getRenderingEngines();\n    const viewports = [];\n    renderingEngines.forEach((renderingEngine) => {\n        const viewportsForRenderingEngine = renderingEngine.getViewports();\n        viewportsForRenderingEngine.forEach((viewport) => {\n            if (viewport.hasImageURI(imageURI)) {\n                viewports.push(viewport);\n            }\n        });\n    });\n    return viewports;\n}\n","import { vec3 } from 'gl-matrix';\nimport * as planar from './planar';\nimport * as metaData from '../metaData';\nexport default function getClosestStackImageIndexForPoint(point, viewport) {\n    const minimalDistance = calculateMinimalDistanceForStackViewport(point, viewport);\n    return minimalDistance ? minimalDistance.index : null;\n}\nexport function calculateMinimalDistanceForStackViewport(point, viewport) {\n    const imageIds = viewport.getImageIds();\n    const currentImageIdIndex = viewport.getCurrentImageIdIndex();\n    if (imageIds.length === 0) {\n        return null;\n    }\n    const getDistance = (imageId) => {\n        const planeMetadata = getPlaneMetadata(imageId);\n        if (!planeMetadata) {\n            return null;\n        }\n        const plane = planar.planeEquation(planeMetadata.planeNormal, planeMetadata.imagePositionPatient);\n        const distance = planar.planeDistanceToPoint(plane, point);\n        return distance;\n    };\n    const closestStack = {\n        distance: getDistance(imageIds[currentImageIdIndex]) ?? Infinity,\n        index: currentImageIdIndex,\n    };\n    const higherImageIds = imageIds.slice(currentImageIdIndex + 1);\n    for (let i = 0; i < higherImageIds.length; i++) {\n        const id = higherImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null) {\n            continue;\n        }\n        if (distance <= closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i + currentImageIdIndex + 1;\n        }\n        else {\n            break;\n        }\n    }\n    const lowerImageIds = imageIds.slice(0, currentImageIdIndex);\n    for (let i = lowerImageIds.length - 1; i >= 0; i--) {\n        const id = lowerImageIds[i];\n        const distance = getDistance(id);\n        if (distance === null || distance === closestStack.distance) {\n            continue;\n        }\n        if (distance < closestStack.distance) {\n            closestStack.distance = distance;\n            closestStack.index = i;\n        }\n        else {\n            break;\n        }\n    }\n    return closestStack.distance === Infinity ? null : closestStack;\n}\nfunction getPlaneMetadata(imageId) {\n    const targetImagePlane = metaData.get('imagePlaneModule', imageId);\n    if (!targetImagePlane ||\n        !(targetImagePlane.rowCosines instanceof Array &&\n            targetImagePlane.rowCosines.length === 3) ||\n        !(targetImagePlane.columnCosines instanceof Array &&\n            targetImagePlane.columnCosines.length === 3) ||\n        !(targetImagePlane.imagePositionPatient instanceof Array &&\n            targetImagePlane.imagePositionPatient.length === 3)) {\n        return null;\n    }\n    const { rowCosines, columnCosines, imagePositionPatient, } = targetImagePlane;\n    const rowVec = vec3.set(vec3.create(), ...rowCosines);\n    const colVec = vec3.set(vec3.create(), ...columnCosines);\n    const planeNormal = vec3.cross(vec3.create(), rowVec, colVec);\n    return { rowCosines, columnCosines, imagePositionPatient, planeNormal };\n}\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { transformCanvasToIJK } from './transformCanvasToIJK';\nfunction getCurrentVolumeViewportSlice(viewport) {\n    const { width: canvasWidth, height: canvasHeight } = viewport.getCanvas();\n    const { sliceToIndexMatrix, indexToSliceMatrix } = viewport.getSliceViewInfo();\n    const ijkOriginPoint = transformCanvasToIJK(viewport, [0, 0]);\n    const ijkRowPoint = transformCanvasToIJK(viewport, [canvasWidth - 1, 0]);\n    const ijkColPoint = transformCanvasToIJK(viewport, [0, canvasHeight - 1]);\n    const ijkRowVec = vec3.sub(vec3.create(), ijkRowPoint, ijkOriginPoint);\n    const ijkColVec = vec3.sub(vec3.create(), ijkColPoint, ijkOriginPoint);\n    const ijkSliceVec = vec3.cross(vec3.create(), ijkRowVec, ijkColVec);\n    vec3.normalize(ijkRowVec, ijkRowVec);\n    vec3.normalize(ijkColVec, ijkColVec);\n    vec3.normalize(ijkSliceVec, ijkSliceVec);\n    const maxIJKRowVec = Math.max(Math.abs(ijkRowVec[0]), Math.abs(ijkRowVec[1]), Math.abs(ijkRowVec[2]));\n    const maxIJKColVec = Math.max(Math.abs(ijkColVec[0]), Math.abs(ijkColVec[1]), Math.abs(ijkColVec[2]));\n    if (!glMatrix.equals(1, maxIJKRowVec) || !glMatrix.equals(1, maxIJKColVec)) {\n        throw new Error('Livewire is not available for rotate/oblique viewports');\n    }\n    const { voxelManager } = viewport.getImageData();\n    const sliceViewInfo = viewport.getSliceViewInfo();\n    const scalarData = voxelManager.getSliceData(sliceViewInfo);\n    return {\n        width: sliceViewInfo.width,\n        height: sliceViewInfo.height,\n        scalarData,\n        sliceToIndexMatrix,\n        indexToSliceMatrix,\n    };\n}\nexport { getCurrentVolumeViewportSlice as default, getCurrentVolumeViewportSlice, };\n","import { mat4 } from 'gl-matrix';\nimport { addProvider } from '../metaData';\nconst state = {};\nconst spatialRegistrationMetadataProvider = {\n    add: (query, payload) => {\n        const [viewportId1, viewportId2] = query;\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (!state[entryId]) {\n            state[entryId] = {};\n        }\n        state[entryId] = payload;\n    },\n    get: (type, viewportId1, viewportId2) => {\n        if (type !== 'spatialRegistrationModule') {\n            return;\n        }\n        const entryId = `${viewportId1}_${viewportId2}`;\n        if (state[entryId]) {\n            return state[entryId];\n        }\n        const entryIdReverse = `${viewportId2}_${viewportId1}`;\n        if (state[entryIdReverse]) {\n            return mat4.invert(mat4.create(), state[entryIdReverse]);\n        }\n    },\n};\naddProvider(spatialRegistrationMetadataProvider.get.bind(spatialRegistrationMetadataProvider));\nexport default spatialRegistrationMetadataProvider;\n","import { vec3, mat4 } from 'gl-matrix';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport { get } from '../metaData';\nconst ALLOWED_DELTA = 0.05;\nfunction calculateViewportsSpatialRegistration(viewport1, viewport2) {\n    const imageId1 = viewport1.getSliceIndex();\n    const imageId2 = viewport2.getSliceIndex();\n    const imagePlaneModule1 = get('imagePlaneModule', imageId1.toString());\n    const imagePlaneModule2 = get('imagePlaneModule', imageId2.toString());\n    if (!imagePlaneModule1 || !imagePlaneModule2) {\n        console.log('Viewport spatial registration requires image plane module');\n        return;\n    }\n    const { imageOrientationPatient: iop2 } = imagePlaneModule2;\n    const isSameImagePlane = imagePlaneModule1.imageOrientationPatient.every((v, i) => Math.abs(v - iop2[i]) < ALLOWED_DELTA);\n    if (!isSameImagePlane) {\n        console.log('Viewport spatial registration only supported for same orientation (hence translation only) for now', imagePlaneModule1?.imageOrientationPatient, imagePlaneModule2?.imageOrientationPatient);\n        return;\n    }\n    const imagePositionPatient1 = imagePlaneModule1.imagePositionPatient;\n    const imagePositionPatient2 = imagePlaneModule2.imagePositionPatient;\n    const translation = vec3.subtract(vec3.create(), imagePositionPatient1, imagePositionPatient2);\n    const mat = mat4.fromTranslation(mat4.create(), translation);\n    spatialRegistrationMetadataProvider.add([viewport1.id, viewport2.id], mat);\n}\nexport default calculateViewportsSpatialRegistration;\n","export default function getViewportImageCornersInWorld(viewport) {\n    const { imageData, dimensions } = viewport.getImageData() || {};\n    if (!imageData || !dimensions) {\n        return [];\n    }\n    const { canvas } = viewport;\n    const ratio = window.devicePixelRatio;\n    const topLeftCanvas = [0, 0];\n    const topRightCanvas = [canvas.width / ratio, 0];\n    const bottomRightCanvas = [\n        canvas.width / ratio,\n        canvas.height / ratio,\n    ];\n    const bottomLeftCanvas = [0, canvas.height / ratio];\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const topRightWorld = viewport.canvasToWorld(topRightCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const bottomLeftWorld = viewport.canvasToWorld(bottomLeftCanvas);\n    const topLeftImage = imageData.worldToIndex(topLeftWorld);\n    const topRightImage = imageData.worldToIndex(topRightWorld);\n    const bottomRightImage = imageData.worldToIndex(bottomRightWorld);\n    const bottomLeftImage = imageData.worldToIndex(bottomLeftWorld);\n    return _getStackViewportImageCorners({\n        dimensions,\n        imageData,\n        topLeftImage,\n        topRightImage,\n        bottomRightImage,\n        bottomLeftImage,\n        topLeftWorld,\n        topRightWorld,\n        bottomRightWorld,\n        bottomLeftWorld,\n    });\n}\nfunction _getStackViewportImageCorners({ dimensions, imageData, topLeftImage, topRightImage, bottomRightImage, bottomLeftImage, topLeftWorld, topRightWorld, bottomRightWorld, bottomLeftWorld, }) {\n    const topLeftImageWorld = _isInBounds(topLeftImage, dimensions)\n        ? topLeftWorld\n        : imageData.indexToWorld([0, 0, 0]);\n    const topRightImageWorld = _isInBounds(topRightImage, dimensions)\n        ? topRightWorld\n        : imageData.indexToWorld([dimensions[0] - 1, 0, 0]);\n    const bottomRightImageWorld = _isInBounds(bottomRightImage, dimensions)\n        ? bottomRightWorld\n        : imageData.indexToWorld([\n            dimensions[0] - 1,\n            dimensions[1] - 1,\n            0,\n        ]);\n    const bottomLeftImageWorld = _isInBounds(bottomLeftImage, dimensions)\n        ? bottomLeftWorld\n        : imageData.indexToWorld([0, dimensions[1] - 1, 0]);\n    return [\n        topLeftImageWorld,\n        topRightImageWorld,\n        bottomLeftImageWorld,\n        bottomRightImageWorld,\n    ];\n}\nfunction _isInBounds(imageCoord, dimensions) {\n    return (imageCoord[0] > 0 ||\n        imageCoord[0] < dimensions[0] - 1 ||\n        imageCoord[1] > 0 ||\n        imageCoord[1] < dimensions[1] - 1 ||\n        imageCoord[2] > 0 ||\n        imageCoord[2] < dimensions[2] - 1);\n}\n","import StackViewport from '../RenderingEngine/StackViewport';\nimport getEnabledElement from '../getEnabledElement';\nfunction getImageLegacy(element) {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (!(viewport instanceof StackViewport)) {\n        throw new Error(`An image can only be fetched for a stack viewport and not for a viewport of type: ${viewport.type}`);\n    }\n    return viewport.getCornerstoneImage();\n}\nexport default getImageLegacy;\n","import * as metaData from '../metaData';\nimport isEqual from './isEqual';\nfunction isValidVolume(imageIds) {\n    if (imageIds.length <= 1) {\n        return false;\n    }\n    const imageId0 = imageIds[0];\n    const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, usingDefaultValues, } = metaData.get('imagePlaneModule', imageId0);\n    if (usingDefaultValues) {\n        return false;\n    }\n    const baseMetadata = {\n        modality,\n        imageOrientationPatient,\n        pixelSpacing,\n        frameOfReferenceUID,\n        columns,\n        rows,\n        seriesInstanceUID,\n    };\n    let validVolume = true;\n    for (let i = 0; i < imageIds.length; i++) {\n        const imageId = imageIds[i];\n        const { modality, seriesInstanceUID } = metaData.get('generalSeriesModule', imageId);\n        const { imageOrientationPatient, pixelSpacing, columns, rows } = metaData.get('imagePlaneModule', imageId);\n        if (seriesInstanceUID !== baseMetadata.seriesInstanceUID) {\n            validVolume = false;\n            break;\n        }\n        if (modality !== baseMetadata.modality) {\n            validVolume = false;\n            break;\n        }\n        if (columns !== baseMetadata.columns) {\n            validVolume = false;\n            break;\n        }\n        if (rows !== baseMetadata.rows) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(imageOrientationPatient, baseMetadata.imageOrientationPatient)) {\n            validVolume = false;\n            break;\n        }\n        if (!isEqual(pixelSpacing, baseMetadata.pixelSpacing)) {\n            validVolume = false;\n            break;\n        }\n    }\n    return validVolume;\n}\nexport { isValidVolume };\n","export const videoUIDs = new Set([\n    '1.2.840.10008.1.2.4.100',\n    '1.2.840.10008.1.2.4.100.1',\n    '1.2.840.10008.1.2.4.101',\n    '1.2.840.10008.1.2.4.101.1',\n    '1.2.840.10008.1.2.4.102',\n    '1.2.840.10008.1.2.4.102.1',\n    '1.2.840.10008.1.2.4.103',\n    '1.2.840.10008.1.2.4.103.1',\n    '1.2.840.10008.1.2.4.104',\n    '1.2.840.10008.1.2.4.104.1',\n    '1.2.840.10008.1.2.4.105',\n    '1.2.840.10008.1.2.4.105.1',\n    '1.2.840.10008.1.2.4.106',\n    '1.2.840.10008.1.2.4.106.1',\n    '1.2.840.10008.1.2.4.107',\n    '1.2.840.10008.1.2.4.108',\n]);\nexport default function isVideoTransferSyntax(uidOrUids) {\n    if (!uidOrUids) {\n        return false;\n    }\n    const uids = Array.isArray(uidOrUids) ? uidOrUids : [uidOrUids];\n    return uids.find((uid) => videoUIDs.has(uid));\n}\n","import { setVolumesForViewports } from '../RenderingEngine/helpers';\nimport { createAndCacheVolume, getUnknownVolumeLoaderSchema, } from '../loaders/volumeLoader';\nimport { Events, ViewportType } from '../enums';\nimport uuidv4 from './uuidv4';\nasync function convertStackToVolumeViewport({ viewport, options = {}, }) {\n    const renderingEngine = viewport.getRenderingEngine();\n    let volumeId = options.volumeId || `${uuidv4()}`;\n    if (volumeId.split(':').length === 0) {\n        const schema = getUnknownVolumeLoaderSchema();\n        volumeId = `${schema}:${volumeId}`;\n    }\n    const { id, element } = viewport;\n    const viewportId = options.viewportId || id;\n    const imageIds = viewport.getImageIds();\n    const prevViewPresentation = viewport.getViewPresentation();\n    const prevViewReference = viewport.getViewReference();\n    renderingEngine.enableElement({\n        viewportId,\n        type: ViewportType.ORTHOGRAPHIC,\n        element,\n        defaultOptions: {\n            background: options.background,\n            orientation: options.orientation,\n        },\n    });\n    const volume = (await createAndCacheVolume(volumeId, {\n        imageIds,\n    }));\n    volume.load();\n    const volumeViewport = renderingEngine.getViewport(viewportId);\n    await setVolumesForViewports(renderingEngine, [\n        {\n            volumeId,\n        },\n    ], [viewportId]);\n    const volumeViewportNewVolumeHandler = () => {\n        volumeViewport.render();\n        element.removeEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    const addVolumeViewportNewVolumeListener = () => {\n        element.addEventListener(Events.VOLUME_VIEWPORT_NEW_VOLUME, volumeViewportNewVolumeHandler);\n    };\n    addVolumeViewportNewVolumeListener();\n    volumeViewport.setViewPresentation(prevViewPresentation);\n    volumeViewport.setViewReference(prevViewReference);\n    volumeViewport.render();\n    return volumeViewport;\n}\nexport { convertStackToVolumeViewport };\n","import cache from '../cache/cache';\nimport { ImageVolume } from '../cache/classes/ImageVolume';\nimport { ViewportType } from '../enums';\nasync function convertVolumeToStackViewport({ viewport, options, }) {\n    const volumeViewport = viewport;\n    const { id, element } = volumeViewport;\n    const renderingEngine = viewport.getRenderingEngine();\n    const { background } = options;\n    const viewportId = options.viewportId || id;\n    const volume = cache.getVolume(volumeViewport.getVolumeId());\n    if (!(volume instanceof ImageVolume)) {\n        throw new Error('Currently, you cannot decache a volume that is not an ImageVolume. So, unfortunately, volumes such as nifti  (which are basic Volume, without imageIds) cannot be decached.');\n    }\n    const viewportInput = {\n        viewportId,\n        type: ViewportType.STACK,\n        element,\n        defaultOptions: {\n            background,\n        },\n    };\n    const prevView = volumeViewport.getViewReference();\n    renderingEngine.enableElement(viewportInput);\n    const stackViewport = renderingEngine.getViewport(viewportId);\n    await stackViewport.setStack(volume.imageIds);\n    stackViewport.setViewReference(prevView);\n    stackViewport.render();\n    return stackViewport;\n}\nexport { convertVolumeToStackViewport };\n","import { EPSILON } from '../constants';\nfunction roundNumber(value, precision = 2) {\n    if (Array.isArray(value)) {\n        return value.map((v) => roundNumber(v, precision)).join(', ');\n    }\n    if (value === undefined || value === null || value === '') {\n        return 'NaN';\n    }\n    value = Number(value);\n    const absValue = Math.abs(value);\n    if (absValue < 0.0001) {\n        return `${value}`;\n    }\n    const fixedPrecision = absValue >= 100\n        ? precision - 2\n        : absValue >= 10\n            ? precision - 1\n            : absValue >= 1\n                ? precision\n                : absValue >= 0.1\n                    ? precision + 1\n                    : absValue >= 0.01\n                        ? precision + 2\n                        : absValue >= 0.001\n                            ? precision + 3\n                            : precision + 4;\n    return value.toFixed(fixedPrecision);\n}\nfunction roundToPrecision(value) {\n    return Math.round(value / EPSILON) * EPSILON;\n}\nexport { roundToPrecision };\nexport default roundNumber;\n","export default function convertToGrayscale(scalarData, width, height) {\n    const isRGBA = scalarData.length === width * height * 4;\n    const isRGB = scalarData.length === width * height * 3;\n    if (isRGBA || isRGB) {\n        const newScalarData = new Float32Array(width * height);\n        let offset = 0;\n        let destOffset = 0;\n        const increment = isRGBA ? 4 : 3;\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const r = scalarData[offset];\n                const g = scalarData[offset + 1];\n                const b = scalarData[offset + 2];\n                newScalarData[destOffset] = (r + g + b) / 3;\n                offset += increment;\n                destOffset++;\n            }\n        }\n        return newScalarData;\n    }\n    else {\n        return scalarData;\n    }\n}\n","import { VolumeViewport } from '../RenderingEngine';\nimport cache from '../cache/cache';\nfunction getViewportImageIds(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        const volume = cache.getVolume(viewport.getVolumeId());\n        return volume.imageIds;\n    }\n    else if (viewport.getImageIds) {\n        return viewport.getImageIds();\n    }\n}\nexport default getViewportImageIds;\n","export function getRandomSampleFromArray(array, size) {\n    const clonedArray = [...array];\n    if (size >= clonedArray.length) {\n        shuffleArray(clonedArray);\n        return clonedArray;\n    }\n    shuffleArray(clonedArray);\n    return clonedArray.slice(0, size);\n}\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n","function componentToHex(c) {\n    const hex = c.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n}\nfunction rgbToHex(r, g, b) {\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\nfunction hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16),\n        }\n        : null;\n}\nexport { hexToRgb, rgbToHex };\n","export function deepEqual(obj1, obj2) {\n    if (obj1 === obj2) {\n        return true;\n    }\n    if (obj1 == null || obj2 == null) {\n        return false;\n    }\n    try {\n        return JSON.stringify(obj1) === JSON.stringify(obj2);\n    }\n    catch (error) {\n        console.debug('Error in JSON.stringify during deep comparison:', error);\n        return obj1 === obj2;\n    }\n}\n","import * as metaData from '../metaData';\nconst groupBy = (array, key) => {\n    return array.reduce((rv, x) => {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n    }, {});\n};\nfunction getIPPGroups(imageIds) {\n    const ippMetadata = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId) || {};\n        return { imageId, imagePositionPatient };\n    });\n    if (!ippMetadata.every((item) => item.imagePositionPatient)) {\n        return null;\n    }\n    const positionGroups = groupBy(ippMetadata, 'imagePositionPatient');\n    const positions = Object.keys(positionGroups);\n    const frame_count = positionGroups[positions[0]].length;\n    if (frame_count === 1) {\n        return null;\n    }\n    const frame_count_equal = positions.every((k) => positionGroups[k].length === frame_count);\n    if (!frame_count_equal) {\n        return null;\n    }\n    return positionGroups;\n}\nfunction test4DTag(IPPGroups, value_getter) {\n    const frame_groups = {};\n    let first_frame_value_set = [];\n    const positions = Object.keys(IPPGroups);\n    for (let i = 0; i < positions.length; i++) {\n        const frame_value_set = new Set();\n        const frames = IPPGroups[positions[i]];\n        for (let j = 0; j < frames.length; j++) {\n            const frame_value = value_getter(frames[j].imageId) || 0;\n            frame_groups[frame_value] = frame_groups[frame_value] || [];\n            frame_groups[frame_value].push({ imageId: frames[j].imageId });\n            frame_value_set.add(frame_value);\n            if (frame_value_set.size - 1 < j) {\n                return undefined;\n            }\n        }\n        if (i == 0) {\n            first_frame_value_set = Array.from(frame_value_set);\n        }\n        else if (!setEquals(first_frame_value_set, frame_value_set)) {\n            return undefined;\n        }\n    }\n    return frame_groups;\n}\nfunction getTagValue(imageId, tag) {\n    const value = metaData.get(tag, imageId);\n    try {\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getPhilipsPrivateBValue(imageId) {\n    const value = metaData.get('20011003', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            const value_bytes = atob(InlineBinary);\n            const ary_buf = new ArrayBuffer(value_bytes.length);\n            const dv = new DataView(ary_buf);\n            for (let i = 0; i < value_bytes.length; i++) {\n                dv.setUint8(i, value_bytes.charCodeAt(i));\n            }\n            return new Float32Array(ary_buf)[0];\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getSiemensPrivateBValue(imageId) {\n    let value = metaData.get('0019100c', imageId) || metaData.get('0019100C', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary);\n        }\n        return parseFloat(value);\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction getGEPrivateBValue(imageId) {\n    let value = metaData.get('00431039', imageId);\n    try {\n        const { InlineBinary } = value;\n        if (InlineBinary) {\n            value = atob(InlineBinary).split('//');\n        }\n        return parseFloat(value[0]) % 100000;\n    }\n    catch {\n        return undefined;\n    }\n}\nfunction setEquals(set_a, set_b) {\n    if (set_a.length != set_b.size) {\n        return false;\n    }\n    for (let i = 0; i < set_a.length; i++) {\n        if (!set_b.has(set_a[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getPetFrameReferenceTime(imageId) {\n    const moduleInfo = metaData.get('petImageModule', imageId);\n    return moduleInfo ? moduleInfo['frameReferenceTime'] : 0;\n}\nfunction splitImageIdsBy4DTags(imageIds) {\n    const positionGroups = getIPPGroups(imageIds);\n    if (!positionGroups) {\n        return { imageIdGroups: [imageIds], splittingTag: null };\n    }\n    const tags = [\n        'TemporalPositionIdentifier',\n        'DiffusionBValue',\n        'TriggerTime',\n        'EchoTime',\n        'EchoNumber',\n        'PhilipsPrivateBValue',\n        'SiemensPrivateBValue',\n        'GEPrivateBValue',\n        'PetFrameReferenceTime',\n    ];\n    const fncList2 = [\n        (imageId) => getTagValue(imageId, tags[0]),\n        (imageId) => getTagValue(imageId, tags[1]),\n        (imageId) => getTagValue(imageId, tags[2]),\n        (imageId) => getTagValue(imageId, tags[3]),\n        (imageId) => getTagValue(imageId, tags[4]),\n        getPhilipsPrivateBValue,\n        getSiemensPrivateBValue,\n        getGEPrivateBValue,\n        getPetFrameReferenceTime,\n    ];\n    for (let i = 0; i < fncList2.length; i++) {\n        const frame_groups = test4DTag(positionGroups, fncList2[i]);\n        if (frame_groups) {\n            const sortedKeys = Object.keys(frame_groups)\n                .map(Number.parseFloat)\n                .sort((a, b) => a - b);\n            const imageIdGroups = sortedKeys.map((key) => frame_groups[key].map((item) => item.imageId));\n            return { imageIdGroups, splittingTag: tags[i] };\n        }\n    }\n    return { imageIdGroups: [imageIds], splittingTag: null };\n}\nexport default splitImageIdsBy4DTags;\n","import splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nfunction getDynamicVolumeInfo(imageIds) {\n    const { imageIdGroups: timePoints, splittingTag } = splitImageIdsBy4DTags(imageIds);\n    const isDynamicVolume = timePoints.length > 1;\n    return { isDynamicVolume, timePoints, splittingTag };\n}\nexport default getDynamicVolumeInfo;\n","export default function scaleArray(array, scalingParameters) {\n    const arrayLength = array.length;\n    const { rescaleSlope, rescaleIntercept, suvbw } = scalingParameters;\n    if (scalingParameters.modality === 'PT' && typeof suvbw === 'number') {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = suvbw * (array[i] * rescaleSlope + rescaleIntercept);\n        }\n    }\n    else {\n        for (let i = 0; i < arrayLength; i++) {\n            array[i] = array[i] * rescaleSlope + rescaleIntercept;\n        }\n    }\n    return array;\n}\n","export function clip(val, low, high) {\n    return Math.min(Math.max(low, val), high);\n}\nexport function clipToBox(point, box) {\n    point.x = clip(point.x, 0, box.width);\n    point.y = clip(point.y, 0, box.height);\n}\nexport default clip;\n","import { Events } from '../enums';\nimport { StackViewport, VolumeViewport } from '../RenderingEngine';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getEnabledElement from '../getEnabledElement';\nimport triggerEvent from './triggerEvent';\nimport eventTarget from '../eventTarget';\nexport default function scroll(viewport, options) {\n    const enabledElement = getEnabledElement(viewport.element);\n    if (!enabledElement) {\n        throw new Error('Scroll::Viewport is not enabled (it might be disabled)');\n    }\n    if (viewport instanceof StackViewport &&\n        viewport.getImageIds().length === 0) {\n        throw new Error('Scroll::Stack Viewport has no images');\n    }\n    const { volumeId, delta, scrollSlabs } = options;\n    if (viewport instanceof VolumeViewport) {\n        scrollVolume(viewport, volumeId, delta, scrollSlabs);\n    }\n    else {\n        const imageIdIndex = viewport.getCurrentImageIdIndex();\n        if (imageIdIndex + delta >\n            viewport.getImageIds().length - 1 ||\n            imageIdIndex + delta < 0) {\n            const eventData = {\n                imageIdIndex,\n                direction: delta,\n            };\n            triggerEvent(eventTarget, Events.STACK_SCROLL_OUT_OF_BOUNDS, eventData);\n        }\n        viewport.scroll(delta, options.debounceLoading, options.loop);\n    }\n}\nexport function scrollVolume(viewport, volumeId, delta, scrollSlabs = false) {\n    const useSlabThickness = scrollSlabs;\n    const { numScrollSteps, currentStepIndex, sliceRangeInfo } = getVolumeViewportScrollInfo(viewport, volumeId, useSlabThickness);\n    if (!sliceRangeInfo) {\n        return;\n    }\n    const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n    const { focalPoint, viewPlaneNormal, position } = camera;\n    const { newFocalPoint, newPosition } = snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, delta);\n    viewport.setCamera({\n        focalPoint: newFocalPoint,\n        position: newPosition,\n    });\n    viewport.render();\n    const desiredStepIndex = currentStepIndex + delta;\n    const VolumeScrollEventDetail = {\n        volumeId,\n        viewport,\n        delta,\n        desiredStepIndex,\n        currentStepIndex,\n        numScrollSteps,\n        currentImageId: viewport.getCurrentImageId(),\n    };\n    if ((desiredStepIndex > numScrollSteps || desiredStepIndex < 0) &&\n        viewport.getCurrentImageId()) {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS, VolumeScrollEventDetail);\n    }\n    else {\n        triggerEvent(eventTarget, Events.VOLUME_VIEWPORT_SCROLL, VolumeScrollEventDetail);\n    }\n}\n","import clip from './clip';\nimport scroll from './scroll';\nimport getEnabledElement from '../getEnabledElement';\nimport StackViewport from '../RenderingEngine/StackViewport';\nasync function jumpToSlice(element, options = {}) {\n    const { imageIndex, debounceLoading, volumeId } = options;\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('Element has been disabled');\n    }\n    const { viewport } = enabledElement;\n    const { imageIndex: currentImageIndex, numberOfSlices } = _getImageSliceData(viewport, debounceLoading);\n    const imageIndexToJump = _getImageIndexToJump(numberOfSlices, imageIndex);\n    const delta = imageIndexToJump - currentImageIndex;\n    scroll(viewport, { delta, debounceLoading, volumeId });\n}\nfunction _getImageSliceData(viewport, debounceLoading) {\n    if (viewport instanceof StackViewport) {\n        return {\n            numberOfSlices: viewport.getImageIds().length,\n            imageIndex: debounceLoading\n                ? viewport.getTargetImageIdIndex()\n                : viewport.getCurrentImageIdIndex(),\n        };\n    }\n    return {\n        numberOfSlices: viewport.getNumberOfSlices(),\n        imageIndex: viewport.getSliceIndex(),\n    };\n}\nfunction _getImageIndexToJump(numberOfSlices, imageIndex) {\n    const lastSliceIndex = numberOfSlices - 1;\n    return clip(imageIndex, 0, lastSliceIndex);\n}\nexport { jumpToSlice };\n","import transformWorldToIndex from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport uuidv4 from './uuidv4';\nimport { createLocalVolume } from '../loaders/volumeLoader';\nimport cache from '../cache/cache';\nfunction createSubVolume(referencedVolumeId, boundsIJK, options = {}) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (!referencedVolume) {\n        throw new Error(`Referenced volume with id ${referencedVolumeId} does not exist.`);\n    }\n    const { metadata, spacing, direction, dimensions: refVolumeDim, } = referencedVolume;\n    const { minX, maxX, minY, maxY, minZ, maxZ } = boundsIJK;\n    const ijkTopLeft = [\n        Math.min(minX, maxX),\n        Math.min(minY, maxY),\n        Math.min(minZ, maxZ),\n    ];\n    const boundingBoxOriginWorld = transformIndexToWorld(referencedVolume.imageData, ijkTopLeft);\n    const dimensions = [\n        Math.abs(maxX - minX) + 1,\n        Math.abs(maxY - minY) + 1,\n        Math.abs(maxZ - minZ) + 1,\n    ];\n    const { targetBuffer } = options;\n    const subVolumeOptions = {\n        metadata,\n        dimensions,\n        spacing,\n        origin: boundingBoxOriginWorld,\n        direction,\n        targetBuffer,\n        scalarData: targetBuffer?.type === 'Float32Array'\n            ? new Float32Array(dimensions[0] * dimensions[1] * dimensions[2])\n            : undefined,\n    };\n    const subVolume = createLocalVolume(uuidv4(), subVolumeOptions);\n    const subVolumeData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const subVolumeSliceSize = dimensions[0] * dimensions[1];\n    const refVolumeSliceSize = refVolumeDim[0] * refVolumeDim[1];\n    const refVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    for (let z = 0; z < dimensions[2]; z++) {\n        for (let y = 0; y < dimensions[1]; y++) {\n            const rowStartWorld = transformIndexToWorld(subVolume.imageData, [\n                0,\n                y,\n                z,\n            ]);\n            const refVolumeRowStartIJK = transformWorldToIndex(referencedVolume.imageData, rowStartWorld);\n            const refVolumeRowStartOffset = refVolumeRowStartIJK[2] * refVolumeSliceSize +\n                refVolumeRowStartIJK[1] * refVolumeDim[0] +\n                refVolumeRowStartIJK[0];\n            const rowData = refVolumeData.slice(refVolumeRowStartOffset, refVolumeRowStartOffset + dimensions[0]);\n            const subVolumeLineStartOffset = z * subVolumeSliceSize + y * dimensions[0];\n            subVolumeData.set(rowData, subVolumeLineStartOffset);\n        }\n    }\n    subVolume.voxelManager.setCompleteScalarDataArray(subVolumeData);\n    return subVolume;\n}\nexport { createSubVolume as default, createSubVolume };\n","import { vec3 } from 'gl-matrix';\nimport { transformWorldToIndexContinuous } from './transformWorldToIndex';\nfunction getVolumeDirectionVectors(imageData, camera) {\n    const { viewUp, viewPlaneNormal } = camera;\n    const ijkOrigin = transformWorldToIndexContinuous(imageData, [0, 0, 0]);\n    const worldVecColDir = vec3.negate(vec3.create(), viewUp);\n    const worldVecSliceDir = vec3.negate(vec3.create(), viewPlaneNormal);\n    const worldVecRowDir = vec3.cross(vec3.create(), worldVecColDir, worldVecSliceDir);\n    const ijkVecColDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecColDir), ijkOrigin);\n    const ijkVecSliceDir = vec3.sub(vec3.create(), transformWorldToIndexContinuous(imageData, worldVecSliceDir), ijkOrigin);\n    vec3.normalize(ijkVecColDir, ijkVecColDir);\n    vec3.normalize(ijkVecSliceDir, ijkVecSliceDir);\n    const ijkVecRowDir = vec3.cross(vec3.create(), ijkVecColDir, ijkVecSliceDir);\n    return {\n        worldVecRowDir,\n        worldVecColDir,\n        worldVecSliceDir,\n        ijkVecRowDir,\n        ijkVecColDir,\n        ijkVecSliceDir,\n    };\n}\nexport { getVolumeDirectionVectors as default, getVolumeDirectionVectors };\n","export function calculateNeighborhoodStats(scalarData, dimensions, centerIjk, radius) {\n    const [width, height, numSlices] = dimensions;\n    const numPixelsPerSlice = width * height;\n    let sum = 0;\n    let sumSq = 0;\n    let count = 0;\n    const [cx, cy, cz] = centerIjk.map(Math.round);\n    for (let z = cz - radius; z <= cz + radius; z++) {\n        if (z < 0 || z >= numSlices) {\n            continue;\n        }\n        for (let y = cy - radius; y <= cy + radius; y++) {\n            if (y < 0 || y >= height) {\n                continue;\n            }\n            for (let x = cx - radius; x <= cx + radius; x++) {\n                if (x < 0 || x >= width) {\n                    continue;\n                }\n                const index = z * numPixelsPerSlice + y * width + x;\n                const value = scalarData[index];\n                sum += value;\n                sumSq += value * value;\n                count++;\n            }\n        }\n    }\n    if (count === 0) {\n        const centerIndex = cz * numPixelsPerSlice + cy * width + cx;\n        if (centerIndex >= 0 && centerIndex < scalarData.length) {\n            const centerValue = scalarData[centerIndex];\n            return { mean: centerValue, stdDev: 0, count: 1 };\n        }\n        else {\n            return { mean: 0, stdDev: 0, count: 0 };\n        }\n    }\n    const mean = sum / count;\n    const variance = sumSq / count - mean * mean;\n    const stdDev = Math.sqrt(Math.max(0, variance));\n    return { mean, stdDev, count };\n}\n","import { isEqual } from './isEqual';\nimport { CalibrationTypes } from '../enums';\nconst projectionRadiographSOPClassUIDs = new Set([\n    '1.2.840.10008.5.1.4.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.1.1',\n    '1.2.840.10008.5.1.4.1.1.1.2',\n    '1.2.840.10008.5.1.4.1.1.1.2.1',\n    '1.2.840.10008.5.1.4.1.1.1.3',\n    '1.2.840.10008.5.1.4.1.1.1.3.1',\n    '1.2.840.10008.5.1.4.1.1.12.1',\n    '1.2.840.10008.5.1.4.1.1.12.1.1',\n    '1.2.840.10008.5.1.4.1.1.12.2',\n    '1.2.840.10008.5.1.4.1.1.12.2.1',\n    '1.2.840.10008.5.1.4.1.1.12.3',\n]);\nfunction calculateRadiographicPixelSpacing(instance) {\n    const { PixelSpacing, ImagerPixelSpacing, EstimatedRadiographicMagnificationFactor, PixelSpacingCalibrationType, PixelSpacingCalibrationDescription, } = instance;\n    const isProjection = true;\n    if (!ImagerPixelSpacing) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.UNKNOWN,\n            isProjection,\n        };\n    }\n    if (!PixelSpacing) {\n        if (!EstimatedRadiographicMagnificationFactor) {\n            console.warn('EstimatedRadiographicMagnificationFactor was not present. Unable to correct ImagerPixelSpacing.');\n            return {\n                PixelSpacing: ImagerPixelSpacing,\n                type: CalibrationTypes.PROJECTION,\n                isProjection,\n            };\n        }\n        const correctedPixelSpacing = ImagerPixelSpacing.map((pixelSpacing) => pixelSpacing / EstimatedRadiographicMagnificationFactor);\n        return {\n            PixelSpacing: correctedPixelSpacing,\n            type: CalibrationTypes.ERMF,\n            isProjection,\n        };\n    }\n    if (isEqual(PixelSpacing, ImagerPixelSpacing)) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.PROJECTION,\n            isProjection,\n        };\n    }\n    if (PixelSpacingCalibrationType || PixelSpacingCalibrationDescription) {\n        return {\n            PixelSpacing,\n            type: CalibrationTypes.CALIBRATED,\n            isProjection,\n            PixelSpacingCalibrationType,\n            PixelSpacingCalibrationDescription,\n        };\n    }\n    return {\n        PixelSpacing,\n        type: CalibrationTypes.UNKNOWN,\n        isProjection,\n    };\n}\nfunction calculateUSPixelSpacing(instance) {\n    const { SequenceOfUltrasoundRegions } = instance;\n    const isArrayOfSequences = Array.isArray(SequenceOfUltrasoundRegions);\n    if (isArrayOfSequences && SequenceOfUltrasoundRegions.length > 1) {\n        console.warn('Sequence of Ultrasound Regions > one entry. This is not yet implemented, all measurements will be shown in pixels.');\n        return;\n    }\n    const { PhysicalDeltaX, PhysicalDeltaY } = isArrayOfSequences\n        ? SequenceOfUltrasoundRegions[0]\n        : SequenceOfUltrasoundRegions;\n    const USPixelSpacing = [PhysicalDeltaX * 10, PhysicalDeltaY * 10];\n    return {\n        PixelSpacing: USPixelSpacing,\n    };\n}\nexport default function getPixelSpacingInformation(instance) {\n    const { PixelSpacing, SOPClassUID, SequenceOfUltrasoundRegions } = instance;\n    if (SequenceOfUltrasoundRegions) {\n        return calculateUSPixelSpacing(instance);\n    }\n    const isProjection = projectionRadiographSOPClassUIDs.has(SOPClassUID);\n    if (isProjection) {\n        return calculateRadiographicPixelSpacing(instance);\n    }\n    return {\n        PixelSpacing,\n        type: CalibrationTypes.NOT_APPLICABLE,\n        isProjection: false,\n    };\n}\n","import * as eventListener from './eventListener';\nimport csUtils from './invertRgbTransferFunction';\nimport createSigmoidRGBTransferFunction from './createSigmoidRGBTransferFunction';\nimport getVoiFromSigmoidRGBTransferFunction from './getVoiFromSigmoidRGBTransferFunction';\nimport createLinearRGBTransferFunction from './createLinearRGBTransferFunction';\nimport scaleRgbTransferFunction from './scaleRgbTransferFunction';\nimport triggerEvent from './triggerEvent';\nimport uuidv4 from './uuidv4';\nimport getMinMax from './getMinMax';\nimport getRuntimeId from './getRuntimeId';\nimport imageIdToURI from './imageIdToURI';\nimport calibratedPixelSpacingMetadataProvider from './calibratedPixelSpacingMetadataProvider';\nimport clamp from './clamp';\nimport isOpposite from './isOpposite';\nimport getClosestImageId from './getClosestImageId';\nimport getSpacingInNormalDirection from './getSpacingInNormalDirection';\nimport getTargetVolumeAndSpacingInNormalDir from './getTargetVolumeAndSpacingInNormalDir';\nimport getVolumeActorCorners from './getVolumeActorCorners';\nimport indexWithinDimensions from './indexWithinDimensions';\nimport getVolumeViewportsContainingSameVolumes from './getVolumeViewportsContainingSameVolumes';\nimport getViewportsWithVolumeId from './getViewportsWithVolumeId';\nimport transformWorldToIndex, { transformWorldToIndexContinuous, } from './transformWorldToIndex';\nimport transformIndexToWorld from './transformIndexToWorld';\nimport loadImageToCanvas from './loadImageToCanvas';\nimport * as HistoryMemo from './historyMemo';\nimport renderToCanvasCPU from './renderToCanvasCPU';\nimport renderToCanvasGPU from './renderToCanvasGPU';\nimport worldToImageCoords from './worldToImageCoords';\nimport imageToWorldCoords from './imageToWorldCoords';\nimport getVolumeSliceRangeInfo from './getVolumeSliceRangeInfo';\nimport getVolumeViewportScrollInfo from './getVolumeViewportScrollInfo';\nimport getSliceRange from './getSliceRange';\nimport snapFocalPointToSlice from './snapFocalPointToSlice';\nimport getImageSliceDataForVolumeViewport from './getImageSliceDataForVolumeViewport';\nimport { isImageActor, actorIsA } from './actorCheck';\nimport getViewportsWithImageURI from './getViewportsWithImageURI';\nimport getClosestStackImageIndexForPoint from './getClosestStackImageIndexForPoint';\nimport getCurrentVolumeViewportSlice from './getCurrentVolumeViewportSlice';\nimport calculateViewportsSpatialRegistration from './calculateViewportsSpatialRegistration';\nimport spatialRegistrationMetadataProvider from './spatialRegistrationMetadataProvider';\nimport getViewportImageCornersInWorld from './getViewportImageCornersInWorld';\nimport hasNaNValues from './hasNaNValues';\nimport applyPreset from './applyPreset';\nimport PointsManager from './PointsManager';\nimport deepMerge from './deepMerge';\nimport getScalingParameters from './getScalingParameters';\nimport isPTPrescaledWithSUV from './isPTPrescaledWithSUV';\nimport getImageLegacy from './getImageLegacy';\nimport sortImageIdsAndGetSpacing from './sortImageIdsAndGetSpacing';\nimport makeVolumeMetadata from './makeVolumeMetadata';\nimport genericMetadataProvider from './genericMetadataProvider';\nimport { isValidVolume } from './isValidVolume';\nimport { updateVTKImageDataWithCornerstoneImage } from './updateVTKImageDataWithCornerstoneImage';\nimport ProgressiveIterator from './ProgressiveIterator';\nimport decimate from './decimate';\nimport imageRetrieveMetadataProvider from './imageRetrieveMetadataProvider';\nimport isVideoTransferSyntax from './isVideoTransferSyntax';\nimport { getBufferConfiguration } from './getBufferConfiguration';\nimport { generateVolumePropsFromImageIds } from './generateVolumePropsFromImageIds';\nimport { convertStackToVolumeViewport } from './convertStackToVolumeViewport';\nimport { convertVolumeToStackViewport } from './convertVolumeToStackViewport';\nimport VoxelManager from './VoxelManager';\nimport RLEVoxelMap from './RLEVoxelMap';\nimport roundNumber, { roundToPrecision } from './roundNumber';\nimport convertToGrayscale from './convertToGrayscale';\nimport getViewportImageIds from './getViewportImageIds';\nimport { getRandomSampleFromArray } from './getRandomSampleFromArray';\nimport { getVolumeId } from './getVolumeId';\nimport { hasFloatScalingParameters } from './hasFloatScalingParameters';\nimport { pointInShapeCallback } from './pointInShapeCallback';\nexport * as planar from './planar';\nimport * as windowLevel from './windowLevel';\nimport * as colormap from './colormap';\nimport * as transferFunctionUtils from './transferFunctionUtils';\nimport * as color from './color';\nimport { deepEqual } from './deepEqual';\nimport FrameRange from './FrameRange';\nimport fnv1aHash from './fnv1aHash';\nimport { getImageDataMetadata } from './getImageDataMetadata';\nimport { buildMetadata } from './buildMetadata';\nimport { _getViewportModality } from './getViewportModality';\nimport cache from '../cache/cache';\nimport getDynamicVolumeInfo from './getDynamicVolumeInfo';\nimport autoLoad from './autoLoad';\nimport scaleArray from './scaleArray';\nimport splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\nimport { deepClone } from './deepClone';\nimport { jumpToSlice } from './jumpToSlice';\nimport scroll from './scroll';\nimport clip from './clip';\nimport createSubVolume from './createSubVolume';\nimport getVolumeDirectionVectors from './getVolumeDirectionVectors';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport * as logger from './logger';\nimport { calculateNeighborhoodStats } from './calculateNeighborhoodStats';\nimport getPixelSpacingInformation from './getPixelSpacingInformation';\nconst getViewportModality = (viewport, volumeId) => _getViewportModality(viewport, volumeId, cache.getVolume);\nexport * from './isEqual';\nexport { FrameRange, eventListener, csUtils as invertRgbTransferFunction, createSigmoidRGBTransferFunction, getVoiFromSigmoidRGBTransferFunction, createLinearRGBTransferFunction, scaleRgbTransferFunction, triggerEvent, imageIdToURI, fnv1aHash, calibratedPixelSpacingMetadataProvider, clamp, uuidv4, getMinMax, getRuntimeId, isOpposite, getViewportModality, windowLevel, convertToGrayscale, getClosestImageId, getSpacingInNormalDirection, getTargetVolumeAndSpacingInNormalDir, getVolumeActorCorners, indexWithinDimensions, getVolumeViewportsContainingSameVolumes, getViewportsWithVolumeId, transformWorldToIndex, transformIndexToWorld, loadImageToCanvas, renderToCanvasCPU, renderToCanvasGPU, worldToImageCoords, imageToWorldCoords, getVolumeSliceRangeInfo, getVolumeViewportScrollInfo, getSliceRange, snapFocalPointToSlice, getImageSliceDataForVolumeViewport, isImageActor, isPTPrescaledWithSUV, actorIsA, getViewportsWithImageURI, getClosestStackImageIndexForPoint, getCurrentVolumeViewportSlice, calculateViewportsSpatialRegistration, spatialRegistrationMetadataProvider, getViewportImageCornersInWorld, hasNaNValues, applyPreset, deepMerge, PointsManager, getScalingParameters, colormap, getImageLegacy, ProgressiveIterator, decimate, imageRetrieveMetadataProvider, transferFunctionUtils, updateVTKImageDataWithCornerstoneImage, sortImageIdsAndGetSpacing, makeVolumeMetadata, isValidVolume, genericMetadataProvider, isVideoTransferSyntax, HistoryMemo, generateVolumePropsFromImageIds, getBufferConfiguration, VoxelManager, RLEVoxelMap, convertStackToVolumeViewport, convertVolumeToStackViewport, roundNumber, roundToPrecision, getViewportImageIds, getRandomSampleFromArray, getVolumeId, color, hasFloatScalingParameters, getDynamicVolumeInfo, autoLoad, scaleArray, deepClone, splitImageIdsBy4DTags, pointInShapeCallback, deepEqual, jumpToSlice, scroll, clip, transformWorldToIndexContinuous, createSubVolume, getVolumeDirectionVectors, calculateSpacingBetweenImageIds, getImageDataMetadata, buildMetadata, calculateNeighborhoodStats, getPixelSpacingInformation, };\n","function _getViewportModality(viewport, volumeId, getVolume) {\n    if (!getVolume) {\n        throw new Error('getVolume is required, use the utilities export instead ');\n    }\n    if (viewport.modality) {\n        return viewport.modality;\n    }\n    if (viewport.setVolumes) {\n        volumeId = volumeId ?? viewport.getVolumeId();\n        if (!volumeId || !getVolume) {\n            return;\n        }\n        const volume = getVolume(volumeId);\n        return volume.metadata.Modality;\n    }\n    throw new Error('Invalid viewport type');\n}\nexport { _getViewportModality };\n","export default function invertRgbTransferFunction(rgbTransferFunction) {\n    if (!rgbTransferFunction) {\n        return;\n    }\n    const size = rgbTransferFunction.getSize();\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        rgbTransferFunction.getNodeValue(index, nodeValue1);\n        nodeValue1[1] = 1 - nodeValue1[1];\n        nodeValue1[2] = 1 - nodeValue1[2];\n        nodeValue1[3] = 1 - nodeValue1[3];\n        rgbTransferFunction.setNodeValue(index, nodeValue1);\n    }\n}\n","function areNumbersEqualWithTolerance(num1, num2, tolerance) {\n    return Math.abs(num1 - num2) <= tolerance;\n}\nfunction areArraysEqual(arr1, arr2, tolerance = 1e-5) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!areNumbersEqualWithTolerance(arr1[i], arr2[i], tolerance)) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isNumberType(value) {\n    return typeof value === 'number';\n}\nfunction isNumberArrayLike(value) {\n    return (value &&\n        typeof value === 'object' &&\n        'length' in value &&\n        typeof value.length === 'number' &&\n        value.length > 0 &&\n        typeof value[0] === 'number');\n}\nexport default function isEqual(v1, v2, tolerance = 1e-5) {\n    if (typeof v1 !== typeof v2 || v1 === null || v2 === null) {\n        return false;\n    }\n    if (isNumberType(v1) && isNumberType(v2)) {\n        return areNumbersEqualWithTolerance(v1, v2, tolerance);\n    }\n    if (isNumberArrayLike(v1) && isNumberArrayLike(v2)) {\n        return areArraysEqual(v1, v2, tolerance);\n    }\n    return false;\n}\nconst negative = (v) => typeof v === 'number' ? -v : v?.map ? v.map(negative) : !v;\nconst abs = (v) => typeof v === 'number' ? Math.abs(v) : v?.map ? v.map(abs) : v;\nconst isEqualNegative = (v1, v2, tolerance = undefined) => isEqual(v1, negative(v2), tolerance);\nconst isEqualAbs = (v1, v2, tolerance = undefined) => isEqual(abs(v1), abs(v2), tolerance);\nfunction isNumber(n) {\n    if (Array.isArray(n)) {\n        return isNumber(n[0]);\n    }\n    return isFinite(n) && !isNaN(n);\n}\nexport { isEqualNegative, isEqual, isEqualAbs, isNumber };\n","import loglevelImport from 'loglevel';\nconst loglevel = loglevelImport.noConflict();\nif (typeof window !== 'undefined') {\n    window.log = loglevel;\n}\nexport function getRootLogger(name) {\n    const logger = loglevel.getLogger(name[0]);\n    logger.getLogger = (...names) => {\n        return getRootLogger(`${name}.${names.join('.')}`);\n    };\n    return logger;\n}\nexport function getLogger(...name) {\n    return getRootLogger(name.join('.'));\n}\nexport const cs3dLog = getRootLogger('cs3d');\nexport const coreLog = cs3dLog.getLogger('core');\nexport const toolsLog = cs3dLog.getLogger('tools');\nexport const loaderLog = cs3dLog.getLogger('dicomImageLoader');\nexport const aiLog = cs3dLog.getLogger('ai');\nexport const examplesLog = cs3dLog.getLogger('examples');\nexport const dicomConsistencyLog = getLogger('consistency', 'dicom');\nexport const imageConsistencyLog = getLogger('consistency', 'image');\n","import { get } from '../metaData';\nexport default function makeVolumeMetadata(imageIds) {\n    const imageId0 = imageIds[0];\n    const { pixelRepresentation, bitsAllocated, bitsStored, highBit, photometricInterpretation, samplesPerPixel, } = get('imagePixelModule', imageId0);\n    const voiLut = [];\n    const voiLutModule = get('voiLutModule', imageId0);\n    let voiLUTFunction;\n    if (voiLutModule) {\n        const { windowWidth, windowCenter } = voiLutModule;\n        voiLUTFunction = voiLutModule?.voiLUTFunction;\n        if (Array.isArray(windowWidth)) {\n            for (let i = 0; i < windowWidth.length; i++) {\n                voiLut.push({\n                    windowWidth: windowWidth[i],\n                    windowCenter: windowCenter[i],\n                });\n            }\n        }\n        else {\n            voiLut.push({\n                windowWidth: windowWidth,\n                windowCenter: windowCenter,\n            });\n        }\n    }\n    else {\n        voiLut.push({\n            windowWidth: undefined,\n            windowCenter: undefined,\n        });\n    }\n    const { modality, seriesInstanceUID } = get('generalSeriesModule', imageId0);\n    const { imageOrientationPatient, pixelSpacing, frameOfReferenceUID, columns, rows, } = get('imagePlaneModule', imageId0);\n    return {\n        BitsAllocated: bitsAllocated,\n        BitsStored: bitsStored,\n        SamplesPerPixel: samplesPerPixel,\n        HighBit: highBit,\n        PhotometricInterpretation: photometricInterpretation,\n        PixelRepresentation: pixelRepresentation,\n        Modality: modality,\n        ImageOrientationPatient: imageOrientationPatient,\n        PixelSpacing: pixelSpacing,\n        FrameOfReferenceUID: frameOfReferenceUID,\n        Columns: columns,\n        Rows: rows,\n        voiLut,\n        VOILUTFunction: voiLUTFunction,\n        SeriesInstanceUID: seriesInstanceUID,\n    };\n}\n","import { mat3 } from 'gl-matrix';\nimport { EPSILON } from '../constants';\nfunction linePlaneIntersection(p0, p1, plane) {\n    const [x0, y0, z0] = p0;\n    const [x1, y1, z1] = p1;\n    const [A, B, C, D] = plane;\n    const a = x1 - x0;\n    const b = y1 - y0;\n    const c = z1 - z0;\n    const t = (-1 * (A * x0 + B * y0 + C * z0 - D)) / (A * a + B * b + C * c);\n    const X = a * t + x0;\n    const Y = b * t + y0;\n    const Z = c * t + z0;\n    return [X, Y, Z];\n}\nfunction planeEquation(normal, point, normalized = false) {\n    const [A, B, C] = normal;\n    const D = A * point[0] + B * point[1] + C * point[2];\n    if (normalized) {\n        const length = Math.sqrt(A * A + B * B + C * C);\n        return [A / length, B / length, C / length, D / length];\n    }\n    return [A, B, C, D];\n}\nfunction threePlaneIntersection(firstPlane, secondPlane, thirdPlane) {\n    const [A1, B1, C1, D1] = firstPlane;\n    const [A2, B2, C2, D2] = secondPlane;\n    const [A3, B3, C3, D3] = thirdPlane;\n    const m0 = mat3.fromValues(A1, A2, A3, B1, B2, B3, C1, C2, C3);\n    const m1 = mat3.fromValues(D1, D2, D3, B1, B2, B3, C1, C2, C3);\n    const m2 = mat3.fromValues(A1, A2, A3, D1, D2, D3, C1, C2, C3);\n    const m3 = mat3.fromValues(A1, A2, A3, B1, B2, B3, D1, D2, D3);\n    const x = mat3.determinant(m1) / mat3.determinant(m0);\n    const y = mat3.determinant(m2) / mat3.determinant(m0);\n    const z = mat3.determinant(m3) / mat3.determinant(m0);\n    return [x, y, z];\n}\nfunction planeDistanceToPoint(plane, point, signed = false) {\n    const [A, B, C, D] = plane;\n    const [x, y, z] = point;\n    const numerator = A * x + B * y + C * z - D;\n    const distance = Math.abs(numerator) / Math.sqrt(A * A + B * B + C * C);\n    const sign = signed ? Math.sign(numerator) : 1;\n    return sign * distance;\n}\nfunction isPointOnPlane(point, plane, tolerance = EPSILON) {\n    return planeDistanceToPoint(plane, point) < tolerance;\n}\nexport { linePlaneIntersection, planeEquation, threePlaneIntersection, planeDistanceToPoint, isPointOnPlane, };\n","import { vec3 } from 'gl-matrix';\nexport default function snapFocalPointToSlice(focalPoint, position, sliceRange, viewPlaneNormal, spacingInNormalDirection, deltaFrames) {\n    const { min, max, current } = sliceRange;\n    const posDiffFromFocalPoint = vec3.create();\n    vec3.sub(posDiffFromFocalPoint, position, focalPoint);\n    const steps = Math.round((max - min) / spacingInNormalDirection);\n    const fraction = (current - min) / (max - min);\n    const floatingStepNumber = fraction * steps;\n    let frameIndex = Math.round(floatingStepNumber);\n    let newFocalPoint = [\n        focalPoint[0] -\n            viewPlaneNormal[0] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[1] -\n            viewPlaneNormal[1] * floatingStepNumber * spacingInNormalDirection,\n        focalPoint[2] -\n            viewPlaneNormal[2] * floatingStepNumber * spacingInNormalDirection,\n    ];\n    frameIndex += deltaFrames;\n    if (frameIndex > steps) {\n        frameIndex = steps;\n    }\n    else if (frameIndex < 0) {\n        frameIndex = 0;\n    }\n    const newSlicePosFromMin = frameIndex * spacingInNormalDirection;\n    newFocalPoint = [\n        newFocalPoint[0] + viewPlaneNormal[0] * newSlicePosFromMin,\n        newFocalPoint[1] + viewPlaneNormal[1] * newSlicePosFromMin,\n        newFocalPoint[2] + viewPlaneNormal[2] * newSlicePosFromMin,\n    ];\n    const newPosition = [\n        newFocalPoint[0] + posDiffFromFocalPoint[0],\n        newFocalPoint[1] + posDiffFromFocalPoint[1],\n        newFocalPoint[2] + posDiffFromFocalPoint[2],\n    ];\n    return { newFocalPoint, newPosition };\n}\n","import { vec3 } from 'gl-matrix';\nimport * as metaData from '../metaData';\nimport calculateSpacingBetweenImageIds from './calculateSpacingBetweenImageIds';\nexport default function sortImageIdsAndGetSpacing(imageIds, scanAxisNormal) {\n    const { imagePositionPatient: referenceImagePositionPatient, imageOrientationPatient, } = metaData.get('imagePlaneModule', imageIds[0]);\n    if (!scanAxisNormal) {\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        scanAxisNormal = vec3.create();\n        vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n    }\n    const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n    const zSpacing = calculateSpacingBetweenImageIds(imageIds);\n    let sortedImageIds;\n    function getDistance(imageId) {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const positionVector = vec3.create();\n        vec3.sub(positionVector, referenceImagePositionPatient, imagePositionPatient);\n        return vec3.dot(positionVector, scanAxisNormal);\n    }\n    if (!usingWadoUri) {\n        const distanceImagePairs = imageIds.map((imageId) => {\n            const distance = getDistance(imageId);\n            return {\n                distance,\n                imageId,\n            };\n        });\n        distanceImagePairs.sort((a, b) => b.distance - a.distance);\n        sortedImageIds = distanceImagePairs.map((a) => a.imageId);\n    }\n    else {\n        const prefetchedImageIds = [\n            imageIds[0],\n            imageIds[Math.floor(imageIds.length / 2)],\n        ];\n        sortedImageIds = imageIds;\n        const firstImageDistance = getDistance(prefetchedImageIds[0]);\n        const middleImageDistance = getDistance(prefetchedImageIds[1]);\n        if (firstImageDistance - middleImageDistance < 0) {\n            sortedImageIds.reverse();\n        }\n    }\n    const { imagePositionPatient: origin } = metaData.get('imagePlaneModule', sortedImageIds[0]);\n    const result = {\n        zSpacing,\n        origin,\n        sortedImageIds,\n    };\n    return result;\n}\n","function getTransferFunctionNodes(transferFunction) {\n    const size = transferFunction.getSize();\n    const values = [];\n    for (let index = 0; index < size; index++) {\n        const nodeValue1 = [];\n        transferFunction.getNodeValue(index, nodeValue1);\n        values.push(nodeValue1);\n    }\n    return values;\n}\nfunction setTransferFunctionNodes(transferFunction, nodes) {\n    if (!nodes?.length) {\n        return;\n    }\n    transferFunction.removeAllPoints();\n    nodes.forEach((node) => {\n        transferFunction.addRGBPoint(...node);\n    });\n}\nexport { getTransferFunctionNodes, setTransferFunctionNodes };\n","import transformWorldToIndex from './transformWorldToIndex';\nexport function transformCanvasToIJK(viewport, canvasPoint) {\n    const { imageData: vtkImageData } = viewport.getImageData();\n    const worldPoint = viewport.canvasToWorld(canvasPoint);\n    return transformWorldToIndex(vtkImageData, worldPoint);\n}\n","export default function transformIndexToWorld(imageData, voxelPos) {\n    return imageData.indexToWorld(voxelPos);\n}\n","export default function transformWorldToIndex(imageData, worldPos) {\n    const continuousIndex = imageData.worldToIndex(worldPos);\n    const index = continuousIndex.map(Math.round);\n    return index;\n}\nexport function transformWorldToIndexContinuous(imageData, worldPos) {\n    return imageData.worldToIndex(worldPos);\n}\n","function updateVTKImageDataWithCornerstoneImage(sourceImageData, image) {\n    const pixelData = image.voxelManager.getScalarData();\n    if (!sourceImageData.getPointData) {\n        return;\n    }\n    const scalarData = sourceImageData\n        .getPointData()\n        .getScalars()\n        .getData();\n    if (image.color && image.rgba) {\n        const newPixelData = new Uint8Array(image.columns * image.rows * 3);\n        for (let i = 0; i < image.columns * image.rows; i++) {\n            newPixelData[i * 3] = pixelData[i * 4];\n            newPixelData[i * 3 + 1] = pixelData[i * 4 + 1];\n            newPixelData[i * 3 + 2] = pixelData[i * 4 + 2];\n        }\n        image.rgba = false;\n        image.getPixelData = () => newPixelData;\n        scalarData.set(newPixelData);\n    }\n    else {\n        scalarData.set(pixelData);\n    }\n    sourceImageData.modified();\n}\nexport { updateVTKImageDataWithCornerstoneImage };\n","import VOILUTFunctionType from '../enums/VOILUTFunctionType';\nimport { logit } from './logit';\nfunction toWindowLevel(low, high) {\n    const windowWidth = Math.abs(high - low) + 1;\n    const windowCenter = (low + high + 1) / 2;\n    return { windowWidth, windowCenter };\n}\nfunction toLowHighRange(windowWidth, windowCenter, voiLUTFunction = VOILUTFunctionType.LINEAR) {\n    if (voiLUTFunction === VOILUTFunctionType.LINEAR) {\n        return {\n            lower: windowCenter - 0.5 - (windowWidth - 1) / 2,\n            upper: windowCenter - 0.5 + (windowWidth - 1) / 2,\n        };\n    }\n    else if (voiLUTFunction === VOILUTFunctionType.LINEAR_EXACT) {\n        return {\n            lower: windowCenter - windowWidth / 2,\n            upper: windowCenter + windowWidth / 2,\n        };\n    }\n    else if (voiLUTFunction === VOILUTFunctionType.SAMPLED_SIGMOID) {\n        const xLower = logit(0.01, windowCenter, windowWidth);\n        const xUpper = logit(0.99, windowCenter, windowWidth);\n        return {\n            lower: xLower,\n            upper: xUpper,\n        };\n    }\n    else {\n        throw new Error('Invalid VOI LUT function');\n    }\n}\nexport { toWindowLevel, toLowHighRange };\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraModified = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onCameraModified) {\n            tool.onCameraModified(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onImageSpacingCalibrated = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onImageSpacingCalibrated) {\n            tool.onImageSpacingCalibrated(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.IMAGE_SPACING_CALIBRATED, onImageSpacingCalibrated);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport InterpolationManager from '../utilities/segmentation/InterpolationManager/InterpolationManager';\nconst enable = function () {\n    eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.addEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nconst disable = function () {\n    eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, InterpolationManager.handleAnnotationCompleted);\n    eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, InterpolationManager.handleAnnotationUpdate);\n    eventTarget.removeEventListener(Events.ANNOTATION_REMOVED, InterpolationManager.handleAnnotationDelete);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { Enums } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\nconst { Active, Passive, Enabled } = ToolModes;\nconst onCameraReset = function (evt) {\n    const enabledTools = getToolsWithModesForMouseEvent(evt, [\n        Active,\n        Passive,\n        Enabled,\n    ]);\n    enabledTools.forEach((tool) => {\n        if (tool.onResetCamera) {\n            tool.onResetCamera(evt);\n        }\n    });\n};\nconst enable = function (element) {\n    element.addEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.CAMERA_RESET, onCameraReset);\n};\nexport default {\n    enable,\n    disable,\n};\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createCameraPositionSynchronizer(synchronizerName) {\n    const cameraPositionSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, cameraSyncCallback);\n    return cameraPositionSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport presentationViewSyncCallback from '../callbacks/presentationViewSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName, options) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, presentationViewSyncCallback, { viewPresentation: options });\n    return presentationView;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createZoomPanSynchronizer(synchronizerName) {\n    const zoomPanSynchronizer = createSynchronizer(synchronizerName, CAMERA_MODIFIED, zoomPanSyncCallback);\n    return zoomPanSynchronizer;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport imageSliceSyncCallback from '../callbacks/imageSliceSyncCallback';\nconst { STACK_NEW_IMAGE, VOLUME_NEW_IMAGE } = Enums.Events;\nexport default function createImageSliceSynchronizer(synchronizerName) {\n    const stackImageSynchronizer = createSynchronizer(synchronizerName, STACK_NEW_IMAGE, imageSliceSyncCallback, {\n        auxiliaryEvents: [\n            {\n                name: 'VOLUME_NEW_IMAGE',\n            },\n        ],\n    });\n    return stackImageSynchronizer;\n}\n","import { Enums } from '@cornerstonejs/core';\nimport { createSynchronizer } from '../../store/SynchronizerManager';\nimport slabThicknessSyncCallback from '../callbacks/slabThicknessSyncCallback';\nconst { CAMERA_MODIFIED } = Enums.Events;\nexport default function createPresentationViewSynchronizer(synchronizerName) {\n    const presentationView = createSynchronizer(synchronizerName, CAMERA_MODIFIED, slabThicknessSyncCallback);\n    return presentationView;\n}\n","import { utilities, Enums } from '@cornerstonejs/core';\nconst { calibratedPixelSpacingMetadataProvider } = utilities;\nexport default function calibrateImageSpacing(imageId, renderingEngine, calibrationOrScale) {\n    if (typeof calibrationOrScale === 'number') {\n        calibrationOrScale = {\n            type: Enums.CalibrationTypes.USER,\n            scale: calibrationOrScale,\n        };\n    }\n    calibratedPixelSpacingMetadataProvider.add(imageId, calibrationOrScale);\n    const viewports = renderingEngine.getStackViewports();\n    viewports.forEach((viewport) => {\n        const imageIds = viewport.getImageIds();\n        if (imageIds.includes(imageId)) {\n            viewport.calibrateSpacing(imageId);\n        }\n    });\n}\n","var Events;\n(function (Events) {\n    Events[\"CLIP_STOPPED\"] = \"CORNERSTONE_CINE_TOOL_STOPPED\";\n    Events[\"CLIP_STARTED\"] = \"CORNERSTONE_CINE_TOOL_STARTED\";\n})(Events || (Events = {}));\nexport default Events;\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, getEnabledElement, StackViewport, VideoViewport, VolumeViewport, cache, BaseVolumeViewport, Enums, } from '@cornerstonejs/core';\nimport CINE_EVENTS from './events';\nimport { addToolState, getToolState, getToolStateByViewportId } from './state';\nconst { ViewportStatus } = Enums;\nconst { triggerEvent } = csUtils;\nconst debounced = true;\nconst dynamicVolumesPlayingMap = new Map();\nfunction playClip(element, playClipOptions) {\n    let playClipTimeouts;\n    let playClipIsTimeVarying;\n    if (element === undefined) {\n        throw new Error('playClip: element must not be undefined');\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        throw new Error('playClip: element must be a valid Cornerstone enabled element');\n    }\n    if (!playClipOptions) {\n        playClipOptions = {};\n    }\n    playClipOptions.dynamicCineEnabled =\n        playClipOptions.dynamicCineEnabled ?? true;\n    const { viewport } = enabledElement;\n    const playClipContext = _createCinePlayContext(viewport, playClipOptions);\n    let playClipData = getToolState(element);\n    const isDynamicCinePlaying = playClipOptions.dynamicCineEnabled;\n    if (isDynamicCinePlaying) {\n        _stopDynamicVolumeCine(element);\n    }\n    if (!playClipData) {\n        playClipData = {\n            intervalId: undefined,\n            framesPerSecond: 30,\n            lastFrameTimeStamp: undefined,\n            ignoreFrameTimeVector: false,\n            usingFrameTimeVector: false,\n            frameTimeVector: playClipOptions.frameTimeVector ?? undefined,\n            speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,\n            reverse: playClipOptions.reverse ?? false,\n            loop: playClipOptions.loop ?? true,\n            bounce: playClipOptions.bounce ?? false,\n        };\n        addToolState(element, playClipData);\n    }\n    else {\n        _stopClip(element, {\n            stopDynamicCine: !isDynamicCinePlaying,\n            viewportId: viewport.id,\n        });\n    }\n    playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;\n    if (playClipOptions.framesPerSecond < 0 ||\n        playClipOptions.framesPerSecond > 0) {\n        playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);\n        playClipData.reverse = playClipData.framesPerSecond < 0;\n        playClipData.ignoreFrameTimeVector = true;\n    }\n    if (playClipData.ignoreFrameTimeVector !== true &&\n        playClipData.frameTimeVector &&\n        playClipData.frameTimeVector.length === playClipContext.numScrollSteps &&\n        playClipContext.frameTimeVectorEnabled) {\n        const { timeouts, isTimeVarying } = _getPlayClipTimeouts(playClipData.frameTimeVector, playClipData.speed);\n        playClipTimeouts = timeouts;\n        playClipIsTimeVarying = isTimeVarying;\n    }\n    if (playClipOptions.bounce !== undefined) {\n        playClipData.bounce = playClipOptions.bounce;\n    }\n    const playClipAction = () => {\n        const { numScrollSteps, currentStepIndex } = playClipContext;\n        let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n        const outOfRange = newStepIndex < 0 || newStepIndex >= numScrollSteps;\n        if (outOfRange) {\n            if (playClipData.bounce) {\n                playClipData.reverse = !playClipData.reverse;\n                newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n                newStepIndex = Math.max(0, Math.min(numScrollSteps - 1, newStepIndex));\n            }\n            else if (!playClipData.loop) {\n                _stopClip(element, {\n                    stopDynamicCine: !isDynamicCinePlaying,\n                    viewportId: viewport.id,\n                });\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n                return;\n            }\n            else {\n                newStepIndex = playClipData.reverse ? numScrollSteps - 1 : 0;\n            }\n        }\n        const delta = newStepIndex - currentStepIndex;\n        if (delta) {\n            try {\n                playClipContext.scroll(delta);\n            }\n            catch (e) {\n                console.warn('Play clip not scrolling', e);\n                _stopClipWithData(playClipData);\n                triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, { element });\n            }\n        }\n    };\n    if (isDynamicCinePlaying) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume) {\n            dynamicVolumesPlayingMap.set(volume.volumeId, element);\n        }\n    }\n    if (playClipContext.play) {\n        playClipData.framesPerSecond = playClipContext.play(playClipOptions.framesPerSecond);\n    }\n    else if (playClipTimeouts &&\n        playClipTimeouts.length > 0 &&\n        playClipIsTimeVarying) {\n        playClipData.usingFrameTimeVector = true;\n        playClipData.intervalId = window.setTimeout(function playClipTimeoutHandler() {\n            playClipData.intervalId = window.setTimeout(playClipTimeoutHandler, playClipTimeouts[playClipContext.currentStepIndex]);\n            playClipAction();\n        }, 0);\n    }\n    else {\n        playClipData.usingFrameTimeVector = false;\n        playClipData.intervalId = window.setInterval(playClipAction, 1000 / Math.abs(playClipData.framesPerSecond));\n    }\n    const eventDetail = {\n        element,\n    };\n    triggerEvent(element, CINE_EVENTS.CLIP_STARTED, eventDetail);\n}\nfunction stopClip(element, options = {}) {\n    _stopClip(element, {\n        stopDynamicCine: true,\n        ...options,\n    });\n}\nfunction _stopClip(element, options = { stopDynamicCine: true, viewportId: undefined }) {\n    const { stopDynamicCine, viewportId } = options;\n    const enabledElement = getEnabledElement(element);\n    let toolState;\n    const viewport = enabledElement?.viewport;\n    if (!enabledElement) {\n        if (viewportId) {\n            toolState = getToolStateByViewportId(viewportId);\n        }\n        else {\n            return;\n        }\n    }\n    else {\n        const { viewport } = enabledElement;\n        toolState = getToolState(viewport.element);\n    }\n    if (toolState) {\n        _stopClipWithData(toolState);\n    }\n    if (viewport instanceof VideoViewport) {\n        viewport.pause();\n    }\n    else if (stopDynamicCine && viewport instanceof BaseVolumeViewport) {\n        _stopDynamicVolumeCine(element);\n    }\n}\nfunction _stopDynamicVolumeCine(element) {\n    const { viewport } = getEnabledElement(element);\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (volume?.isDynamicVolume()) {\n            const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);\n            dynamicVolumesPlayingMap.delete(volume.volumeId);\n            if (dynamicCineElement && dynamicCineElement !== element) {\n                stopClip(dynamicCineElement);\n            }\n        }\n    }\n}\nfunction _getPlayClipTimeouts(vector, speed) {\n    let i;\n    let sample;\n    let delay;\n    let sum = 0;\n    const limit = vector.length;\n    const timeouts = [];\n    let isTimeVarying = false;\n    if (typeof speed !== 'number' || speed <= 0) {\n        speed = 1;\n    }\n    for (i = 1; i < limit; i++) {\n        delay = (Number(vector[i]) / speed) | 0;\n        timeouts.push(delay);\n        if (i === 1) {\n            sample = delay;\n        }\n        else if (delay !== sample) {\n            isTimeVarying = true;\n        }\n        sum += delay;\n    }\n    if (timeouts.length > 0) {\n        if (isTimeVarying) {\n            delay = (sum / timeouts.length) | 0;\n        }\n        else {\n            delay = timeouts[0];\n        }\n        timeouts.push(delay);\n    }\n    return { timeouts, isTimeVarying };\n}\nfunction _stopClipWithData(playClipData) {\n    const id = playClipData.intervalId;\n    if (typeof id !== 'undefined') {\n        playClipData.intervalId = undefined;\n        if (playClipData.usingFrameTimeVector) {\n            clearTimeout(id);\n        }\n        else {\n            clearInterval(id);\n        }\n    }\n}\nfunction _getVolumeFromViewport(viewport) {\n    if (!(viewport instanceof VolumeViewport)) {\n        return undefined;\n    }\n    const volumeIds = viewport.getAllVolumeIds();\n    if (!volumeIds?.length) {\n        return undefined;\n    }\n    const dynamicVolumeId = volumeIds.find((volumeId) => cache.getVolume(volumeId)?.isDynamicVolume());\n    const volumeId = dynamicVolumeId ?? volumeIds[0];\n    return cache.getVolume(volumeId);\n}\nfunction _createStackViewportCinePlayContext(viewport, waitForRendered) {\n    const imageIds = viewport.getImageIds();\n    return {\n        get numScrollSteps() {\n            return imageIds.length;\n        },\n        get currentStepIndex() {\n            return viewport.getTargetImageIdIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n    };\n}\nfunction _createVideoViewportCinePlayContext(viewport, waitForRendered) {\n    return {\n        get numScrollSteps() {\n            return viewport.getNumberOfSlices();\n        },\n        get currentStepIndex() {\n            return viewport.getSliceIndex();\n        },\n        get frameTimeVectorEnabled() {\n            return true;\n        },\n        waitForRenderedCount: 0,\n        scroll(delta) {\n            if (this.waitForRenderedCount <= waitForRendered &&\n                viewport.viewportStatus !== ViewportStatus.RENDERED) {\n                this.waitForRenderedCount++;\n                return;\n            }\n            this.waitForRenderedCount = 0;\n            csUtils.scroll(viewport, { delta, debounceLoading: debounced });\n        },\n        play(fps) {\n            if (fps) {\n                viewport.setPlaybackRate(fps / 24);\n            }\n            viewport.play();\n            return viewport.getFrameRate();\n        },\n    };\n}\nfunction _createVolumeViewportCinePlayContext(viewport, volume) {\n    const { volumeId } = volume;\n    const cachedScrollInfo = {\n        viewPlaneNormal: vec3.create(),\n        scrollInfo: null,\n    };\n    const getScrollInfo = () => {\n        const camera = viewport.getCamera();\n        const updateCache = !cachedScrollInfo.scrollInfo ||\n            !vec3.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);\n        if (updateCache) {\n            const scrollInfo = csUtils.getVolumeViewportScrollInfo(viewport, volumeId);\n            cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;\n            cachedScrollInfo.scrollInfo = scrollInfo;\n        }\n        return cachedScrollInfo.scrollInfo;\n    };\n    return {\n        get numScrollSteps() {\n            return getScrollInfo().numScrollSteps;\n        },\n        get currentStepIndex() {\n            return getScrollInfo().currentStepIndex;\n        },\n        get frameTimeVectorEnabled() {\n            const camera = viewport.getCamera();\n            const volumeViewPlaneNormal = volume.direction\n                .slice(6, 9)\n                .map((x) => -x);\n            const dot = vec3.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);\n            return glMatrix.equals(dot, 1);\n        },\n        scroll(delta) {\n            getScrollInfo().currentStepIndex += delta;\n            csUtils.scroll(viewport, { delta });\n        },\n    };\n}\nfunction _createDynamicVolumeViewportCinePlayContext(volume) {\n    return {\n        get numScrollSteps() {\n            return volume.numDimensionGroups;\n        },\n        get currentStepIndex() {\n            return volume.dimensionGroupNumber - 1;\n        },\n        get frameTimeVectorEnabled() {\n            return false;\n        },\n        scroll(delta) {\n            volume.scroll(delta);\n        },\n    };\n}\nfunction _createCinePlayContext(viewport, playClipOptions) {\n    if (viewport instanceof StackViewport) {\n        return _createStackViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    if (viewport instanceof VolumeViewport) {\n        const volume = _getVolumeFromViewport(viewport);\n        if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {\n            return _createDynamicVolumeViewportCinePlayContext(volume);\n        }\n        return _createVolumeViewportCinePlayContext(viewport, volume);\n    }\n    if (viewport instanceof VideoViewport) {\n        return _createVideoViewportCinePlayContext(viewport, playClipOptions.waitForRendered ?? 30);\n    }\n    throw new Error('Unknown viewport type');\n}\nexport { playClip, stopClip };\n","import smoothAnnotation from './smoothAnnotation';\nexport default {\n    smoothAnnotation,\n};\nexport { smoothAnnotation };\n","import { Enums } from '@cornerstonejs/core';\nfunction sumOverDimensionGroups(voxelManager, dimensionGroups) {\n    const arrayLength = voxelManager.getScalarDataLength();\n    const resultArray = new Float32Array(arrayLength);\n    for (const dimensionGroupNumber of dimensionGroups) {\n        const scalarData = voxelManager.getDimensionGroupScalarData(dimensionGroupNumber);\n        for (let i = 0; i < arrayLength; i++) {\n            resultArray[i] += scalarData[i];\n        }\n    }\n    return resultArray;\n}\nfunction averageOverDimensionGroups(voxelManager, dimensionGroups) {\n    const sumArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n    const numDimensionGroups = dimensionGroups.length;\n    for (let i = 0; i < sumArray.length; i++) {\n        sumArray[i] /= numDimensionGroups;\n    }\n    return sumArray;\n}\nconst operationFunctions = {\n    [Enums.GenerateImageType.SUM]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = sumOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.AVERAGE]: (voxelManager, dimensionGroups, callback) => {\n        const resultArray = averageOverDimensionGroups(voxelManager, dimensionGroups);\n        for (let i = 0; i < resultArray.length; i++) {\n            callback(i, resultArray[i]);\n        }\n    },\n    [Enums.GenerateImageType.SUBTRACT]: (voxelManager, dimensionGroups, callback) => {\n        if (dimensionGroups.length !== 2) {\n            throw new Error('Please provide only 2 dimension groups for subtraction.');\n        }\n        const arrayLength = voxelManager.getScalarDataLength();\n        const scalarData1 = voxelManager.getDimensionGroupScalarData(dimensionGroups[0]);\n        const scalarData2 = voxelManager.getDimensionGroupScalarData(dimensionGroups[1]);\n        for (let i = 0; i < arrayLength; i++) {\n            const difference = scalarData1[i] - scalarData2[i];\n            callback(i, difference);\n        }\n    },\n};\nfunction generateImageFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers } = options;\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const arrayLength = voxelManager.getScalarDataLength();\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    const resultArray = new Float32Array(arrayLength);\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        resultArray[index] = value;\n    });\n    return resultArray;\n}\nfunction updateVolumeFromTimeData(dynamicVolume, operation, options) {\n    const { dimensionGroupNumbers, frameNumbers, targetVolume } = options;\n    if (!targetVolume) {\n        throw new Error('A target volume must be provided');\n    }\n    if (frameNumbers) {\n        console.warn('Warning: frameNumbers parameter is deprecated. Please use dimensionGroupNumbers instead.');\n    }\n    const dimensionGroups = dimensionGroupNumbers ||\n        frameNumbers ||\n        Array.from({ length: dynamicVolume.numDimensionGroups }, (_, i) => i + 1);\n    if (dimensionGroups.length <= 1) {\n        throw new Error('Please provide two or more dimension groups');\n    }\n    const voxelManager = dynamicVolume.voxelManager;\n    const targetVoxelManager = targetVolume.voxelManager;\n    const operationFunction = operationFunctions[operation];\n    if (!operationFunction) {\n        throw new Error(`Unsupported operation: ${operation}`);\n    }\n    operationFunction(voxelManager, dimensionGroups, (index, value) => {\n        targetVoxelManager.setAtIndex(index, value);\n    });\n    targetVoxelManager.resetModifiedSlices();\n    for (let k = 0; k < targetVolume.dimensions[2]; k++) {\n        targetVoxelManager.modifiedSlices.add(k);\n    }\n}\nexport { generateImageFromTimeData, updateVolumeFromTimeData };\n","import { vec3 } from 'gl-matrix';\nexport function getPoint(points, idx) {\n    const idx3 = idx * 3;\n    if (idx3 < points.length) {\n        return vec3.fromValues(points[idx3], points[idx3 + 1], points[idx3 + 2]);\n    }\n}\nexport function getPolyDataPointIndexes(polyData) {\n    const linesData = polyData.getLines().getData();\n    let idx = 0;\n    const lineSegments = new Map();\n    while (idx < linesData.length) {\n        const segmentSize = linesData[idx++];\n        const segment = [];\n        for (let i = 0; i < segmentSize; i++) {\n            segment.push(linesData[idx + i]);\n        }\n        lineSegments.set(segment[0], segment);\n        idx += segmentSize;\n    }\n    const contours = [];\n    const findStartingPoint = (map) => {\n        for (const [key, value] of map.entries()) {\n            if (value !== undefined) {\n                return key;\n            }\n        }\n        return -1;\n    };\n    let startPoint = findStartingPoint(lineSegments);\n    while (startPoint !== -1) {\n        const contour = [startPoint];\n        while (lineSegments.has(startPoint)) {\n            const nextPoint = lineSegments.get(startPoint)[1];\n            if (lineSegments.has(nextPoint)) {\n                contour.push(nextPoint);\n            }\n            lineSegments.delete(startPoint);\n            startPoint = nextPoint;\n        }\n        contours.push(contour);\n        startPoint = findStartingPoint(lineSegments);\n    }\n    return contours.length ? contours : undefined;\n}\nexport function getPolyDataPoints(polyData) {\n    const contoursIndexes = getPolyDataPointIndexes(polyData);\n    if (!contoursIndexes) {\n        return;\n    }\n    const rawPointsData = polyData.getPoints().getData();\n    return contoursIndexes.map((contourIndexes) => contourIndexes.map((index) => getPoint(rawPointsData, index)));\n}\n","import { vec2 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { isRangeValid, areColorbarRangesEqual } from './common';\nimport { ColorbarRangeTextPosition } from './enums/ColorbarRangeTextPosition';\nimport { ColorbarCanvas } from './ColorbarCanvas';\nimport { ColorbarTicks } from './ColorbarTicks';\nimport isRangeTextPositionValid from './common/isRangeTextPositionValid';\nimport Widget from '../../../widgets/Widget';\nconst DEFAULTS = {\n    MULTIPLIER: 1,\n    RANGE_TEXT_POSITION: ColorbarRangeTextPosition.Right,\n    TICKS_BAR_SIZE: 50,\n};\nclass Colorbar extends Widget {\n    constructor(props) {\n        super(props);\n        this._isMouseOver = false;\n        this._isInteracting = false;\n        this._mouseOverCallback = (evt) => {\n            this._isMouseOver = true;\n            this.showTicks();\n            evt.stopPropagation();\n        };\n        this._mouseOutCallback = (evt) => {\n            this._isMouseOver = false;\n            this.hideTicks();\n            evt.stopPropagation();\n        };\n        this._mouseDownCallback = (evt) => {\n            this._isInteracting = true;\n            this.showTicks();\n            this._addVOIEventListeners(evt);\n            evt.stopPropagation();\n        };\n        this._mouseDragCallback = (evt, initialState) => {\n            const multipliers = this.getVOIMultipliers();\n            const currentPoints = this._getPointsFromMouseEvent(evt);\n            const { points: startPoints, voiRange: startVOIRange } = initialState;\n            const canvasDelta = vec2.sub(vec2.create(), currentPoints.local, startPoints.local);\n            const wwDelta = canvasDelta[0] * multipliers[0];\n            const wcDelta = canvasDelta[1] * multipliers[1];\n            if (!wwDelta && !wcDelta) {\n                return;\n            }\n            const { lower: voiLower, upper: voiUpper } = startVOIRange;\n            let { windowWidth, windowCenter } = csUtils.windowLevel.toWindowLevel(voiLower, voiUpper);\n            windowWidth = Math.max(windowWidth + wwDelta, 1);\n            windowCenter += wcDelta;\n            const newVoiRange = csUtils.windowLevel.toLowHighRange(windowWidth, windowCenter);\n            this.voiRange = newVoiRange;\n            evt.stopPropagation();\n            evt.preventDefault();\n        };\n        this._mouseUpCallback = (evt) => {\n            this._isInteracting = false;\n            this.hideTicks();\n            this._removeVOIEventListeners();\n            evt.stopPropagation();\n        };\n        this._eventListenersManager =\n            new csUtils.eventListener.MultiTargetEventListenerManager();\n        this._colormaps = Colorbar.getColormapsMap(props);\n        this._activeColormapName = Colorbar.getInitialColormapName(props);\n        this._canvas = this._createCanvas(props);\n        this._ticksBar = this._createTicksBar(props);\n        this._rangeTextPosition =\n            props.ticks?.position ?? DEFAULTS.RANGE_TEXT_POSITION;\n        this._canvas.appendTo(this.rootElement);\n        this._ticksBar.appendTo(this.rootElement);\n        this._addRootElementEventListeners();\n    }\n    get activeColormapName() {\n        return this._activeColormapName;\n    }\n    set activeColormapName(colormapName) {\n        if (colormapName === this._activeColormapName) {\n            return;\n        }\n        const colormap = this._colormaps.get(colormapName);\n        if (!colormap) {\n            console.warn(`Invalid colormap name (${colormapName})`);\n            return;\n        }\n        this._activeColormapName = colormapName;\n        this._canvas.colormap = colormap;\n    }\n    get imageRange() {\n        return this._canvas.imageRange;\n    }\n    set imageRange(imageRange) {\n        this._canvas.imageRange = imageRange;\n        this._ticksBar.imageRange = imageRange;\n    }\n    get voiRange() {\n        return this._canvas.voiRange;\n    }\n    set voiRange(voiRange) {\n        const { voiRange: currentVoiRange } = this._canvas;\n        if (!isRangeValid(voiRange) ||\n            areColorbarRangesEqual(voiRange, currentVoiRange)) {\n            return;\n        }\n        this._canvas.voiRange = voiRange;\n        this._ticksBar.voiRange = voiRange;\n        this.onVoiChange(voiRange);\n    }\n    get showFullImageRange() {\n        return this._canvas.showFullImageRange;\n    }\n    set showFullImageRange(value) {\n        this._canvas.showFullImageRange = value;\n        this._ticksBar.showFullPixelValueRange = value;\n    }\n    destroy() {\n        super.destroy();\n        this._eventListenersManager.reset();\n    }\n    createRootElement() {\n        const rootElement = document.createElement('div');\n        Object.assign(rootElement.style, {\n            position: 'relative',\n            fontSize: '0',\n            width: '100%',\n            height: '100%',\n        });\n        return rootElement;\n    }\n    onContainerResize() {\n        super.onContainerResize();\n        this.updateTicksBar();\n        this._canvas.size = this.containerSize;\n    }\n    getVOIMultipliers() {\n        return [DEFAULTS.MULTIPLIER, DEFAULTS.MULTIPLIER];\n    }\n    onVoiChange(voiRange) {\n    }\n    showTicks() {\n        this.updateTicksBar();\n        this._ticksBar.visible = true;\n    }\n    hideTicks() {\n        if (this._isInteracting || this._isMouseOver) {\n            return;\n        }\n        this._ticksBar.visible = false;\n    }\n    static getColormapsMap(props) {\n        const { colormaps } = props;\n        return colormaps.reduce((items, item) => items.set(item.Name, item), new Map());\n    }\n    static getInitialColormapName(props) {\n        const { activeColormapName, colormaps } = props;\n        const colormapExists = !!activeColormapName &&\n            colormaps.some((cm) => cm.Name === activeColormapName);\n        return colormapExists ? activeColormapName : colormaps[0].Name;\n    }\n    _createCanvas(props) {\n        const { imageRange, voiRange, showFullPixelValueRange } = props;\n        const colormap = this._colormaps.get(this._activeColormapName);\n        return new ColorbarCanvas({\n            colormap,\n            imageRange,\n            voiRange: voiRange,\n            showFullPixelValueRange,\n        });\n    }\n    _createTicksBar(props) {\n        const ticksProps = props.ticks;\n        return new ColorbarTicks({\n            imageRange: props.imageRange,\n            voiRange: props.voiRange,\n            ticks: ticksProps,\n            showFullPixelValueRange: props.showFullPixelValueRange,\n        });\n    }\n    _getPointsFromMouseEvent(evt) {\n        const { rootElement: element } = this;\n        const clientPoint = [evt.clientX, evt.clientY];\n        const pagePoint = [evt.pageX, evt.pageY];\n        const rect = element.getBoundingClientRect();\n        const localPoints = [\n            pagePoint[0] - rect.left - window.pageXOffset,\n            pagePoint[1] - rect.top - window.pageYOffset,\n        ];\n        return { client: clientPoint, page: pagePoint, local: localPoints };\n    }\n    updateTicksBar() {\n        const { width: containerWidth, height: containerHeight } = this.containerSize;\n        if (containerWidth === 0 && containerHeight === 0) {\n            return;\n        }\n        const { _ticksBar: ticksBar, _rangeTextPosition: rangeTextPosition } = this;\n        const isHorizontal = containerWidth >= containerHeight;\n        const width = isHorizontal ? containerWidth : DEFAULTS.TICKS_BAR_SIZE;\n        const height = isHorizontal ? DEFAULTS.TICKS_BAR_SIZE : containerHeight;\n        if (!isRangeTextPositionValid(containerWidth, containerHeight, rangeTextPosition)) {\n            throw new Error('Invalid rangeTextPosition value for the current colobar orientation');\n        }\n        let ticksBarTop;\n        let ticksBarLeft;\n        ticksBar.size = { width, height };\n        if (isHorizontal) {\n            ticksBarLeft = 0;\n            ticksBarTop =\n                rangeTextPosition === ColorbarRangeTextPosition.Top\n                    ? -height\n                    : containerHeight;\n        }\n        else {\n            ticksBarTop = 0;\n            ticksBarLeft =\n                rangeTextPosition === ColorbarRangeTextPosition.Left\n                    ? -width\n                    : containerWidth;\n        }\n        ticksBar.top = ticksBarTop;\n        ticksBar.left = ticksBarLeft;\n    }\n    _addRootElementEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        const { rootElement: element } = this;\n        manager.addEventListener(element, 'mouseover', this._mouseOverCallback);\n        manager.addEventListener(element, 'mouseout', this._mouseOutCallback);\n        manager.addEventListener(element, 'mousedown', this._mouseDownCallback);\n    }\n    _addVOIEventListeners(evt) {\n        const { _eventListenersManager: manager } = this;\n        const points = this._getPointsFromMouseEvent(evt);\n        const voiRange = { ...this._canvas.voiRange };\n        const initialDragState = { points, voiRange };\n        this._removeVOIEventListeners();\n        manager.addEventListener(document, 'voi.mouseup', this._mouseUpCallback);\n        manager.addEventListener(document, 'voi.mousemove', (evt) => this._mouseDragCallback(evt, initialDragState));\n    }\n    _removeVOIEventListeners() {\n        const { _eventListenersManager: manager } = this;\n        manager.removeEventListener(document, 'voi.mouseup');\n        manager.removeEventListener(document, 'voi.mousemove');\n    }\n}\nexport { Colorbar as default, Colorbar };\n","import { eventTarget, VolumeViewport, StackViewport, Enums, utilities, getEnabledElement, cache, } from '@cornerstonejs/core';\nimport { Colorbar } from './Colorbar';\nimport { getVOIMultipliers } from '../../getVOIMultipliers';\nconst { Events } = Enums;\nconst defaultImageRange = { lower: -1000, upper: 1000 };\nclass ViewportColorbar extends Colorbar {\n    constructor(props) {\n        const { element, volumeId } = props;\n        const imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        const voiRange = ViewportColorbar._getVOIRange(element, volumeId);\n        super({ ...props, imageRange, voiRange });\n        this.autoHideTicks = () => {\n            if (this._hideTicksTimeoutId) {\n                return;\n            }\n            const timeLeft = this._hideTicksTime - Date.now();\n            if (timeLeft <= 0) {\n                this.hideTicks();\n            }\n            else {\n                this._hideTicksTimeoutId = window.setTimeout(() => {\n                    this._hideTicksTimeoutId = 0;\n                    this.autoHideTicks();\n                }, timeLeft);\n            }\n        };\n        this._stackNewImageCallback = () => {\n            this.imageRange = ViewportColorbar._getImageRange(this._element);\n        };\n        this._imageVolumeModifiedCallback = (evt) => {\n            const { volumeId } = evt.detail;\n            if (volumeId !== this._volumeId) {\n                return;\n            }\n            const { _element: element } = this;\n            this.imageRange = ViewportColorbar._getImageRange(element, volumeId);\n        };\n        this._viewportVOIModifiedCallback = (evt) => {\n            const { viewportId, volumeId, range: voiRange, colormap } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.voiRange = voiRange;\n            if (colormap) {\n                this.activeColormapName = colormap.name;\n            }\n            this.showAndAutoHideTicks();\n        };\n        this._viewportColormapModifiedCallback = (evt) => {\n            const { viewportId, colormap, volumeId } = evt.detail;\n            const { viewport } = this.enabledElement;\n            if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n                return;\n            }\n            this.activeColormapName = colormap.name;\n        };\n        this._element = element;\n        this._volumeId = volumeId;\n        this._addCornerstoneEventListener();\n    }\n    get element() {\n        return this._element;\n    }\n    get enabledElement() {\n        return getEnabledElement(this._element);\n    }\n    getVOIMultipliers() {\n        const { viewport } = this.enabledElement;\n        return getVOIMultipliers(viewport, this._volumeId);\n    }\n    onVoiChange(voiRange) {\n        super.onVoiChange(voiRange);\n        const { viewport } = this.enabledElement;\n        if (viewport instanceof StackViewport) {\n            viewport.setProperties({\n                voiRange: voiRange,\n            });\n            viewport.render();\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { _volumeId: volumeId } = this;\n            const viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(volumeId);\n            viewport.setProperties({ voiRange }, volumeId);\n            viewportsContainingVolumeUID.forEach((vp) => vp.render());\n        }\n    }\n    static _getImageRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const imageData = actor.getMapper().getInputData();\n        const scalarData = imageData.getPointData().getScalars();\n        let imageRange;\n        if (!scalarData) {\n            if (!volumeId) {\n                throw new Error('volumeId is required when scalarData is not available');\n            }\n            const volume = cache.getVolume(volumeId);\n            const [minValue, maxValue] = volume.voxelManager.getRange();\n            imageRange = [minValue, maxValue];\n        }\n        else {\n            imageRange = scalarData.getRange();\n        }\n        return imageRange[0] === 0 && imageRange[1] === 0\n            ? defaultImageRange\n            : { lower: imageRange[0], upper: imageRange[1] };\n    }\n    static _getVOIRange(element, volumeId) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const actor = viewport.getImageActor(volumeId);\n        if (!actor) {\n            return defaultImageRange;\n        }\n        const voiRange = actor.getProperty().getRGBTransferFunction(0).getRange();\n        return voiRange[0] === 0 && voiRange[1] === 0\n            ? defaultImageRange\n            : { lower: voiRange[0], upper: voiRange[1] };\n    }\n    showAndAutoHideTicks(interval = 1000) {\n        this._hideTicksTime = Date.now() + interval;\n        this.showTicks();\n        this.autoHideTicks();\n    }\n    _addCornerstoneEventListener() {\n        const { _element: element } = this;\n        eventTarget.addEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.addEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.addEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.addEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n    destroy() {\n        super.destroy();\n        const { _element: element } = this;\n        eventTarget.removeEventListener(Events.IMAGE_VOLUME_MODIFIED, this._imageVolumeModifiedCallback);\n        element.removeEventListener(Events.STACK_NEW_IMAGE, this._stackNewImageCallback);\n        element.removeEventListener(Events.VOI_MODIFIED, this._viewportVOIModifiedCallback);\n        element.removeEventListener(Events.COLORMAP_MODIFIED, this._viewportColormapModifiedCallback);\n    }\n}\nexport { ViewportColorbar as default, ViewportColorbar };\n","import { utilities as csUtils, StackViewport, VolumeViewport, } from '@cornerstonejs/core';\nfunction extractWindowLevelRegionToolData(viewport) {\n    if (viewport instanceof VolumeViewport) {\n        return extractImageDataVolume(viewport);\n    }\n    if (viewport instanceof StackViewport) {\n        return extractImageDataStack(viewport);\n    }\n    throw new Error('Viewport not supported');\n}\nfunction extractImageDataVolume(viewport) {\n    const { scalarData, width, height } = csUtils.getCurrentVolumeViewportSlice(viewport);\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    return {\n        scalarData,\n        minPixelValue,\n        maxPixelValue,\n        width,\n        height,\n        rows: width,\n        columns: height,\n    };\n}\nfunction extractImageDataStack(viewport) {\n    const imageData = viewport.getImageData();\n    const { scalarData } = imageData;\n    const { min: minPixelValue, max: maxPixelValue } = csUtils.getMinMax(scalarData);\n    const width = imageData.dimensions[0];\n    const height = imageData.dimensions[1];\n    const { rows, columns, color } = viewport.getCornerstoneImage();\n    return {\n        scalarData,\n        width,\n        height,\n        minPixelValue,\n        maxPixelValue,\n        rows,\n        columns,\n        color,\n    };\n}\nexport { extractWindowLevelRegionToolData };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { pointInSphere } from './math/sphere';\nimport { getBoundingBoxAroundShape } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nexport function pointInSurroundingSphereCallback(imageData, circlePoints, callback, viewport) {\n    const { boundsIJK, centerWorld, radiusWorld } = _getBounds(circlePoints, imageData, viewport);\n    const sphereObj = {\n        center: centerWorld,\n        radius: radiusWorld,\n    };\n    const dimensions = imageData.getDimensions();\n    const voxelManager = csUtils.VoxelManager.createScalarVolumeVoxelManager({\n        dimensions: dimensions,\n        scalarData: imageData.getPointData().getScalars().getData(),\n    });\n    voxelManager.forEach(callback, {\n        boundsIJK,\n        isInObject: (pointLPS) => pointInSphere(sphereObj, pointLPS),\n        imageData,\n    });\n}\nfunction _getBounds(circlePoints, imageData, viewport) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    let boundsIJK;\n    if (!viewport) {\n        const centerIJK = transformWorldToIndex(imageData, centerWorld);\n        const spacings = imageData.getSpacing();\n        const minSpacing = Math.min(...spacings);\n        const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);\n        boundsIJK = [\n            [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],\n            [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],\n            [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],\n        ];\n        return {\n            boundsIJK,\n            centerWorld: centerWorld,\n            radiusWorld,\n        };\n    }\n    boundsIJK = _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n    };\n}\nfunction _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld) {\n    const [bottom, top] = circlePoints;\n    const dimensions = imageData.getDimensions();\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);\n    const sphereCornersIJK = [\n        transformWorldToIndex(imageData, topLeftWorld),\n        (transformWorldToIndex(imageData, bottomRightWorld)),\n    ];\n    const boundsIJK = getBoundingBoxAroundShape(sphereCornersIJK, dimensions);\n    return boundsIJK;\n}\n","import { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../enums';\nexport default function setAnnotationLabel(annotation, element, updatedLabel) {\n    annotation.data.label = updatedLabel;\n    triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n}\n","export function pickPoints(hull, slack = 7) {\n    if (!hull.length) {\n        throw new Error('Convex hull is empty');\n    }\n    const n = hull.length;\n    const next = (i) => (i + 1) % n;\n    const walk = (from, to) => {\n        const idx = [];\n        for (let i = from;; i = next(i)) {\n            idx.push(i);\n            if (i === to) {\n                break;\n            }\n        }\n        return idx;\n    };\n    let i2 = 0, i3 = 0;\n    for (let i = 1; i < n; i++) {\n        if (hull[i][0] < hull[i2][0]) {\n            i2 = i;\n        }\n        if (hull[i][0] > hull[i3][0]) {\n            i3 = i;\n        }\n    }\n    const P2 = hull[i2];\n    const P3 = hull[i3];\n    const pathA = walk(i2, i3);\n    const pathB = walk(i3, i2);\n    const globalYmin = Math.min(...hull.map((p) => p[1]));\n    const upperPath = pathA.some((i) => hull[i][1] === globalYmin)\n        ? pathA\n        : pathB;\n    const topY = Math.min(...upperPath.map((i) => hull[i][1]));\n    let arcPts = upperPath\n        .map((i) => hull[i])\n        .filter((p) => Math.abs(p[1] - topY) <= slack);\n    if (arcPts.length < 2) {\n        arcPts = upperPath\n            .map((i) => hull[i])\n            .sort((a, b) => a[1] - b[1])\n            .slice(0, 2);\n    }\n    const P1 = arcPts.reduce((best, p) => (p[0] < best[0] ? p : best), arcPts[0]);\n    const P4 = arcPts.reduce((best, p) => (p[0] > best[0] ? p : best), arcPts[0]);\n    return { P1, P2, P3, P4 };\n}\nexport function computeEdgeBuffer(buffer, width, height) {\n    const total = width * height;\n    const channels = buffer.length / total;\n    if (![1, 3, 4].includes(channels)) {\n        throw new Error('Buffer must be 1,3 or 4 channels per pixel');\n    }\n    const gray = new Float32Array(total);\n    for (let i = 0; i < total; i++) {\n        if (channels === 1) {\n            gray[i] = buffer[i];\n        }\n        else {\n            const base = i * channels;\n            const r = buffer[base];\n            const g = buffer[base + 1];\n            const b = buffer[base + 2];\n            gray[i] = 0.299 * r + 0.587 * g + 0.114 * b;\n        }\n    }\n    const edgeBuf = new Float32Array(total);\n    for (let y = 1; y < height - 1; y++) {\n        for (let x = 1; x < width - 1; x++) {\n            const idx = y * width + x;\n            const i00 = idx - width - 1;\n            const i01 = idx - width;\n            const i02 = idx - width + 1;\n            const i10 = idx - 1;\n            const i11 = idx;\n            const i12 = idx + 1;\n            const i20 = idx + width - 1;\n            const i21 = idx + width;\n            const i22 = idx + width + 1;\n            const gx = -gray[i00] +\n                gray[i02] +\n                -2 * gray[i10] +\n                2 * gray[i12] +\n                -gray[i20] +\n                gray[i22];\n            const gy = gray[i00] +\n                2 * gray[i01] +\n                gray[i02] -\n                gray[i20] -\n                2 * gray[i21] -\n                gray[i22];\n            edgeBuf[idx] = Math.hypot(gx, gy);\n        }\n    }\n    return edgeBuf;\n}\nexport function refineCornersDirectional(edgeBuf, width, height, rough, contour, opts = {}) {\n    const { maxDist = 15, slack = 2 } = opts;\n    const directions = {\n        P1: { dx: -1, dy: -1 },\n        P2: { dx: -1, dy: +1 },\n        P3: { dx: +1, dy: +1 },\n        P4: { dx: +1, dy: -1 },\n    };\n    function snapQuadrant(pt, { dx, dy }, threshold = 5) {\n        const xmin = dx < 0 ? pt[0] - maxDist : pt[0] - slack;\n        const xmax = dx < 0 ? pt[0] + slack : pt[0] + maxDist;\n        const ymin = dy < 0 ? pt[1] - maxDist : pt[1] - slack;\n        const ymax = dy < 0 ? pt[1] + slack : pt[1] + maxDist;\n        let best = pt;\n        for (const [cx, cy] of contour) {\n            if (cx < xmin || cx > xmax || cy < ymin || cy > ymax) {\n                continue;\n            }\n            const xi = Math.round(cx);\n            const yi = Math.round(cy);\n            if (xi < 0 || xi >= width || yi < 0 || yi >= height) {\n                continue;\n            }\n            const xAlign = (xi - best[0]) * dx;\n            const yAlign = (yi - best[0]) * dy;\n            const v = edgeBuf[yi * width + xi];\n            if (v > threshold && (xAlign > 0 || yAlign > 0)) {\n                best = [cx, cy];\n            }\n        }\n        return best;\n    }\n    return {\n        P1: snapQuadrant(rough.P1, directions.P1),\n        P2: snapQuadrant(rough.P2, directions.P2),\n        P3: snapQuadrant(rough.P3, directions.P3),\n        P4: snapQuadrant(rough.P4, directions.P4),\n    };\n}\nexport function calculateFanShapeCorners(imageBuffer, width, height, hull, roughContour) {\n    const rough = pickPoints(hull);\n    const refined = refineCornersDirectional(imageBuffer, width, height, rough, roughContour, {\n        maxDist: 20,\n        step: 0.5,\n    });\n    return refined;\n}\n","import { intersectLine } from '../../../../utilities/math/line';\nfunction angleRad(center, p) {\n    return Math.atan2(p[1] - center[1], p[0] - center[0]);\n}\nexport function deriveFanGeometry(params) {\n    const { P1, P2, P3, P4 } = params;\n    const centerResult = intersectLine(P1, P2, P4, P3, true);\n    if (!centerResult) {\n        throw new Error('Fan edges appear parallel — no apex found');\n    }\n    const center = centerResult;\n    let startAngle = angleRad(center, P1) * (180 / Math.PI);\n    let endAngle = angleRad(center, P4) * (180 / Math.PI);\n    if (endAngle <= startAngle) {\n        const tempAngle = startAngle;\n        startAngle = endAngle;\n        endAngle = tempAngle;\n    }\n    const d1 = Math.hypot(P1[0] - center[0], P1[1] - center[1]);\n    const d4 = Math.hypot(P4[0] - center[0], P4[1] - center[1]);\n    const d2 = Math.hypot(P2[0] - center[0], P2[1] - center[1]);\n    const d3 = Math.hypot(P3[0] - center[0], P3[1] - center[1]);\n    const innerRadius = Math.min(d1, d4);\n    const outerRadius = Math.max(d2, d3);\n    return {\n        center,\n        startAngle,\n        endAngle,\n        innerRadius,\n        outerRadius,\n    };\n}\n","import { cache } from '@cornerstonejs/core';\nimport { segmentLargestUSOutlineFromBuffer } from './segmentLargestUSOutlineFromBuffer';\nimport { generateConvexHullFromContour } from './generateConvexHullFromContour';\nimport { calculateFanShapeCorners } from './calculateFanShapeCorners';\nimport { deriveFanGeometry } from './deriveFanGeometry';\nexport function exportContourJpeg(pixelData, width, height, contour, opts = {}) {\n    const { strokeStyle = '#f00', lineWidth = 2, quality = 0.92 } = opts;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const totalPixels = width * height;\n    const channels = pixelData.length / totalPixels;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < totalPixels; i++) {\n        const baseIn = i * channels;\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[baseIn];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    if (contour.length > 0) {\n        ctx.strokeStyle = strokeStyle;\n        ctx.lineWidth = lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(contour[0][0] + 0.5, contour[0][1] + 0.5);\n        for (let i = 1; i < contour.length; i++) {\n            ctx.lineTo(contour[i][0] + 0.5, contour[i][1] + 0.5);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    }\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function getPixelData(imageId) {\n    const image = cache.getImage(imageId);\n    if (!image) {\n        return;\n    }\n    const width = image.width;\n    const height = image.height;\n    const pixelData = image.getPixelData();\n    return {\n        pixelData,\n        width,\n        height,\n    };\n}\nexport default function saveBinaryData(url, filename) {\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.click();\n    a.remove();\n}\nfunction exportFanJpeg(pixelData, width, height, fan, opts = {}) {\n    const { center, startAngle: startAngleInDegrees, endAngle: endAngleInDegrees, innerRadius, outerRadius, } = fan;\n    const { strokeStyle = '#0ff', lineWidth = 2, quality = 0.92 } = opts;\n    const startAngle = (startAngleInDegrees * Math.PI) / 180;\n    const endAngle = (endAngleInDegrees * Math.PI) / 180;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const total = width * height;\n    const channels = pixelData.length / total;\n    const imgData = ctx.createImageData(width, height);\n    const out = imgData.data;\n    for (let i = 0; i < total; i++) {\n        const baseOut = i * 4;\n        if (channels === 1) {\n            const v = pixelData[i];\n            out[baseOut] = v;\n            out[baseOut + 1] = v;\n            out[baseOut + 2] = v;\n            out[baseOut + 3] = 255;\n        }\n        else {\n            const baseIn = i * channels;\n            out[baseOut] = pixelData[baseIn];\n            out[baseOut + 1] = pixelData[baseIn + 1];\n            out[baseOut + 2] = pixelData[baseIn + 2];\n            out[baseOut + 3] = channels === 4 ? pixelData[baseIn + 3] : 255;\n        }\n    }\n    ctx.putImageData(imgData, 0, 0);\n    ctx.beginPath();\n    for (let a = startAngle; a <= endAngle; a += 0.01) {\n        const x = center[0] + innerRadius * Math.cos(a);\n        const y = center[1] + innerRadius * Math.sin(a);\n        if (a === startAngle) {\n            ctx.moveTo(x, y);\n        }\n        else {\n            ctx.lineTo(x, y);\n        }\n    }\n    for (let a = endAngle; a >= startAngle; a -= 0.01) {\n        const x = center[0] + outerRadius * Math.cos(a);\n        const y = center[1] + outerRadius * Math.sin(a);\n        ctx.lineTo(x, y);\n    }\n    ctx.closePath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = lineWidth;\n    ctx.stroke();\n    return canvas.toDataURL('image/jpeg', quality);\n}\nexport function downloadFanJpeg(imageId, contourType = 5) {\n    const { contour, simplified, hull, refined, fanGeometry } = calculateFanGeometry(imageId);\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    let jpegDataUrl;\n    if (contourType === 1) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, contour);\n    }\n    else if (contourType === 2) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, simplified);\n    }\n    else if (contourType === 3) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, hull);\n    }\n    else if (contourType === 4) {\n        jpegDataUrl = exportContourJpeg(pixelData, width, height, [\n            refined.P1,\n            refined.P2,\n            refined.P3,\n            refined.P4,\n        ]);\n    }\n    else {\n        jpegDataUrl = exportFanJpeg(pixelData, width, height, fanGeometry, {\n            strokeStyle: '#f00',\n            lineWidth: 3,\n            quality: 0.95,\n        });\n    }\n    saveBinaryData(jpegDataUrl, 'contour.jpg');\n}\nexport function calculateFanGeometry(imageId) {\n    const { pixelData, width, height } = getPixelData(imageId) || {};\n    if (!pixelData) {\n        return;\n    }\n    const contour = segmentLargestUSOutlineFromBuffer(pixelData, width, height);\n    const { simplified, hull } = generateConvexHullFromContour(contour);\n    const refined = calculateFanShapeCorners(pixelData, width, height, hull, simplified);\n    const fanGeometry = deriveFanGeometry({\n        P1: refined.P1,\n        P2: refined.P2,\n        P3: refined.P3,\n        P4: refined.P4,\n    });\n    return { contour, simplified, hull, refined, fanGeometry };\n}\n","import { floodFill } from '../../../../utilities/segmentation';\nexport function segmentLargestUSOutlineFromBuffer(buffer, width, height) {\n    const totalPixels = width * height;\n    const channelCount = buffer.length / totalPixels;\n    if (![1, 3, 4].includes(channelCount)) {\n        throw new Error('Buffer must be 1, 3, or 4 channels per pixel');\n    }\n    const mask = Array.from({ length: height }, () => new Array(width).fill(false));\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            const pixelIndex = y * width + x;\n            const base = pixelIndex * channelCount;\n            let isForeground = false;\n            for (let c = 0; c < Math.min(3, channelCount); c++) {\n                if (buffer[base + c] > 0) {\n                    isForeground = true;\n                    break;\n                }\n            }\n            mask[y][x] = isForeground;\n        }\n    }\n    const labels = Array.from({ length: height }, () => new Array(width).fill(0));\n    let currentLabel = 0;\n    const regionSizes = {};\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (mask[y][x] && labels[y][x] === 0) {\n                currentLabel++;\n                const getter = (px, py) => {\n                    if (px < 0 || px >= width || py < 0 || py >= height) {\n                        return false;\n                    }\n                    return mask[py][px] && labels[py][px] === 0;\n                };\n                let pixelCount = 0;\n                const options = {\n                    onFlood: (px, py) => {\n                        labels[py][px] = currentLabel;\n                        pixelCount++;\n                    },\n                    diagonals: false,\n                };\n                floodFill(getter, [x, y], options);\n                regionSizes[currentLabel] = pixelCount;\n            }\n        }\n    }\n    if (currentLabel === 0) {\n        return [];\n    }\n    const largestLabel = Object.keys(regionSizes).reduce((a, b) => regionSizes[a] > regionSizes[b] ? a : b);\n    function isBorder(x, y) {\n        if (labels[y][x] !== +largestLabel) {\n            return false;\n        }\n        for (const [dx, dy] of [\n            [1, 0],\n            [-1, 0],\n            [0, 1],\n            [0, -1],\n        ]) {\n            const nx = x + dx, ny = y + dy;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                labels[ny][nx] !== +largestLabel) {\n                return true;\n            }\n        }\n        return false;\n    }\n    let start = null;\n    outer: for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            if (isBorder(x, y)) {\n                start = [x, y];\n                break outer;\n            }\n        }\n    }\n    if (!start) {\n        return [];\n    }\n    const dirs = [\n        [1, 0],\n        [1, 1],\n        [0, 1],\n        [-1, 1],\n        [-1, 0],\n        [-1, -1],\n        [0, -1],\n        [1, -1],\n    ];\n    const contour = [];\n    let current = start;\n    let prev = [start[0] - 1, start[1]];\n    do {\n        contour.push([current[0], current[1]]);\n        const dx0 = prev[0] - current[0], dy0 = prev[1] - current[1];\n        let startDir = dirs.findIndex((d) => d[0] === dx0 && d[1] === dy0);\n        if (startDir < 0) {\n            startDir = 0;\n        }\n        let nextPt = null;\n        for (let k = 1; k <= 8; k++) {\n            const [dx, dy] = dirs[(startDir + k) % 8];\n            const nx = current[0] + dx, ny = current[1] + dy;\n            if (nx >= 0 && nx < width && ny >= 0 && ny < height && isBorder(nx, ny)) {\n                nextPt = [nx, ny];\n                const [bdx, bdy] = dirs[(startDir + k - 1 + 8) % 8];\n                prev = [current[0] + bdx, current[1] + bdy];\n                break;\n            }\n        }\n        if (!nextPt) {\n            break;\n        }\n        current = nextPt;\n    } while (current[0] !== start[0] || current[1] !== start[1]);\n    return contour;\n}\n","import { utilities } from '@cornerstonejs/tools';\nexport function generateConvexHullFromContour(contour) {\n    const simplified = utilities.math.polyline.decimate(contour, 2);\n    const hull = utilities.math.polyline.convexHull(simplified);\n    return { simplified, hull };\n}\n","import { utilities, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement, } from './getAnnotationNearPoint';\nimport debounce from './debounce';\nimport throttle from './throttle';\nimport isObject from './isObject';\nimport calibrateImageSpacing from './calibrateImageSpacing';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, } from './getCalibratedUnits';\nimport triggerAnnotationRenderForViewportIds from './triggerAnnotationRenderForViewportIds';\nimport triggerAnnotationRenderForToolGroupIds from './triggerAnnotationRenderForToolGroupIds';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getSphereBoundsInfo } from './getSphereBoundsInfo';\nimport { pointToString } from './pointToString';\nimport AnnotationMultiSlice from './AnnotationMultiSlice';\nimport getViewportForAnnotation from './getViewportForAnnotation';\nimport { annotationHydration, getClosestImageIdForStackViewport, } from './annotationHydration';\nimport * as contours from './contours';\nimport * as segmentation from './segmentation';\nimport * as drawing from './drawing';\nimport * as math from './math';\nimport * as planar from './planar';\nimport * as viewportFilters from './viewportFilters';\nimport * as orientation from './orientation';\nimport * as cine from './cine';\nimport * as boundingBox from './boundingBox';\nimport * as planarFreehandROITool from './planarFreehandROITool';\nimport * as rectangleROITool from './rectangleROITool';\nimport { stackPrefetch, stackContextPrefetch } from './stackPrefetch';\nimport * as viewport from './viewport';\nimport * as touch from './touch';\nimport * as dynamicVolume from './dynamicVolume';\nimport * as polyDataUtils from './polyData/utils';\nimport * as voi from './voi';\nimport * as contourSegmentation from './contourSegmentation';\nimport { pointInSurroundingSphereCallback } from './pointInSurroundingSphereCallback';\nconst roundNumber = utilities.roundNumber;\nimport normalizeViewportPlane from './normalizeViewportPlane';\nimport IslandRemoval from './segmentation/islandRemoval';\nimport { getPixelValueUnits, getPixelValueUnitsImageId, } from './getPixelValueUnits';\nimport * as geometricSurfaceUtils from './geometricSurfaceUtils';\nimport setAnnotationLabel from './setAnnotationLabel';\nimport { moveAnnotationToViewPlane } from './moveAnnotationToViewPlane';\nimport getOrCreateImageVolume from './segmentation/getOrCreateImageVolume';\nimport * as usFanExtraction from '../tools/annotation/UltrasoundPleuraBLineTool/utils/fanExtraction';\nexport { math, planar, viewportFilters, drawing, debounce, dynamicVolume, throttle, orientation, isObject, touch, triggerEvent, calibrateImageSpacing, getCalibratedLengthUnitsAndScale, getCalibratedProbeUnitsAndValue, getCalibratedAspect, getPixelValueUnits, getPixelValueUnitsImageId, segmentation, contours, triggerAnnotationRenderForViewportIds, triggerAnnotationRenderForToolGroupIds, triggerAnnotationRender, getSphereBoundsInfo, getAnnotationNearPoint, getViewportForAnnotation, getAnnotationNearPointOnEnabledElement, viewport, cine, boundingBox, rectangleROITool, planarFreehandROITool, stackPrefetch, stackContextPrefetch, roundNumber, pointToString, polyDataUtils, voi, AnnotationMultiSlice, contourSegmentation, annotationHydration, getClosestImageIdForStackViewport, pointInSurroundingSphereCallback, normalizeViewportPlane, IslandRemoval, geometricSurfaceUtils, usFanExtraction, setAnnotationLabel, moveAnnotationToViewPlane, getOrCreateImageVolume, };\n","import * as math from '../../../utilities/math';\nclass Spline {\n    constructor(props) {\n        this._controlPoints = [];\n        this._invalidated = false;\n        this._length = 0;\n        this._controlPoints = [];\n        this._resolution = props?.resolution ?? 20;\n        this._fixedResolution = props?.fixedResolution ?? false;\n        this._closed = props?.closed ?? false;\n        this._invalidated = true;\n    }\n    get controlPoints() {\n        return this._controlPoints;\n    }\n    get numControlPoints() {\n        return this._controlPoints.length;\n    }\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(resolution) {\n        if (this._fixedResolution || this._resolution === resolution) {\n            return;\n        }\n        this._resolution = resolution;\n        this.invalidated = true;\n    }\n    get fixedResolution() {\n        return this._fixedResolution;\n    }\n    get closed() {\n        return this._closed;\n    }\n    set closed(closed) {\n        if (this._closed === closed) {\n            return;\n        }\n        this._closed = closed;\n        this.invalidated = true;\n    }\n    get aabb() {\n        this._update();\n        return this._aabb;\n    }\n    get length() {\n        this._update();\n        return this._length;\n    }\n    get invalidated() {\n        return this._invalidated;\n    }\n    set invalidated(invalidated) {\n        this._invalidated = invalidated;\n    }\n    hasTangentPoints() {\n        return false;\n    }\n    addControlPoint(point) {\n        this._controlPoints.push([point[0], point[1]]);\n        this.invalidated = true;\n    }\n    addControlPoints(points) {\n        points.forEach((point) => this.addControlPoint(point));\n    }\n    addControlPointAtU(u) {\n        const lineSegment = this._getLineSegmentAt(u);\n        const { start: startPoint, end: endPoint } = lineSegment.points;\n        const curveSegmentIndex = Math.floor(u);\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const t = u - Math.floor(curveSegmentIndex);\n        const controlPointPos = [\n            startPoint[0] + t * (endPoint[0] - startPoint[0]),\n            startPoint[1] + t * (endPoint[1] - startPoint[1]),\n        ];\n        const insertIndex = this._controlPoints.indexOf(curveSegment.controlPoints.p1) + 1;\n        this._controlPoints.splice(insertIndex, 0, controlPointPos);\n        this.invalidated = true;\n        return {\n            index: insertIndex,\n            point: controlPointPos,\n        };\n    }\n    deleteControlPointByIndex(index) {\n        const minControlPoints = this._closed ? 3 : 1;\n        const canDelete = index >= 0 &&\n            index < this._controlPoints.length &&\n            this._controlPoints.length > minControlPoints;\n        if (!canDelete) {\n            return false;\n        }\n        this._controlPoints.splice(index, 1);\n        this.invalidated = true;\n        return true;\n    }\n    clearControlPoints() {\n        this._controlPoints = [];\n        this.invalidated = true;\n    }\n    setControlPoints(points) {\n        this.clearControlPoints();\n        this.addControlPoints(points);\n    }\n    updateControlPoint(index, newControlPoint) {\n        if (index < 0 || index >= this._controlPoints.length) {\n            throw new Error('Index out of bounds');\n        }\n        this._controlPoints[index] = [...newControlPoint];\n        this.invalidated = true;\n    }\n    getControlPoints() {\n        return this._controlPoints.map((controlPoint) => [\n            controlPoint[0],\n            controlPoint[1],\n        ]);\n    }\n    getClosestControlPoint(point) {\n        const controlPoints = this._controlPoints;\n        let minSquaredDist = Infinity;\n        let closestPointIndex = -1;\n        for (let i = 0, len = controlPoints.length; i < len; i++) {\n            const controlPoint = controlPoints[i];\n            const dx = point[0] - controlPoint[0];\n            const dy = point[1] - controlPoint[1];\n            const squaredDist = dx * dx + dy * dy;\n            if (squaredDist < minSquaredDist) {\n                minSquaredDist = squaredDist;\n                closestPointIndex = i;\n            }\n        }\n        return {\n            index: closestPointIndex,\n            point: closestPointIndex === -1\n                ? undefined\n                : [...controlPoints[closestPointIndex]],\n            distance: Math.sqrt(minSquaredDist),\n        };\n    }\n    getClosestControlPointWithinDistance(point, maxDist) {\n        const closestControlPoint = this.getClosestControlPoint(point);\n        return closestControlPoint.distance <= maxDist\n            ? closestControlPoint\n            : undefined;\n    }\n    getClosestPoint(point) {\n        this._update();\n        const curveSegmentsDistInfo = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        if (!curveSegmentsDistInfo.length) {\n            return;\n        }\n        curveSegmentsDistInfo.sort((csA, csB) => csA.distanceSquared - csB.distanceSquared);\n        let closestPoint;\n        let closestPointCurveSegmentIndex = -1;\n        let minDistSquared = Infinity;\n        let minDistCurveSegment;\n        let minDistLineSegment;\n        for (let i = 0; i < curveSegmentsDistInfo.length; i++) {\n            const curveSegmentDistInfo = curveSegmentsDistInfo[i];\n            if (curveSegmentDistInfo.distanceSquared > minDistSquared) {\n                continue;\n            }\n            const { curveSegmentIndex, curveSegment } = curveSegmentDistInfo;\n            const { lineSegments } = curveSegment;\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineSegDistSquared < minDistSquared) {\n                    minDistLineSegment = lineSegment;\n                    closestPointCurveSegmentIndex = curveSegmentIndex;\n                    minDistCurveSegment = curveSegmentDistInfo.curveSegment;\n                    closestPoint = lineSegPoint;\n                    minDistSquared = lineSegDistSquared;\n                }\n            }\n        }\n        const curveSegmentLengthToPoint = minDistLineSegment.previousLineSegmentsLength +\n            math.point.distanceToPoint(minDistLineSegment.points.start, closestPoint);\n        const t = curveSegmentLengthToPoint / minDistCurveSegment.length;\n        const u = closestPointCurveSegmentIndex + t;\n        return {\n            point: closestPoint,\n            uValue: u,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getClosestPointOnControlPointLines(point) {\n        const linePoints = [...this._controlPoints];\n        if (this._closed) {\n            linePoints.push(this._controlPoints[0]);\n        }\n        if (!linePoints.length) {\n            return;\n        }\n        let closestPoint;\n        let minDistSquared = Infinity;\n        let startPoint = linePoints[0];\n        for (let i = 1, len = linePoints.length; i < len; i++) {\n            const endPoint = linePoints[i];\n            const { point: lineSegPoint, distanceSquared: lineSegDistSquared } = math.lineSegment.distanceToPointSquaredInfo(startPoint, endPoint, point);\n            if (lineSegDistSquared < minDistSquared) {\n                closestPoint = lineSegPoint;\n                minDistSquared = lineSegDistSquared;\n            }\n            startPoint = endPoint;\n        }\n        return {\n            point: closestPoint,\n            distance: Math.sqrt(minDistSquared),\n        };\n    }\n    getPolylinePoints() {\n        this._update();\n        return this._convertCurveSegmentsToPolyline(this._curveSegments);\n    }\n    getPreviewPolylinePoints(controlPointPreview, closeDistance) {\n        if (this._closed) {\n            return [];\n        }\n        this._update();\n        const closestControlPoint = this.getClosestControlPointWithinDistance(controlPointPreview, closeDistance);\n        const closeSpline = closestControlPoint?.index === 0;\n        const previewCurveSegments = this.getPreviewCurveSegments(controlPointPreview, closeSpline);\n        return previewCurveSegments?.length\n            ? this._convertCurveSegmentsToPolyline(previewCurveSegments)\n            : [];\n    }\n    isPointNearCurve(point, maxDist) {\n        this._update();\n        const curveSegments = this._getCurveSegmmentsWithinDistance(point, maxDist);\n        const maxDistSquared = maxDist * maxDist;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const { lineSegments } = curveSegments[i];\n            for (let j = 0; j < lineSegments.length; j++) {\n                const lineSegment = lineSegments[j];\n                const lineDistSquared = math.lineSegment.distanceToPointSquared(lineSegment.points.start, lineSegment.points.end, point);\n                if (lineDistSquared <= maxDistSquared) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    containsPoint(point) {\n        this._update();\n        const controlPoints = this._controlPoints;\n        if (controlPoints.length < 3) {\n            return false;\n        }\n        const curveSegments = [...this._curveSegments];\n        const closingCurveSegment = this._getClosingCurveSegmentWithStraightLineSegment();\n        if (closingCurveSegment) {\n            curveSegments.push(closingCurveSegment);\n        }\n        let numIntersections = 0;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const { aabb: curveSegAABB } = curveSegment;\n            const mayIntersectCurveSegment = point[0] <= curveSegAABB.maxX &&\n                point[1] >= curveSegAABB.minY &&\n                point[1] < curveSegAABB.maxY;\n            if (!mayIntersectCurveSegment) {\n                continue;\n            }\n            const { lineSegments } = curveSegment;\n            for (let i = 0; i < lineSegments.length; i++) {\n                const lineSegment = lineSegments[i];\n                const { aabb: lineSegmentAABB } = lineSegment;\n                const mayIntersectLineSegment = point[0] <= lineSegmentAABB.maxX &&\n                    point[1] >= lineSegmentAABB.minY &&\n                    point[1] < lineSegmentAABB.maxY;\n                if (mayIntersectLineSegment) {\n                    const { start: p1, end: p2 } = lineSegment.points;\n                    const isVerticalLine = p1[0] === p2[0];\n                    const xIntersection = ((point[1] - p1[1]) * (p2[0] - p1[0])) / (p2[1] - p1[1]) + p1[0];\n                    numIntersections +=\n                        isVerticalLine || point[0] <= xIntersection ? 1 : 0;\n                }\n            }\n        }\n        return numIntersections % 2 === 1;\n    }\n    _update() {\n        if (!this._invalidated) {\n            return;\n        }\n        const curveSegments = this.getSplineCurves();\n        let length = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        for (let i = 0, len = curveSegments.length; i < len; i++) {\n            const { aabb: curveSegAABB, length: curveSegLength } = curveSegments[i];\n            minX = minX <= curveSegAABB.minX ? minX : curveSegAABB.minX;\n            minY = minY <= curveSegAABB.minY ? minY : curveSegAABB.minY;\n            maxX = maxX >= curveSegAABB.maxX ? maxX : curveSegAABB.maxX;\n            maxY = maxY >= curveSegAABB.maxY ? maxY : curveSegAABB.maxY;\n            length += curveSegLength;\n        }\n        this._curveSegments = curveSegments;\n        this._aabb = { minX, minY, maxX, maxY };\n        this._length = length;\n        this._invalidated = false;\n    }\n    _convertCurveSegmentsToPolyline(curveSegments) {\n        this._update();\n        const polylinePoints = [];\n        curveSegments.forEach(({ lineSegments }, curveSegIndex) => {\n            lineSegments.forEach((lineSegment, lineSegIndex) => {\n                if (curveSegIndex === 0 && lineSegIndex === 0) {\n                    polylinePoints.push([...lineSegment.points.start]);\n                }\n                polylinePoints.push([...lineSegment.points.end]);\n            });\n        });\n        return polylinePoints;\n    }\n    _getCurveSegmmentsDistanceSquaredInfo(point) {\n        this._update();\n        const curveSegmentsDistanceSquared = [];\n        const { _curveSegments: curveSegments } = this;\n        for (let i = 0; i < curveSegments.length; i++) {\n            const curveSegment = curveSegments[i];\n            const distanceSquared = math.aabb.distanceToPointSquared(curveSegment.aabb, point);\n            curveSegmentsDistanceSquared.push({\n                curveSegmentIndex: i,\n                curveSegment,\n                distanceSquared,\n            });\n        }\n        return curveSegmentsDistanceSquared;\n    }\n    _getCurveSegmmentsWithinDistance(point, maxDist) {\n        this._update();\n        const maxDistSquared = maxDist * maxDist;\n        if (math.aabb.distanceToPointSquared(this.aabb, point) > maxDistSquared) {\n            return [];\n        }\n        const curveSegmentsDistance = this._getCurveSegmmentsDistanceSquaredInfo(point);\n        const curveSegmentsWithinRange = [];\n        for (let i = 0, len = curveSegmentsDistance.length; i < len; i++) {\n            const { curveSegment, distanceSquared: curveSegmentDistSquared } = curveSegmentsDistance[i];\n            if (curveSegmentDistSquared <= maxDistSquared) {\n                curveSegmentsWithinRange.push(curveSegment);\n            }\n        }\n        return curveSegmentsWithinRange;\n    }\n    _getLineSegmentAt(u) {\n        this._update();\n        const curveSegmentIndex = Math.floor(u);\n        const t = u - curveSegmentIndex;\n        const curveSegment = this._curveSegments[curveSegmentIndex];\n        const { lineSegments } = curveSegment;\n        const pointLength = curveSegment.length * t;\n        for (let i = 0; i < lineSegments.length; i++) {\n            const lineSegment = lineSegments[i];\n            const lengthEnd = lineSegment.previousLineSegmentsLength + lineSegment.length;\n            if (pointLength >= lineSegment.previousLineSegmentsLength &&\n                pointLength <= lengthEnd) {\n                return lineSegment;\n            }\n        }\n    }\n    _getClosingCurveSegmentWithStraightLineSegment() {\n        if (this.closed) {\n            return;\n        }\n        const controlPoints = this._controlPoints;\n        const startControlPoint = controlPoints[0];\n        const endControlPoint = controlPoints[controlPoints.length - 1];\n        const closingLineSegment = {\n            points: {\n                start: [...startControlPoint],\n                end: [...endControlPoint],\n            },\n            aabb: {\n                minX: Math.min(startControlPoint[0], endControlPoint[0]),\n                minY: Math.min(startControlPoint[1], endControlPoint[1]),\n                maxX: Math.max(startControlPoint[0], endControlPoint[0]),\n                maxY: Math.max(startControlPoint[1], endControlPoint[1]),\n            },\n        };\n        return {\n            aabb: {\n                minX: closingLineSegment.aabb.minX,\n                minY: closingLineSegment.aabb.minY,\n                maxX: closingLineSegment.aabb.maxX,\n                maxY: closingLineSegment.aabb.maxY,\n            },\n            lineSegments: [closingLineSegment],\n        };\n    }\n}\nexport { Spline as default, Spline };\n","import { vec4 } from 'gl-matrix';\nimport { Spline } from './Spline';\nimport * as math from '../../../utilities/math';\nconst MAX_U_ERROR = 1e-8;\nclass CubicSpline extends Spline {\n    getPreviewCurveSegments(controlPointPreview, closeSpline) {\n        const previewNumCurveSegments = this._getNumCurveSegments() + 1;\n        const startCurveSegIndex = Math.max(0, previewNumCurveSegments - 2);\n        const endCurveSegIndex = closeSpline\n            ? previewNumCurveSegments\n            : previewNumCurveSegments - 1;\n        const transformMatrix = this.getTransformMatrix();\n        const controlPoints = [...this.controlPoints];\n        const curveSegments = [];\n        if (!closeSpline) {\n            controlPoints.push(controlPointPreview);\n        }\n        for (let i = startCurveSegIndex; i <= endCurveSegIndex; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix, controlPoints, closeSpline);\n            curveSegments.push(curveSegment);\n        }\n        return curveSegments;\n    }\n    getSplineCurves() {\n        const numCurveSegments = this._getNumCurveSegments();\n        const curveSegments = new Array(numCurveSegments);\n        if (numCurveSegments <= 0) {\n            return [];\n        }\n        const transformMatrix = this.getTransformMatrix();\n        let previousCurveSegmentsLength = 0;\n        for (let i = 0; i < numCurveSegments; i++) {\n            const curveSegment = this._getCurveSegment(i, transformMatrix);\n            curveSegment.previousCurveSegmentsLength = previousCurveSegmentsLength;\n            curveSegments[i] = curveSegment;\n            previousCurveSegmentsLength += curveSegment.length;\n        }\n        return curveSegments;\n    }\n    _getNumCurveSegments(controlPoints = this.controlPoints, closed = this.closed) {\n        return closed\n            ? controlPoints.length\n            : Math.max(0, controlPoints.length - 1);\n    }\n    _getPoint(u, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const uInt = Math.floor(u);\n        let curveSegmentIndex = uInt % numCurveSegments;\n        const t = u - uInt;\n        const curveSegmentIndexOutOfBounds = curveSegmentIndex < 0 || curveSegmentIndex >= numCurveSegments;\n        if (curveSegmentIndexOutOfBounds) {\n            if (this.closed) {\n                curveSegmentIndex =\n                    (numCurveSegments + curveSegmentIndex) % numCurveSegments;\n            }\n            else {\n                return;\n            }\n        }\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const tt = t * t;\n        const ttt = tt * t;\n        const tValues = vec4.fromValues(1, t, tt, ttt);\n        const qValues = vec4.transformMat4(vec4.create(), tValues, transformMatrix);\n        return [\n            vec4.dot(qValues, vec4.fromValues(p0[0], p1[0], p2[0], p3[0])),\n            vec4.dot(qValues, vec4.fromValues(p0[1], p1[1], p2[1], p3[1])),\n        ];\n    }\n    _getCurveSegmentPoints(curveSegmentIndex, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const p1Index = curveSegmentIndex;\n        const p0Index = p1Index - 1;\n        const p2Index = closed ? (p1Index + 1) % numCurveSegments : p1Index + 1;\n        const p3Index = p2Index + 1;\n        const p1 = controlPoints[p1Index];\n        const p2 = controlPoints[p2Index];\n        let p0;\n        let p3;\n        if (p0Index >= 0) {\n            p0 = controlPoints[p0Index];\n        }\n        else {\n            p0 = closed\n                ? controlPoints[controlPoints.length - 1]\n                : math.point.mirror(p2, p1);\n        }\n        if (p3Index < controlPoints.length) {\n            p3 = controlPoints[p3Index];\n        }\n        else {\n            p3 = closed ? controlPoints[0] : math.point.mirror(p1, p2);\n        }\n        return { p0, p1, p2, p3 };\n    }\n    _getLineSegments(curveSegmentIndex, transformMatrix, controlPoints = this.controlPoints, closed = this.closed) {\n        const numCurveSegments = this._getNumCurveSegments(controlPoints, closed);\n        const numLineSegments = this.resolution + 1;\n        const inc = 1 / numLineSegments;\n        const minU = curveSegmentIndex;\n        let maxU = minU + 1;\n        if (!closed && curveSegmentIndex === numCurveSegments - 1) {\n            maxU -= MAX_U_ERROR;\n        }\n        const lineSegments = [];\n        let startPoint;\n        let endPoint;\n        let previousLineSegmentsLength = 0;\n        for (let i = 0, u = minU; i <= numLineSegments; i++, u += inc) {\n            u = u > maxU ? maxU : u;\n            const point = this._getPoint(u, transformMatrix, controlPoints, closed);\n            if (!i) {\n                startPoint = point;\n                continue;\n            }\n            endPoint = point;\n            const dx = endPoint[0] - startPoint[0];\n            const dy = endPoint[1] - startPoint[1];\n            const length = Math.sqrt(dx ** 2 + dy ** 2);\n            const aabb = {\n                minX: startPoint[0] <= endPoint[0] ? startPoint[0] : endPoint[0],\n                maxX: startPoint[0] >= endPoint[0] ? startPoint[0] : endPoint[0],\n                minY: startPoint[1] <= endPoint[1] ? startPoint[1] : endPoint[1],\n                maxY: startPoint[1] >= endPoint[1] ? startPoint[1] : endPoint[1],\n            };\n            lineSegments.push({\n                points: {\n                    start: startPoint,\n                    end: endPoint,\n                },\n                aabb,\n                length,\n                previousLineSegmentsLength,\n            });\n            startPoint = endPoint;\n            previousLineSegmentsLength += length;\n        }\n        return lineSegments;\n    }\n    _getCurveSegment(curveSegmentIndex, transformMatrix = this.getTransformMatrix(), controlPoints = this.controlPoints, closed = this.closed) {\n        const { p0, p1, p2, p3 } = this._getCurveSegmentPoints(curveSegmentIndex, controlPoints, closed);\n        const lineSegments = this._getLineSegments(curveSegmentIndex, transformMatrix, controlPoints, closed);\n        let curveSegmentLength = 0;\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n        lineSegments.forEach(({ aabb: lineSegAABB, length: lineSegLength }) => {\n            minX = Math.min(minX, lineSegAABB.minX);\n            minY = Math.min(minY, lineSegAABB.minY);\n            maxX = Math.max(maxX, lineSegAABB.maxX);\n            maxY = Math.max(maxY, lineSegAABB.maxY);\n            curveSegmentLength += lineSegLength;\n        });\n        return {\n            controlPoints: { p0, p1, p2, p3 },\n            aabb: { minX, minY, maxX, maxY },\n            length: curveSegmentLength,\n            previousCurveSegmentsLength: 0,\n            lineSegments,\n        };\n    }\n}\nexport { CubicSpline as default, CubicSpline };\n","import { mat4 } from 'gl-matrix';\nimport { CubicSpline } from './CubicSpline';\nconst TRANSFORM_MATRIX = mat4.multiplyScalar(mat4.create(), mat4.fromValues(1, 4, 1, 0, -3, 0, 3, 0, 3, -6, 3, 0, -1, 3, -3, 1), 1 / 6);\nclass BSpline extends CubicSpline {\n    getTransformMatrix() {\n        return TRANSFORM_MATRIX;\n    }\n}\nexport { BSpline as default, BSpline };\n","import { CubicSpline } from './CubicSpline';\nclass CardinalSpline extends CubicSpline {\n    constructor(props) {\n        super(props);\n        this._scale = props?.scale ?? 0.5;\n        this._fixedScale = props?.fixedScale ?? false;\n    }\n    get scale() {\n        return this._scale;\n    }\n    set scale(scale) {\n        if (this._fixedScale || this._scale === scale) {\n            return;\n        }\n        this._scale = scale;\n        this.invalidated = true;\n    }\n    get fixedScale() {\n        return this._fixedScale;\n    }\n    getTransformMatrix() {\n        const { scale: s } = this;\n        const s2 = 2 * s;\n        return [\n            0, 1, 0, 0,\n            -s, 0, s, 0,\n            s2, s - 3, 3 - s2, -s,\n            -s, 2 - s, s - 2, s\n        ];\n    }\n}\nexport { CardinalSpline as default, CardinalSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass CatmullRomSpline extends CardinalSpline {\n    constructor() {\n        super({ scale: 0.5, fixedScale: true });\n    }\n}\nexport { CatmullRomSpline as default, CatmullRomSpline };\n","import { CardinalSpline } from './CardinalSpline';\nclass LinearSpline extends CardinalSpline {\n    constructor() {\n        super({ resolution: 0, fixedResolution: true, scale: 0, fixedScale: true });\n    }\n}\nexport { LinearSpline as default, LinearSpline };\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nclass PanTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        if (deltaPointsWorld[0] === 0 &&\n            deltaPointsWorld[1] === 0 &&\n            deltaPointsWorld[2] === 0) {\n            return;\n        }\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Events } from '../enums';\nimport { eventTarget, getEnabledElement, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass TrackballRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            rotateIncrementDegrees: 2,\n            rotateSampleDistanceFactor: 2,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this._hasResolutionChanged = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const actorEntry = viewport.getDefaultActor();\n            const actor = actorEntry.actor;\n            const mapper = actor.getMapper();\n            const hasSampleDistance = 'getSampleDistance' in mapper || 'getCurrentSampleDistance' in mapper;\n            if (!hasSampleDistance) {\n                return true;\n            }\n            const originalSampleDistance = mapper.getSampleDistance();\n            if (!this._hasResolutionChanged) {\n                const { rotateSampleDistanceFactor } = this.configuration;\n                mapper.setSampleDistance(originalSampleDistance * rotateSampleDistanceFactor);\n                this._hasResolutionChanged = true;\n                if (this.cleanUp !== null) {\n                    document.removeEventListener('mouseup', this.cleanUp);\n                }\n                this.cleanUp = () => {\n                    mapper.setSampleDistance(originalSampleDistance);\n                    viewport.render();\n                    this._hasResolutionChanged = false;\n                };\n                document.addEventListener('mouseup', this.cleanUp, { once: true });\n            }\n            return true;\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.onSetToolActive = () => {\n            const subscribeToElementResize = () => {\n                const viewportsInfo = this._getViewportsInfo();\n                viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                    if (!this._resizeObservers.has(viewportId)) {\n                        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId) || { viewport: null };\n                        if (!viewport) {\n                            return;\n                        }\n                        const { element } = viewport;\n                        const resizeObserver = new ResizeObserver(() => {\n                            const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                            if (!element) {\n                                return;\n                            }\n                            const { viewport } = element;\n                            const viewPresentation = viewport.getViewPresentation();\n                            viewport.resetCamera();\n                            viewport.setViewPresentation(viewPresentation);\n                            viewport.render();\n                        });\n                        resizeObserver.observe(element);\n                        this._resizeObservers.set(viewportId, resizeObserver);\n                    }\n                });\n            };\n            subscribeToElementResize();\n            this._viewportAddedListener = (evt) => {\n                if (evt.detail.toolGroupId === this.toolGroupId) {\n                    subscribeToElementResize();\n                }\n            };\n            eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n        };\n        this.onSetToolDisabled = () => {\n            this._resizeObservers.forEach((resizeObserver, viewportId) => {\n                resizeObserver.disconnect();\n                this._resizeObservers.delete(viewportId);\n            });\n            if (this._viewportAddedListener) {\n                eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this._viewportAddedListener);\n                this._viewportAddedListener = null;\n            }\n        };\n        this.rotateCamera = (viewport, centerWorld, axis, angle) => {\n            const vtkCamera = viewport.getVtkActiveCamera();\n            const viewUp = vtkCamera.getViewUp();\n            const focalPoint = vtkCamera.getFocalPoint();\n            const position = vtkCamera.getPosition();\n            const newPosition = [0, 0, 0];\n            const newFocalPoint = [0, 0, 0];\n            const newViewUp = [0, 0, 0];\n            const transform = mat4.identity(new Float32Array(16));\n            mat4.translate(transform, transform, centerWorld);\n            mat4.rotate(transform, transform, angle, axis);\n            mat4.translate(transform, transform, [\n                -centerWorld[0],\n                -centerWorld[1],\n                -centerWorld[2],\n            ]);\n            vec3.transformMat4(newPosition, position, transform);\n            vec3.transformMat4(newFocalPoint, focalPoint, transform);\n            mat4.identity(transform);\n            mat4.rotate(transform, transform, angle, axis);\n            vec3.transformMat4(newViewUp, viewUp, transform);\n            viewport.setCamera({\n                position: newPosition,\n                viewUp: newViewUp,\n                focalPoint: newFocalPoint,\n            });\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, lastPoints } = evt.detail;\n        const currentPointsCanvas = currentPoints.canvas;\n        const lastPointsCanvas = lastPoints.canvas;\n        const { rotateIncrementDegrees } = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const normalizedPosition = [\n            currentPointsCanvas[0] / width,\n            currentPointsCanvas[1] / height,\n        ];\n        const normalizedPreviousPosition = [\n            lastPointsCanvas[0] / width,\n            lastPointsCanvas[1] / height,\n        ];\n        const center = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(center);\n        const normalizedCenter = [0.5, 0.5];\n        const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n        const op = [normalizedPreviousPosition[0], 0, 0];\n        const oe = [normalizedPosition[0], 0, 0];\n        const opsq = op[0] ** 2;\n        const oesq = oe[0] ** 2;\n        const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n        const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n        const nop = [op[0], 0, lop];\n        vtkMath.normalize(nop);\n        const noe = [oe[0], 0, loe];\n        vtkMath.normalize(noe);\n        const dot = vtkMath.dot(nop, noe);\n        if (Math.abs(dot) > 0.0001) {\n            const angleX = -2 *\n                Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n                Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n                rotateIncrementDegrees;\n            const upVec = camera.viewUp;\n            const atV = camera.viewPlaneNormal;\n            const rightV = [0, 0, 0];\n            const forwardV = [0, 0, 0];\n            vtkMath.cross(upVec, atV, rightV);\n            vtkMath.normalize(rightV);\n            vtkMath.cross(atV, rightV, forwardV);\n            vtkMath.normalize(forwardV);\n            vtkMath.normalize(upVec);\n            this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n            const angleY = (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n                rotateIncrementDegrees;\n            this.rotateCamera(viewport, centerWorld, rightV, angleY);\n            viewport.render();\n        }\n    }\n}\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport, cache, utilities, } from '@cornerstonejs/core';\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\nclass WindowLevelTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this._getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n            const middleSliceIndex = Math.floor(dimensions[2] / 2);\n            const frameLength = dimensions[0] * dimensions[1];\n            let bytesPerVoxel;\n            let TypedArrayConstructor;\n            if (scalarData instanceof Float32Array) {\n                bytesPerVoxel = 4;\n                TypedArrayConstructor = Float32Array;\n            }\n            else if (scalarData instanceof Uint8Array) {\n                bytesPerVoxel = 1;\n                TypedArrayConstructor = Uint8Array;\n            }\n            else if (scalarData instanceof Uint16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Uint16Array;\n            }\n            else if (scalarData instanceof Int16Array) {\n                bytesPerVoxel = 2;\n                TypedArrayConstructor = Int16Array;\n            }\n            const buffer = scalarData.buffer;\n            const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n            const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n            const { max, min } = this._getMinMax(frame, frameLength);\n            return max - min;\n        };\n    }\n    touchDragCallback(evt) {\n        this.mouseDragCallback(evt);\n    }\n    mouseDragCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let volumeId, lower, upper, modality, newRange, viewportsContainingVolumeUID;\n        let isPreScaled = false;\n        const properties = viewport.getProperties();\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n            viewportsContainingVolumeUID =\n                utilities.getViewportsWithVolumeId(volumeId);\n            ({ lower, upper } = properties.voiRange);\n            const volume = cache.getVolume(volumeId);\n            if (!volume) {\n                throw new Error('Volume not found ' + volumeId);\n            }\n            modality = volume.metadata.Modality;\n            isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n        }\n        else if (properties.voiRange) {\n            modality = viewport.modality;\n            ({ lower, upper } = properties.voiRange);\n            const { preScale = { scaled: false } } = viewport.getImageData?.() || {};\n            isPreScaled =\n                preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n        }\n        else {\n            throw new Error('Viewport is not a valid type');\n        }\n        if (modality === PT && isPreScaled) {\n            newRange = this.getPTScaledNewRange({\n                deltaPointsCanvas: deltaPoints.canvas,\n                lower,\n                upper,\n                clientHeight: element.clientHeight,\n                isPreScaled,\n                viewport,\n                volumeId,\n            });\n        }\n        else {\n            newRange = this.getNewRange({\n                viewport,\n                deltaPointsCanvas: deltaPoints.canvas,\n                volumeId,\n                lower,\n                upper,\n            });\n        }\n        if (newRange.lower >= newRange.upper) {\n            return;\n        }\n        viewport.setProperties({\n            voiRange: newRange,\n        });\n        viewport.render();\n        if (viewport instanceof VolumeViewport) {\n            viewportsContainingVolumeUID.forEach((vp) => {\n                if (viewport !== vp) {\n                    vp.render();\n                }\n            });\n            return;\n        }\n    }\n    getPTScaledNewRange({ deltaPointsCanvas, lower, upper, clientHeight, viewport, volumeId, isPreScaled, }) {\n        let multiplier = DEFAULT_MULTIPLIER;\n        if (isPreScaled) {\n            multiplier = 5 / clientHeight;\n        }\n        else {\n            multiplier =\n                this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n                    DEFAULT_MULTIPLIER;\n        }\n        const deltaY = deltaPointsCanvas[1];\n        const wcDelta = deltaY * multiplier;\n        upper -= wcDelta;\n        upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n        return { lower, upper };\n    }\n    getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n        const multiplier = this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n            DEFAULT_MULTIPLIER;\n        const wwDelta = deltaPointsCanvas[0] * multiplier;\n        const wcDelta = deltaPointsCanvas[1] * multiplier;\n        let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(lower, upper);\n        windowWidth += wwDelta;\n        windowCenter += wcDelta;\n        windowWidth = Math.max(windowWidth, 1);\n        const voiLutFunction = viewport.getProperties().VOILUTFunction;\n        return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n    }\n    _getMultiplierFromDynamicRange(viewport, volumeId) {\n        let imageDynamicRange;\n        if (volumeId) {\n            const imageVolume = cache.getVolume(volumeId);\n            const { voxelManager } = viewport.getImageData();\n            const middleSlicePixelData = voxelManager.getMiddleSliceData();\n            const calculatedDynamicRange = middleSlicePixelData.reduce((acc, pixel) => {\n                return [Math.min(acc[0], pixel), Math.max(acc[1], pixel)];\n            }, [Infinity, -Infinity]);\n            const BitsStored = imageVolume?.metadata?.BitsStored;\n            const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n            imageDynamicRange = Math.min(calculatedDynamicRange, metadataDynamicRange);\n        }\n        else {\n            imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n        }\n        const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n        return ratio > 1 ? Math.round(ratio) : ratio;\n    }\n    _getImageDynamicRangeFromViewport(viewport) {\n        const { imageData, voxelManager } = viewport.getImageData();\n        if (voxelManager?.getRange) {\n            const range = voxelManager.getRange();\n            return range[1] - range[0];\n        }\n        const dimensions = imageData.getDimensions();\n        if (imageData.getRange) {\n            const imageDataRange = imageData.getRange();\n            return imageDataRange[1] - imageDataRange[0];\n        }\n        let scalarData;\n        if (imageData.getScalarData) {\n            scalarData = imageData.getScalarData();\n        }\n        else {\n            scalarData = imageData.getPointData().getScalars().getData();\n        }\n        if (dimensions[2] !== 1) {\n            return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n        }\n        let range;\n        if (scalarData.getRange) {\n            range = scalarData.getRange();\n        }\n        else {\n            const { min, max } = this._getMinMax(scalarData, scalarData.length);\n            range = [min, max];\n        }\n        return range[1] - range[0];\n    }\n    _getMinMax(frame, frameLength) {\n        let min = Infinity;\n        let max = -Infinity;\n        for (let i = 0; i < frameLength; i++) {\n            const voxel = frame[i];\n            if (voxel < min) {\n                min = voxel;\n            }\n            if (voxel > max) {\n                max = voxel;\n            }\n        }\n        return { max, min };\n    }\n}\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawRect as drawRectSvg } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { windowLevel } from '../utilities/voi';\nclass WindowLevelRegionTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minWindowWidth: 10,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            removeAnnotation(annotation.annotationUID);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationCompleted(annotation);\n            this.applyWindowLevelRegion(annotation, element);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            const DEFAULT_HANDLE_INDEX = 3;\n            points[DEFAULT_HANDLE_INDEX] = [...worldPos];\n            const bottomLeftCanvas = worldToCanvas(points[0]);\n            const topRightCanvas = worldToCanvas(points[3]);\n            const bottomRightCanvas = [\n                topRightCanvas[0],\n                bottomLeftCanvas[1],\n            ];\n            const topLeftCanvas = [\n                bottomLeftCanvas[0],\n                topRightCanvas[1],\n            ];\n            const bottomRightWorld = canvasToWorld(bottomRightCanvas);\n            const topLeftWorld = canvasToWorld(topLeftCanvas);\n            points[1] = bottomRightWorld;\n            points[2] = topLeftWorld;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this.applyWindowLevelRegion = (annotation, element) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const imageData = windowLevel.extractWindowLevelRegionToolData(viewport);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const startCanvas = canvasCoordinates[0];\n            const endCanvas = canvasCoordinates[3];\n            let left = Math.min(startCanvas[0], endCanvas[0]);\n            let top = Math.min(startCanvas[1], endCanvas[1]);\n            let width = Math.abs(startCanvas[0] - endCanvas[0]);\n            let height = Math.abs(startCanvas[1] - endCanvas[1]);\n            left = utilities.clip(left, 0, imageData.width);\n            top = utilities.clip(top, 0, imageData.height);\n            width = Math.floor(Math.min(width, Math.abs(imageData.width - left)));\n            height = Math.floor(Math.min(height, Math.abs(imageData.height - top)));\n            const pixelLuminanceData = windowLevel.getLuminanceFromRegion(imageData, Math.round(left), Math.round(top), width, height);\n            const minMaxMean = windowLevel.calculateMinMaxMean(pixelLuminanceData, imageData.minPixelValue, imageData.maxPixelValue);\n            if (this.configuration.minWindowWidth === undefined) {\n                this.configuration.minWindowWidth = 10;\n            }\n            const windowWidth = Math.max(Math.abs(minMaxMean.max - minMaxMean.min), this.configuration.minWindowWidth);\n            const windowCenter = minMaxMean.mean;\n            const voiLutFunction = viewport.getProperties().VOILUTFunction;\n            const voiRange = utilities.windowLevel.toLowHighRange(windowWidth, windowCenter, voiLutFunction);\n            viewport.setProperties({ voiRange });\n            viewport.render();\n        };\n        this.cancel = () => {\n            return null;\n        };\n        this.isPointNearTool = () => {\n            return null;\n        };\n        this.toolSelectedCallback = () => {\n            return null;\n        };\n        this.handleSelectedCallback = () => {\n            return null;\n        };\n        this._activateModify = () => {\n            return null;\n        };\n        this._deactivateModify = () => {\n            return null;\n        };\n    }\n}\nWindowLevelRegionTool.toolName = 'WindowLevelRegion';\nexport default WindowLevelRegionTool;\n","function getLuminanceFromRegion(imageData, x, y, width, height) {\n    const luminance = [];\n    let index = 0;\n    const pixelData = imageData.scalarData;\n    let spIndex, row, column;\n    if (imageData.color) {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = ((row + y) * imageData.columns + (column + x)) * 4;\n                const red = pixelData[spIndex];\n                const green = pixelData[spIndex + 1];\n                const blue = pixelData[spIndex + 2];\n                luminance[index++] = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n            }\n        }\n    }\n    else {\n        for (row = 0; row < height; row++) {\n            for (column = 0; column < width; column++) {\n                spIndex = (row + y) * imageData.columns + (column + x);\n                luminance[index++] = pixelData[spIndex];\n            }\n        }\n    }\n    return luminance;\n}\nexport { getLuminanceFromRegion };\n","function calculateMinMaxMean(pixelLuminance, globalMin, globalMax) {\n    const numPixels = pixelLuminance.length;\n    let min = globalMax;\n    let max = globalMin;\n    let sum = 0;\n    if (numPixels < 2) {\n        return {\n            min,\n            max,\n            mean: (globalMin + globalMax) / 2,\n        };\n    }\n    for (let index = 0; index < numPixels; index++) {\n        const spv = pixelLuminance[index];\n        min = Math.min(min, spv);\n        max = Math.max(max, spv);\n        sum += spv;\n    }\n    return {\n        min,\n        max,\n        mean: sum / numPixels,\n    };\n}\nexport { calculateMinMaxMean };\n","import { getEnabledElementByIds, getEnabledElement, VolumeViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nclass StackScrollTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            invert: false,\n            debounceIfNotLoaded: true,\n            loop: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.deltaY = 1;\n    }\n    mouseWheelCallback(evt) {\n        this._scroll(evt);\n    }\n    mouseDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    touchDragCallback(evt) {\n        this._dragCallback(evt);\n    }\n    _dragCallback(evt) {\n        this._scrollDrag(evt);\n    }\n    _scrollDrag(evt) {\n        const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n        const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n        const { debounceIfNotLoaded, invert, loop } = this.configuration;\n        const deltaPointY = deltaPoints.canvas[1];\n        let volumeId;\n        if (viewport instanceof VolumeViewport) {\n            volumeId = viewport.getVolumeId();\n        }\n        const pixelsPerImage = this._getPixelPerImage(viewport);\n        const deltaY = deltaPointY + this.deltaY;\n        if (!pixelsPerImage) {\n            return;\n        }\n        if (Math.abs(deltaY) >= pixelsPerImage) {\n            const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n            utilities.scroll(viewport, {\n                delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n                volumeId,\n                debounceLoading: debounceIfNotLoaded,\n                loop: loop,\n            });\n            this.deltaY = deltaY % pixelsPerImage;\n        }\n        else {\n            this.deltaY = deltaY;\n        }\n    }\n    _scroll(evt) {\n        const { wheel, element } = evt.detail;\n        const { direction } = wheel;\n        const { invert } = this.configuration;\n        const { viewport } = getEnabledElement(element);\n        const delta = direction * (invert ? -1 : 1);\n        utilities.scroll(viewport, {\n            delta,\n            debounceLoading: this.configuration.debounceIfNotLoaded,\n            loop: this.configuration.loop,\n            volumeId: viewport instanceof BaseVolumeViewport\n                ? viewport.getVolumeId()\n                : undefined,\n            scrollSlabs: this.configuration.scrollSlabs,\n        });\n    }\n    _getPixelPerImage(viewport) {\n        const { element } = viewport;\n        const numberOfSlices = viewport.getNumberOfSlices();\n        return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n    }\n}\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import { BaseVolumeViewport, getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nclass PlanarRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseWheelCallback = (evt) => {\n            const { element, wheel } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { invert } = this.configuration;\n            const angle = wheel.direction * 10 * (invert ? -1 : 1);\n            this.setAngle(viewport, angle);\n        };\n        this.touchDragCallback = this._dragCallback.bind(this);\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    _dragCallback(evt) {\n        const { element, currentPoints, startPoints } = evt.detail;\n        const currentPointWorld = currentPoints.world;\n        const startPointWorld = startPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const width = element.clientWidth;\n        const height = element.clientHeight;\n        const centerCanvas = [width * 0.5, height * 0.5];\n        const centerWorld = viewport.canvasToWorld(centerCanvas);\n        let angle = angleBetweenLines([startPointWorld, centerWorld], [centerWorld, currentPointWorld]);\n        const { viewPlaneNormal } = camera;\n        const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n        const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n        const cross = vec3.cross(vec3.create(), v1, v2);\n        if (vec3.dot(viewPlaneNormal, cross) > 0) {\n            angle = -angle;\n        }\n        if (Number.isNaN(angle)) {\n            return;\n        }\n        this.setAngle(viewport, angle);\n    }\n    setAngle(viewport, angle) {\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        if (viewport instanceof BaseVolumeViewport) {\n            const rotAngle = (((angle + 360) % 360) * Math.PI) / 180;\n            const rotMat = mat4.identity(new Float32Array(16));\n            mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n            const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n            viewport.setCamera({ viewUp: rotatedViewUp });\n        }\n        else {\n            const { rotation } = viewport.getViewPresentation();\n            viewport.setViewPresentation({\n                rotation: (rotation + angle + 360) % 360,\n            });\n        }\n        viewport.render();\n    }\n}\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { Enums, getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { Events } from '../enums';\nclass ZoomTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            zoomToCenter: false,\n            minZoomScale: 0.001,\n            maxZoomScale: 3000,\n            pinchToZoom: true,\n            pan: true,\n            invert: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const camera = enabledElement.viewport.getCamera();\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            return false;\n        };\n        this.preTouchStartCallback = (evt) => {\n            if (!this.configuration.pinchToZoom) {\n                return this.preMouseDownCallback(evt);\n            }\n        };\n        this._dragParallelProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { parallelScale, focalPoint, position } = camera;\n            const zoomScale = 5 / size[1];\n            const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n            const parallelScaleToSet = (1.0 - k) * parallelScale;\n            let focalPointToSet = focalPoint;\n            let positionToSet = position;\n            if (!this.configuration.zoomToCenter) {\n                const distanceToCanvasCenter = vec3.distance(focalPoint, this.initialMousePosWorld);\n                positionToSet = vec3.scaleAndAdd(vec3.create(), position, this.dirVec, -distanceToCanvasCenter * k);\n                focalPointToSet = vec3.scaleAndAdd(vec3.create(), focalPoint, this.dirVec, -distanceToCanvasCenter * k);\n            }\n            const imageData = viewport.getImageData();\n            let spacing = [1, 1, 1];\n            let cappedParallelScale = parallelScaleToSet;\n            let thresholdExceeded = false;\n            if (imageData) {\n                spacing = imageData.spacing;\n                const { dimensions } = imageData;\n                const imageWidth = dimensions[0] * spacing[0];\n                const imageHeight = dimensions[1] * spacing[1];\n                const canvasAspect = size[0] / size[1];\n                const displayArea = viewport.options?.displayArea;\n                const imageAreaScaleX = displayArea?.imageArea?.[0] ?? 1.1;\n                const imageAreaScaleY = displayArea?.imageArea?.[1] ?? 1.1;\n                const scaledImageWidth = imageWidth * imageAreaScaleX;\n                const scaledImageHeight = imageHeight * imageAreaScaleY;\n                const scaledImageAspect = scaledImageWidth / scaledImageHeight;\n                let minParallelScaleRequired;\n                if (scaledImageAspect > canvasAspect) {\n                    minParallelScaleRequired = (scaledImageWidth / canvasAspect) * 0.5;\n                }\n                else {\n                    minParallelScaleRequired = scaledImageHeight * 0.5;\n                }\n                const { minZoomScale, maxZoomScale } = this.configuration;\n                const minScaleInWorld = minParallelScaleRequired / maxZoomScale;\n                const maxScaleInWorld = minParallelScaleRequired / minZoomScale;\n                if (parallelScaleToSet < minScaleInWorld) {\n                    cappedParallelScale = minScaleInWorld;\n                    thresholdExceeded = true;\n                }\n                else if (parallelScaleToSet > maxScaleInWorld) {\n                    cappedParallelScale = maxScaleInWorld;\n                    thresholdExceeded = true;\n                }\n            }\n            viewport.setCamera({\n                parallelScale: cappedParallelScale,\n                focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n                position: thresholdExceeded ? position : positionToSet,\n            });\n        };\n        this._dragPerspectiveProjection = (evt, viewport, camera, pinch = false) => {\n            const { element, deltaPoints } = evt.detail;\n            const deltaY = pinch\n                ? evt.detail.deltaDistance.canvas\n                : deltaPoints.canvas[1];\n            const size = [element.clientWidth, element.clientHeight];\n            const { position, focalPoint, viewPlaneNormal } = camera;\n            const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n            const zoomScale = Math.sqrt(distance) / size[1];\n            const directionOfProjection = [\n                -viewPlaneNormal[0],\n                -viewPlaneNormal[1],\n                -viewPlaneNormal[2],\n            ];\n            const k = this.configuration.invert\n                ? deltaY / zoomScale\n                : deltaY * zoomScale;\n            let tmp = k * directionOfProjection[0];\n            position[0] += tmp;\n            focalPoint[0] += tmp;\n            tmp = k * directionOfProjection[1];\n            position[1] += tmp;\n            focalPoint[1] += tmp;\n            tmp = k * directionOfProjection[2];\n            position[2] += tmp;\n            focalPoint[2] += tmp;\n            viewport.setCamera({ position, focalPoint });\n        };\n        this.initialMousePosWorld = [0, 0, 0];\n        this.dirVec = [0, 0, 0];\n        if (this.configuration.pinchToZoom) {\n            this.touchDragCallback = this._pinchCallback.bind(this);\n        }\n        else {\n            this.touchDragCallback = this._dragCallback.bind(this);\n        }\n        this.mouseDragCallback = this._dragCallback.bind(this);\n    }\n    mouseWheelCallback(evt) {\n        this._zoom(evt);\n    }\n    _pinchCallback(evt) {\n        const pointsList = evt.detail\n            .currentPointsList;\n        if (pointsList.length > 1) {\n            const { element, currentPoints } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const worldPos = currentPoints.world;\n            const { focalPoint } = camera;\n            this.initialMousePosWorld = worldPos;\n            let dirVec = vec3.fromValues(focalPoint[0] - worldPos[0], focalPoint[1] - worldPos[1], focalPoint[2] - worldPos[2]);\n            dirVec = vec3.normalize(vec3.create(), dirVec);\n            this.dirVec = dirVec;\n            if (camera.parallelProjection) {\n                this._dragParallelProjection(evt, viewport, camera, true);\n            }\n            else {\n                this._dragPerspectiveProjection(evt, viewport, camera, true);\n            }\n            viewport.render();\n        }\n        if (this.configuration.pan) {\n            this._panCallback(evt);\n        }\n    }\n    _dragCallback(evt) {\n        const { element } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        if (camera.parallelProjection) {\n            this._dragParallelProjection(evt, viewport, camera);\n        }\n        else {\n            this._dragPerspectiveProjection(evt, viewport, camera);\n        }\n        viewport.render();\n    }\n    _zoom(evt) {\n        const { element, points } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const wheelData = evt.detail.wheel;\n        const direction = wheelData.direction;\n        const eventDetails = {\n            detail: {\n                element,\n                eventName: Events.MOUSE_WHEEL,\n                renderingEngineId: enabledElement.renderingEngineId,\n                viewportId: viewport.id,\n                camera: {},\n                deltaPoints: {\n                    page: points.page,\n                    client: points.client,\n                    world: points.world,\n                    canvas: [0, -direction * 5],\n                },\n                startPoints: points,\n                lastPoints: points,\n                currentPoints: points,\n            },\n        };\n        if (viewport.type === Enums.ViewportType.STACK) {\n            this.preMouseDownCallback(eventDetails);\n        }\n        this._dragCallback(eventDetails);\n    }\n    _panCallback(evt) {\n        const { element, deltaPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const deltaPointsWorld = deltaPoints.world;\n        const camera = enabledElement.viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        enabledElement.viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        enabledElement.viewport.render();\n    }\n}\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport { utilities } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass MIPJumpToClickTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            targetViewportIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseClickCallback(evt) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const volumeId = viewport.getVolumeId();\n        if (!volumeId) {\n            throw new Error(`MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`);\n        }\n        let maxIntensity = -Infinity;\n        const maxFn = (intensity, point) => {\n            if (intensity > maxIntensity) {\n                maxIntensity = intensity;\n                return point;\n            }\n        };\n        const brightestPoint = getPointInLineOfSightWithCriteria(viewport, currentPoints.world, volumeId, maxFn);\n        if (!brightestPoint || !brightestPoint.length) {\n            return;\n        }\n        const { targetViewportIds, toolGroupId } = this.configuration;\n        const viewports = renderingEngine.getViewports().filter((vp) => {\n            if (targetViewportIds?.indexOf(vp.id) >= 0) {\n                return true;\n            }\n            const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n            if (toolGroupId && toolGroupId === foundToolGroup?.id) {\n                return true;\n            }\n            return false;\n        });\n        viewports.forEach((viewport) => {\n            if (viewport instanceof VolumeViewport) {\n                viewport.jumpToWorld(brightestPoint);\n            }\n            else {\n                console.warn('Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport');\n            }\n        });\n    }\n}\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\nimport { AnnotationTool } from './base';\nimport { getEnabledElementByIds, getEnabledElement, utilities as csUtils, Enums, CONSTANTS, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { getToolGroup, getToolGroupForViewport, } from '../store/ToolGroupManager';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLine as drawLineSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\nimport * as lineSegment from '../utilities/math/line';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nconst { RENDERING_DEFAULTS } = CONSTANTS;\nfunction defaultReferenceLineColor() {\n    return 'rgb(0, 200, 0)';\n}\nfunction defaultReferenceLineControllable() {\n    return true;\n}\nfunction defaultReferenceLineDraggableRotatable() {\n    return true;\n}\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n    return true;\n}\nconst OPERATION = {\n    DRAG: 1,\n    ROTATE: 2,\n    SLAB: 3,\n};\nconst EPSILON = 1e-3;\nclass CrosshairsTool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse'],\n        configuration: {\n            shadow: true,\n            viewportIndicators: false,\n            viewportIndicatorsConfig: {\n                radius: 5,\n                x: null,\n                y: null,\n            },\n            autoPan: {\n                enabled: false,\n                panSize: 10,\n            },\n            handleRadius: 3,\n            enableHDPIHandles: false,\n            referenceLinesCenterGapRadius: 20,\n            filterActorUIDsToSetSlabThickness: [],\n            slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n            mobile: {\n                enabled: false,\n                opacity: 0.8,\n                handleRadius: 9,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.toolCenter = [0, 0, 0];\n        this.initializeViewport = ({ renderingEngineId, viewportId, }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const { FrameOfReferenceUID, viewport } = enabledElement;\n            const { element } = viewport;\n            const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n            let annotations = this._getAnnotations(enabledElement);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (annotations?.length) {\n                removeAnnotation(annotations[0].annotationUID);\n            }\n            const annotation = {\n                highlighted: false,\n                metadata: {\n                    cameraPosition: [...position],\n                    cameraFocalPoint: [...focalPoint],\n                    FrameOfReferenceUID,\n                    toolName: this.getToolName(),\n                },\n                data: {\n                    handles: {\n                        rotationPoints: [],\n                        slabThicknessPoints: [],\n                        toolCenter: this.toolCenter,\n                    },\n                    activeOperation: null,\n                    activeViewportIds: [],\n                    viewportId,\n                },\n            };\n            addAnnotation(annotation, element);\n            return {\n                normal: viewPlaneNormal,\n                point: viewport.canvasToWorld([\n                    viewport.canvas.clientWidth / 2,\n                    viewport.canvas.clientHeight / 2,\n                ]),\n            };\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resetCrosshairs = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            for (const viewportInfo of viewportsInfo) {\n                const { viewportId, renderingEngineId } = viewportInfo;\n                const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n                const viewport = enabledElement.viewport;\n                const resetPan = true;\n                const resetZoom = true;\n                const resetToCenter = true;\n                const resetRotation = true;\n                const suppressEvents = true;\n                viewport.resetCamera({\n                    resetPan,\n                    resetZoom,\n                    resetToCenter,\n                    resetRotation,\n                    suppressEvents,\n                });\n                viewport.resetSlabThickness();\n                const { element } = viewport;\n                let annotations = this._getAnnotations(enabledElement);\n                annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n                if (annotations.length) {\n                    removeAnnotation(annotations[0].annotationUID);\n                }\n                viewport.render();\n            }\n            this._computeToolCenter(viewportsInfo);\n        };\n        this.computeToolCenter = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._computeToolCenter = (viewportsInfo) => {\n            if (!viewportsInfo.length || viewportsInfo.length === 1) {\n                console.warn('For crosshairs to operate, at least two viewports must be given.');\n                return;\n            }\n            const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n            const { normal: normal1, point: point1 } = this.initializeViewport(firstViewport);\n            const { normal: normal2, point: point2 } = this.initializeViewport(secondViewport);\n            let normal3 = [0, 0, 0];\n            let point3 = vec3.create();\n            if (thirdViewport) {\n                ({ normal: normal3, point: point3 } =\n                    this.initializeViewport(thirdViewport));\n            }\n            else {\n                vec3.add(point3, point1, point2);\n                vec3.scale(point3, point3, 0.5);\n                vec3.cross(normal3, normal1, normal2);\n            }\n            const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n            const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n            const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n            const toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane);\n            this.setToolCenter(toolCenter);\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const jumpWorld = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this._jump(enabledElement, jumpWorld);\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(viewport.element, annotations);\n            const { data } = filteredAnnotations[0];\n            const { rotationPoints } = data.handles;\n            const viewportIdArray = [];\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                if (!viewportControllable || !viewportDraggableRotatable) {\n                    continue;\n                }\n                viewportIdArray.push(otherViewport.id);\n                i++;\n            }\n            data.activeViewportIds = [...viewportIdArray];\n            data.handles.activeOperation = OPERATION.DRAG;\n            evt.preventDefault();\n            hideElementCursor(element);\n            this._activateModify(element);\n            return filteredAnnotations[0];\n        };\n        this.cancel = () => {\n            console.log('Not implemented yet');\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const viewport = enabledElement.viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const currentCamera = viewport.getCamera();\n            const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n            const deltaCameraPosition = [0, 0, 0];\n            vtkMath.subtract(currentCamera.position, oldCameraPosition, deltaCameraPosition);\n            const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(currentCamera.focalPoint, oldCameraFocalPoint, deltaCameraFocalPoint);\n            viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n            viewportAnnotation.metadata.cameraFocalPoint = [\n                ...currentCamera.focalPoint,\n            ];\n            const viewportControllable = this._getReferenceLineControllable(viewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(viewport.id);\n            if (!csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n                viewportControllable &&\n                viewportDraggableRotatable) {\n                let isRotation = false;\n                const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(deltaCameraPosition, deltaCameraFocalPoint, 1e-3);\n                if (!cameraModifiedSameForPosAndFocalPoint) {\n                    isRotation = true;\n                }\n                const cameraModifiedInPlane = Math.abs(vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)) < 1e-2;\n                if (!isRotation && !cameraModifiedInPlane) {\n                    this.toolCenter[0] += deltaCameraPosition[0];\n                    this.toolCenter[1] += deltaCameraPosition[1];\n                    this.toolCenter[2] += deltaCameraPosition[2];\n                    triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                        toolGroupId: this.toolGroupId,\n                        toolCenter: this.toolCenter,\n                    });\n                }\n            }\n            if (this.configuration.autoPan?.enabled) {\n                const toolGroup = getToolGroupForViewport(viewport.id, renderingEngine.id);\n                const otherViewportIds = toolGroup\n                    .getViewportIds()\n                    .filter((id) => id !== viewport.id);\n                otherViewportIds.forEach((viewportId) => {\n                    this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n                });\n            }\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onResetCamera = (evt) => {\n            this.resetCrosshairs();\n        };\n        this.mouseMoveCallback = (evt, filteredToolAnnotations) => {\n            const { element, currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            let imageNeedsUpdate = false;\n            for (let i = 0; i < filteredToolAnnotations.length; i++) {\n                const annotation = filteredToolAnnotations[i];\n                if (isAnnotationLocked(annotation.annotationUID)) {\n                    continue;\n                }\n                const { data, highlighted } = annotation;\n                if (!data.handles) {\n                    continue;\n                }\n                const previousActiveOperation = data.handles.activeOperation;\n                const previousActiveViewportIds = data.activeViewportIds && data.activeViewportIds.length > 0\n                    ? [...data.activeViewportIds]\n                    : [];\n                data.activeViewportIds = [];\n                data.handles.activeOperation = null;\n                const handleNearImagePoint = this.getHandleNearImagePoint(element, annotation, canvasCoords, 6);\n                let near = false;\n                if (handleNearImagePoint) {\n                    near = true;\n                }\n                else {\n                    near = this._pointNearTool(element, annotation, canvasCoords, 6);\n                }\n                const nearToolAndNotMarkedActive = near && !highlighted;\n                const notNearToolAndMarkedActive = !near && highlighted;\n                if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n                    annotation.highlighted = !highlighted;\n                    imageNeedsUpdate = true;\n                }\n                else if (data.handles.activeOperation !== previousActiveOperation ||\n                    !this._areViewportIdArraysEqual(data.activeViewportIds, previousActiveViewportIds)) {\n                    imageNeedsUpdate = true;\n                }\n            }\n            return imageNeedsUpdate;\n        };\n        this.filterInteractableAnnotationsForElement = (element, annotations) => {\n            if (!annotations || !annotations.length) {\n                return [];\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewportId } = enabledElement;\n            const viewportUIDSpecificCrosshairs = annotations.filter((annotation) => annotation.data.viewportId === viewportId);\n            return viewportUIDSpecificCrosshairs;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, renderingEngine } = enabledElement;\n            const { element } = viewport;\n            const annotations = this._getAnnotations(enabledElement);\n            const camera = viewport.getCamera();\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!annotations?.length || !viewportAnnotation?.data) {\n                return renderStatus;\n            }\n            const annotationUID = viewportAnnotation.annotationUID;\n            const { clientWidth, clientHeight } = viewport.canvas;\n            const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n            const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n            const data = viewportAnnotation.data;\n            const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n            const otherViewportAnnotations = this._filterAnnotationsByUniqueViewportOrientations(enabledElement, annotations);\n            const referenceLines = [];\n            const canvasBox = [0, 0, clientWidth, clientHeight];\n            otherViewportAnnotations.forEach((annotation) => {\n                const { data } = annotation;\n                data.handles.toolCenter = this.toolCenter;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                const { clientWidth, clientHeight } = otherViewport.canvas;\n                const otherCanvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n                const otherCanvasCenter = [\n                    clientWidth * 0.5,\n                    clientHeight * 0.5,\n                ];\n                const otherViewportCenterWorld = otherViewport.canvasToWorld(otherCanvasCenter);\n                const direction = [0, 0, 0];\n                vtkMath.cross(camera.viewPlaneNormal, otherCamera.viewPlaneNormal, direction);\n                vtkMath.normalize(direction);\n                vtkMath.multiplyScalar(direction, otherCanvasDiagonalLength);\n                const pointWorld0 = [0, 0, 0];\n                vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n                const pointWorld1 = [0, 0, 0];\n                vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n                const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n                const otherViewportCenterCanvas = viewport.worldToCanvas(otherViewportCenterWorld);\n                const canvasUnitVectorFromCenter = vec2.create();\n                vec2.subtract(canvasUnitVectorFromCenter, pointCanvas0, otherViewportCenterCanvas);\n                vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n                const canvasVectorFromCenterLong = vec2.create();\n                vec2.scale(canvasVectorFromCenterLong, canvasUnitVectorFromCenter, canvasDiagonalLength * 100);\n                const canvasVectorFromCenterMid = vec2.create();\n                vec2.scale(canvasVectorFromCenterMid, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.4);\n                const canvasVectorFromCenterShort = vec2.create();\n                vec2.scale(canvasVectorFromCenterShort, canvasUnitVectorFromCenter, canvasMinDimensionLength * 0.2);\n                const canvasVectorFromCenterStart = vec2.create();\n                const centerGap = this.configuration.referenceLinesCenterGapRadius;\n                vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, otherViewportAnnotations.length === 2 ? centerGap : 0);\n                const refLinePointOne = vec2.create();\n                const refLinePointTwo = vec2.create();\n                const refLinePointThree = vec2.create();\n                const refLinePointFour = vec2.create();\n                let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n                    refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n                }\n                vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n                vec2.subtract(refLinePointThree, refLinesCenter, canvasVectorFromCenterStart);\n                vec2.subtract(refLinePointFour, refLinesCenter, canvasVectorFromCenterLong);\n                liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n                liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n                const rotHandleOne = vec2.create();\n                vec2.subtract(rotHandleOne, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                const rotHandleTwo = vec2.create();\n                vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n                let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n                }\n                let stHandlesCenterWorld = [...this.toolCenter];\n                if (!otherViewportDraggableRotatable &&\n                    otherViewportSlabThicknessControlsOn) {\n                    stHandlesCenterWorld = [...otherViewportCenterWorld];\n                }\n                const worldUnitVectorFromCenter = [0, 0, 0];\n                vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n                vtkMath.normalize(worldUnitVectorFromCenter);\n                const { viewPlaneNormal } = camera;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromDegree()\n                    .rotate(90, viewPlaneNormal);\n                const worldUnitOrthoVectorFromCenter = [0, 0, 0];\n                vec3.transformMat4(worldUnitOrthoVectorFromCenter, worldUnitVectorFromCenter, matrix);\n                const slabThicknessValue = otherViewport.getSlabThickness();\n                const worldOrthoVectorFromCenter = [\n                    ...worldUnitOrthoVectorFromCenter,\n                ];\n                vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n                const worldVerticalRefPoint = [0, 0, 0];\n                vtkMath.add(stHandlesCenterWorld, worldOrthoVectorFromCenter, worldVerticalRefPoint);\n                const canvasVerticalRefPoint = viewport.worldToCanvas(worldVerticalRefPoint);\n                const canvasOrthoVectorFromCenter = vec2.create();\n                vec2.subtract(canvasOrthoVectorFromCenter, stHandlesCenterCanvas, canvasVerticalRefPoint);\n                const stLinePointOne = vec2.create();\n                vec2.subtract(stLinePointOne, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n                const stLinePointTwo = vec2.create();\n                vec2.add(stLinePointTwo, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n                const stLinePointThree = vec2.create();\n                vec2.add(stLinePointThree, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointThree, stLinePointThree, canvasOrthoVectorFromCenter);\n                const stLinePointFour = vec2.create();\n                vec2.subtract(stLinePointFour, stHandlesCenterCanvas, canvasVectorFromCenterLong);\n                vec2.subtract(stLinePointFour, stLinePointFour, canvasOrthoVectorFromCenter);\n                liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n                const stHandleOne = vec2.create();\n                const stHandleTwo = vec2.create();\n                const stHandleThree = vec2.create();\n                const stHandleFour = vec2.create();\n                vec2.subtract(stHandleOne, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n                vec2.subtract(stHandleThree, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n                vec2.add(stHandleFour, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n                vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n                referenceLines.push([\n                    otherViewport,\n                    refLinePointOne,\n                    refLinePointTwo,\n                    refLinePointThree,\n                    refLinePointFour,\n                    stLinePointOne,\n                    stLinePointTwo,\n                    stLinePointThree,\n                    stLinePointFour,\n                    rotHandleOne,\n                    rotHandleTwo,\n                    stHandleOne,\n                    stHandleTwo,\n                    stHandleThree,\n                    stHandleFour,\n                ]);\n            });\n            const newRtpoints = [];\n            const newStpoints = [];\n            const viewportColor = this._getReferenceLineColor(viewport.id);\n            const color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n            referenceLines.forEach((line, lineIndex) => {\n                const otherViewport = line[0];\n                const viewportColor = this._getReferenceLineColor(otherViewport.id);\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n                    this.configuration.mobile?.enabled;\n                const selectedViewportId = data.activeViewportIds.find((id) => id === otherViewport.id);\n                let color = viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                let lineWidth = 1;\n                const lineActive = data.handles.activeOperation !== null &&\n                    data.handles.activeOperation === OPERATION.DRAG &&\n                    selectedViewportId;\n                if (lineActive) {\n                    lineWidth = 2.5;\n                }\n                let lineUID = `${lineIndex}`;\n                if (viewportControllable && viewportDraggableRotatable) {\n                    lineUID = `${lineIndex}One`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[1], line[2], {\n                        color,\n                        lineWidth,\n                    });\n                    lineUID = `${lineIndex}Two`;\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[3], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                else {\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[2], line[4], {\n                        color,\n                        lineWidth,\n                    });\n                }\n                if (viewportControllable) {\n                    color =\n                        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n                    const rotHandlesActive = data.handles.activeOperation === OPERATION.ROTATE;\n                    const rotationHandles = [line[9], line[10]];\n                    const rotHandleWorldOne = [\n                        viewport.canvasToWorld(line[9]),\n                        otherViewport,\n                        line[1],\n                        line[2],\n                    ];\n                    const rotHandleWorldTwo = [\n                        viewport.canvasToWorld(line[10]),\n                        otherViewport,\n                        line[3],\n                        line[4],\n                    ];\n                    newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n                    const slabThicknessHandlesActive = data.handles.activeOperation === OPERATION.SLAB;\n                    const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n                    const slabThicknessHandleWorldOne = [\n                        viewport.canvasToWorld(line[11]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldTwo = [\n                        viewport.canvasToWorld(line[12]),\n                        otherViewport,\n                        line[5],\n                        line[6],\n                    ];\n                    const slabThicknessHandleWorldThree = [\n                        viewport.canvasToWorld(line[13]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    const slabThicknessHandleWorldFour = [\n                        viewport.canvasToWorld(line[14]),\n                        otherViewport,\n                        line[7],\n                        line[8],\n                    ];\n                    newStpoints.push(slabThicknessHandleWorldOne, slabThicknessHandleWorldTwo, slabThicknessHandleWorldThree, slabThicknessHandleWorldFour);\n                    let handleRadius = this.configuration.handleRadius *\n                        (this.configuration.enableHDPIHandles ? window.devicePixelRatio : 1);\n                    let opacity = 1;\n                    if (this.configuration.mobile?.enabled) {\n                        handleRadius = this.configuration.mobile.handleRadius;\n                        opacity = this.configuration.mobile.opacity;\n                    }\n                    if ((lineActive || this.configuration.mobile?.enabled) &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable &&\n                        viewportSlabThicknessControlsOn) {\n                        let handleUID = `${lineIndex}One`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                        handleUID = `${lineIndex}Two`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (lineActive &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'circle',\n                        });\n                    }\n                    else if (selectedViewportId &&\n                        !rotHandlesActive &&\n                        !slabThicknessHandlesActive &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleUID = `${lineIndex}`;\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            opacity,\n                            type: 'rect',\n                        });\n                    }\n                    else if (rotHandlesActive && viewportDraggableRotatable) {\n                        const handleUID = `${lineIndex}`;\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, handleUID, rotationHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'circle',\n                        });\n                    }\n                    else if (slabThicknessHandlesActive &&\n                        selectedViewportId &&\n                        viewportSlabThicknessControlsOn) {\n                        const handleRadius = this.configuration.handleRadius *\n                            (this.configuration.enableHDPIHandles\n                                ? window.devicePixelRatio\n                                : 1);\n                        drawHandlesSvg(svgDrawingHelper, annotationUID, lineUID, slabThicknessHandles, {\n                            color,\n                            handleRadius,\n                            fill: color,\n                            type: 'rect',\n                        });\n                    }\n                    const slabThicknessValue = otherViewport.getSlabThickness();\n                    if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n                        lineUID = `${lineIndex}STOne`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[5], line[6], {\n                            color,\n                            width: 1,\n                            lineDash: [2, 3],\n                        });\n                        lineUID = `${lineIndex}STTwo`;\n                        drawLineSvg(svgDrawingHelper, annotationUID, lineUID, line[7], line[8], {\n                            color,\n                            width: line,\n                            lineDash: [2, 3],\n                        });\n                    }\n                }\n            });\n            renderStatus = true;\n            data.handles.rotationPoints = newRtpoints;\n            data.handles.slabThicknessPoints = newStpoints;\n            if (this.configuration.viewportIndicators) {\n                const { viewportIndicatorsConfig } = this.configuration;\n                const xOffset = viewportIndicatorsConfig?.xOffset || 0.95;\n                const yOffset = viewportIndicatorsConfig?.yOffset || 0.05;\n                const referenceColorCoordinates = [\n                    clientWidth * xOffset,\n                    clientHeight * yOffset,\n                ];\n                const circleRadius = viewportIndicatorsConfig?.circleRadius || canvasDiagonalLength * 0.01;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, referenceColorCoordinates, circleRadius, { color, fill: color });\n            }\n            return renderStatus;\n        };\n        this._getAnnotations = (enabledElement) => {\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element) || [];\n            const viewportIds = this._getViewportsInfo().map(({ viewportId }) => viewportId);\n            const toolGroupAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                return viewportIds.includes(data.viewportId);\n            });\n            return toolGroupAnnotations;\n        };\n        this._onNewVolume = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            this._computeToolCenter(viewportsInfo);\n        };\n        this._areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n            if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n                return false;\n            }\n            viewportIdArrayOne.forEach((id) => {\n                let itemFound = false;\n                for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n                    if (id === viewportIdArrayTwo[i]) {\n                        itemFound = true;\n                        break;\n                    }\n                }\n                if (itemFound === false) {\n                    return false;\n                }\n            });\n            return true;\n        };\n        this._getAnnotationsForViewportsWithDifferentCameras = (enabledElement, annotations) => {\n            const { viewportId, renderingEngine, viewport } = enabledElement;\n            const otherViewportAnnotations = annotations.filter((annotation) => annotation.data.viewportId !== viewportId);\n            if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, position } = camera;\n            const viewportsWithDifferentCameras = otherViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const targetViewport = renderingEngine.getViewport(viewportId);\n                const cameraOfTarget = targetViewport.getCamera();\n                return !(csUtils.isEqual(cameraOfTarget.viewPlaneNormal, viewPlaneNormal, 1e-2) && csUtils.isEqual(cameraOfTarget.position, position, 1));\n            });\n            return viewportsWithDifferentCameras;\n        };\n        this._filterViewportWithSameOrientation = (enabledElement, referenceAnnotation, annotations) => {\n            const { renderingEngine } = enabledElement;\n            const { data } = referenceAnnotation;\n            const viewport = renderingEngine.getViewport(data.viewportId);\n            const linkedViewportAnnotations = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return otherViewportControllable === true;\n            });\n            if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n                return [];\n            }\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherViewportsAnnotationsWithSameCameraDirection = linkedViewportAnnotations.filter((annotation) => {\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                return (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n                    csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2));\n            });\n            return otherViewportsAnnotationsWithSameCameraDirection;\n        };\n        this._filterAnnotationsByUniqueViewportOrientations = (enabledElement, annotations) => {\n            const { renderingEngine, viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const viewPlaneNormal = camera.viewPlaneNormal;\n            vtkMath.normalize(viewPlaneNormal);\n            const otherLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable === true);\n            });\n            const otherViewportsAnnotationsWithUniqueCameras = [];\n            for (let i = 0; i < otherLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                return (viewport !== otherViewport &&\n                    otherViewportControllable !== true);\n            });\n            for (let i = 0; i < otherNonLinkedViewportAnnotationsFromSameScene.length; ++i) {\n                const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n                const annotation = otherViewportAnnotations[i];\n                if (otherViewportsAnnotationsWithUniqueCameras.some((element) => element === annotation)) {\n                    continue;\n                }\n                const { viewportId } = annotation.data;\n                const otherViewport = renderingEngine.getViewport(viewportId);\n                const otherCamera = otherViewport.getCamera();\n                const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n                vtkMath.normalize(otherViewPlaneNormal);\n                if (csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n                    csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)) {\n                    continue;\n                }\n                let cameraFound = false;\n                for (let jj = 0; jj < otherViewportsAnnotationsWithUniqueCameras.length; ++jj) {\n                    const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n                    const { viewportId } = annotation.data;\n                    const stockedViewport = renderingEngine.getViewport(viewportId);\n                    const cameraOfStocked = stockedViewport.getCamera();\n                    if (csUtils.isEqual(cameraOfStocked.viewPlaneNormal, otherCamera.viewPlaneNormal, 1e-2) &&\n                        csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)) {\n                        cameraFound = true;\n                    }\n                }\n                if (!cameraFound) {\n                    otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n                }\n            }\n            return otherViewportsAnnotationsWithUniqueCameras;\n        };\n        this._checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n            const volumeIds = viewport.getAllVolumeIds();\n            const otherVolumeIds = otherViewport.getAllVolumeIds();\n            return (volumeIds.length === otherVolumeIds.length &&\n                volumeIds.every((id) => otherVolumeIds.includes(id)));\n        };\n        this._jump = (enabledElement, jumpWorld) => {\n            state.isInteractingWithTool = true;\n            const { viewport, renderingEngine } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const delta = [0, 0, 0];\n            vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n            const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n            const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                const { data } = annotation;\n                const otherViewport = renderingEngine.getViewport(data.viewportId);\n                const sameScene = this._checkIfViewportsRenderingSameScene(viewport, otherViewport);\n                return (this._getReferenceLineControllable(otherViewport.id) &&\n                    this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n                    sameScene);\n            });\n            if (viewportsAnnotationsToUpdate.length === 0) {\n                state.isInteractingWithTool = false;\n                return false;\n            }\n            this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            state.isInteractingWithTool = false;\n            return true;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            this.editData.annotation.data.handles.activeOperation = null;\n            this.editData.annotation.data.activeViewportIds = [];\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            const requireSameOrientation = false;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), requireSameOrientation);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const delta = eventDetail.deltaPoints.world;\n            if (Math.abs(delta[0]) < 1e-3 &&\n                Math.abs(delta[1]) < 1e-3 &&\n                Math.abs(delta[2]) < 1e-3) {\n                return;\n            }\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const annotations = this._getAnnotations(enabledElement);\n            const filteredToolAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const viewportAnnotation = filteredToolAnnotations[0];\n            if (!viewportAnnotation) {\n                return;\n            }\n            const { handles } = viewportAnnotation.data;\n            const { currentPoints } = evt.detail;\n            const canvasCoords = currentPoints.canvas;\n            if (handles.activeOperation === OPERATION.DRAG) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                this._applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta);\n            }\n            else if (handles.activeOperation === OPERATION.ROTATE) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportDraggableRotatable === true);\n                });\n                const dir1 = vec2.create();\n                const dir2 = vec2.create();\n                const center = [\n                    this.toolCenter[0],\n                    this.toolCenter[1],\n                    this.toolCenter[2],\n                ];\n                const centerCanvas = viewport.worldToCanvas(center);\n                const finalPointCanvas = eventDetail.currentPoints.canvas;\n                const originalPointCanvas = vec2.create();\n                vec2.sub(originalPointCanvas, finalPointCanvas, eventDetail.deltaPoints.canvas);\n                vec2.sub(dir1, originalPointCanvas, centerCanvas);\n                vec2.sub(dir2, finalPointCanvas, centerCanvas);\n                let angle = vec2.angle(dir1, dir2);\n                if (this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)) {\n                    angle *= -1;\n                }\n                angle = Math.round(angle * 100) / 100;\n                const rotationAxis = viewport.getCamera().viewPlaneNormal;\n                const { matrix } = vtkMatrixBuilder\n                    .buildFromRadian()\n                    .translate(center[0], center[1], center[2])\n                    .rotate(angle, rotationAxis)\n                    .translate(-center[0], -center[1], -center[2]);\n                const otherViewportsIds = [];\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    data.handles.toolCenter = center;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const { viewUp, position, focalPoint } = camera;\n                    viewUp[0] += position[0];\n                    viewUp[1] += position[1];\n                    viewUp[2] += position[2];\n                    vec3.transformMat4(focalPoint, focalPoint, matrix);\n                    vec3.transformMat4(position, position, matrix);\n                    vec3.transformMat4(viewUp, viewUp, matrix);\n                    viewUp[0] -= position[0];\n                    viewUp[1] -= position[1];\n                    viewUp[2] -= position[2];\n                    otherViewport.setCamera({\n                        position,\n                        viewUp,\n                        focalPoint,\n                    });\n                    otherViewportsIds.push(otherViewport.id);\n                });\n                renderingEngine.renderViewports(otherViewportsIds);\n            }\n            else if (handles.activeOperation === OPERATION.SLAB) {\n                const otherViewportAnnotations = this._getAnnotationsForViewportsWithDifferentCameras(enabledElement, annotations);\n                const referenceAnnotations = otherViewportAnnotations.filter((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const otherViewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                    const otherViewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n                    return (otherViewportControllable === true &&\n                        otherViewportSlabThicknessControlsOn === true &&\n                        viewportAnnotation.data.activeViewportIds.find((id) => id === otherViewport.id));\n                });\n                if (referenceAnnotations.length === 0) {\n                    return;\n                }\n                const viewportsAnnotationsToUpdate = this._filterViewportWithSameOrientation(enabledElement, referenceAnnotations[0], annotations);\n                const viewportsIds = [];\n                viewportsIds.push(viewport.id);\n                viewportsAnnotationsToUpdate.forEach((annotation) => {\n                    const { data } = annotation;\n                    const otherViewport = renderingEngine.getViewport(data.viewportId);\n                    const camera = otherViewport.getCamera();\n                    const normal = camera.viewPlaneNormal;\n                    const dotProd = vtkMath.dot(delta, normal);\n                    const projectedDelta = [...normal];\n                    vtkMath.multiplyScalar(projectedDelta, dotProd);\n                    if (Math.abs(projectedDelta[0]) > 1e-3 ||\n                        Math.abs(projectedDelta[1]) > 1e-3 ||\n                        Math.abs(projectedDelta[2]) > 1e-3) {\n                        const mod = Math.sqrt(projectedDelta[0] * projectedDelta[0] +\n                            projectedDelta[1] * projectedDelta[1] +\n                            projectedDelta[2] * projectedDelta[2]);\n                        const currentPoint = eventDetail.lastPoints.world;\n                        const direction = [0, 0, 0];\n                        const currentCenter = [\n                            this.toolCenter[0],\n                            this.toolCenter[1],\n                            this.toolCenter[2],\n                        ];\n                        const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n                        if (!viewportDraggableRotatable) {\n                            const { rotationPoints } = this.editData.annotation.data.handles;\n                            const otherViewportRotationPoints = rotationPoints.filter((point) => point[1].uid === otherViewport.id);\n                            if (otherViewportRotationPoints.length === 2) {\n                                const point1 = viewport.canvasToWorld(otherViewportRotationPoints[0][3]);\n                                const point2 = viewport.canvasToWorld(otherViewportRotationPoints[1][3]);\n                                vtkMath.add(point1, point2, currentCenter);\n                                vtkMath.multiplyScalar(currentCenter, 0.5);\n                            }\n                        }\n                        vtkMath.subtract(currentPoint, currentCenter, direction);\n                        const dotProdDirection = vtkMath.dot(direction, normal);\n                        const projectedDirection = [...normal];\n                        vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n                        const normalizedProjectedDirection = [\n                            projectedDirection[0],\n                            projectedDirection[1],\n                            projectedDirection[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDirection, normalizedProjectedDirection);\n                        const normalizedProjectedDelta = [\n                            projectedDelta[0],\n                            projectedDelta[1],\n                            projectedDelta[2],\n                        ];\n                        vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n                        let slabThicknessValue = otherViewport.getSlabThickness();\n                        if (csUtils.isOpposite(normalizedProjectedDirection, normalizedProjectedDelta, 1e-3)) {\n                            slabThicknessValue -= mod;\n                        }\n                        else {\n                            slabThicknessValue += mod;\n                        }\n                        slabThicknessValue = Math.abs(slabThicknessValue);\n                        slabThicknessValue = Math.max(RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS, slabThicknessValue);\n                        const near = this._pointNearReferenceLine(viewportAnnotation, canvasCoords, 6, otherViewport);\n                        if (near) {\n                            slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n                        }\n                        const toolGroup = getToolGroupForViewport(otherViewport.id, renderingEngine.id);\n                        const crosshairsInstance = toolGroup.getToolInstance(this.getToolName());\n                        crosshairsInstance.setSlabThickness(otherViewport, slabThicknessValue);\n                        viewportsIds.push(otherViewport.id);\n                    }\n                });\n                renderingEngine.renderViewports(viewportsIds);\n            }\n        };\n        this._pointNearReferenceLine = (annotation, canvasCoords, proximity, lineViewport) => {\n            const { data } = annotation;\n            const { rotationPoints } = data.handles;\n            for (let i = 0; i < rotationPoints.length - 1; ++i) {\n                const otherViewport = rotationPoints[i][1];\n                if (otherViewport.id !== lineViewport.id) {\n                    continue;\n                }\n                const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n                if (!viewportControllable) {\n                    continue;\n                }\n                const lineSegment1 = {\n                    start: {\n                        x: rotationPoints[i][2][0],\n                        y: rotationPoints[i][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i][3][0],\n                        y: rotationPoints[i][3][1],\n                    },\n                };\n                const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n                const lineSegment2 = {\n                    start: {\n                        x: rotationPoints[i + 1][2][0],\n                        y: rotationPoints[i + 1][2][1],\n                    },\n                    end: {\n                        x: rotationPoints[i + 1][3][0],\n                        y: rotationPoints[i + 1][3][1],\n                    },\n                };\n                const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n                if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                    return true;\n                }\n                i++;\n            }\n            return false;\n        };\n        this._getReferenceLineColor =\n            toolProps.configuration?.getReferenceLineColor ||\n                defaultReferenceLineColor;\n        this._getReferenceLineControllable =\n            toolProps.configuration?.getReferenceLineControllable ||\n                defaultReferenceLineControllable;\n        this._getReferenceLineDraggableRotatable =\n            toolProps.configuration?.getReferenceLineDraggableRotatable ||\n                defaultReferenceLineDraggableRotatable;\n        this._getReferenceLineSlabThicknessControlsOn =\n            toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n                defaultReferenceLineSlabThicknessControlsOn;\n    }\n    onSetToolActive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        this._subscribeToViewportNewVolumeSet(viewportsInfo);\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolPassive() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolEnabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._computeToolCenter(viewportsInfo);\n    }\n    onSetToolDisabled() {\n        const viewportsInfo = this._getViewportsInfo();\n        this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n        viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n            const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n            if (!enabledElement) {\n                return;\n            }\n            const annotations = this._getAnnotations(enabledElement);\n            if (annotations?.length) {\n                annotations.forEach((annotation) => {\n                    removeAnnotation(annotation.annotationUID);\n                });\n            }\n        });\n    }\n    setToolCenter(toolCenter, suppressEvents = false) {\n        this.toolCenter = toolCenter;\n        const viewportsInfo = this._getViewportsInfo();\n        triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        if (!suppressEvents) {\n            triggerEvent(eventTarget, Events.CROSSHAIR_TOOL_CENTER_CHANGED, {\n                toolGroupId: this.toolGroupId,\n                toolCenter: this.toolCenter,\n            });\n        }\n    }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let point = this._getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n        point = this._getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity);\n        if (point !== null) {\n            return point;\n        }\n    }\n    _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n        viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _subscribeToViewportNewVolumeSet(viewports) {\n        viewports.forEach(({ viewportId, renderingEngineId }) => {\n            const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n            const { element } = viewport;\n            element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this._onNewVolume);\n        });\n    }\n    _autoPanViewportIfNecessary(viewportId, renderingEngine) {\n        const viewport = renderingEngine.getViewport(viewportId);\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n        const pan = this.configuration.autoPan.panSize;\n        const visiblePointCanvas = [\n            toolCenterCanvas[0],\n            toolCenterCanvas[1],\n        ];\n        if (toolCenterCanvas[0] < 0) {\n            visiblePointCanvas[0] = pan;\n        }\n        else if (toolCenterCanvas[0] > clientWidth) {\n            visiblePointCanvas[0] = clientWidth - pan;\n        }\n        if (toolCenterCanvas[1] < 0) {\n            visiblePointCanvas[1] = pan;\n        }\n        else if (toolCenterCanvas[1] > clientHeight) {\n            visiblePointCanvas[1] = clientHeight - pan;\n        }\n        if (visiblePointCanvas[0] === toolCenterCanvas[0] &&\n            visiblePointCanvas[1] === toolCenterCanvas[1]) {\n            return;\n        }\n        const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n        const deltaPointsWorld = [\n            visiblePointWorld[0] - this.toolCenter[0],\n            visiblePointWorld[1] - this.toolCenter[1],\n            visiblePointWorld[2] - this.toolCenter[2],\n        ];\n        const camera = viewport.getCamera();\n        const { focalPoint, position } = camera;\n        const updatedPosition = [\n            position[0] - deltaPointsWorld[0],\n            position[1] - deltaPointsWorld[1],\n            position[2] - deltaPointsWorld[2],\n        ];\n        const updatedFocalPoint = [\n            focalPoint[0] - deltaPointsWorld[0],\n            focalPoint[1] - deltaPointsWorld[1],\n            focalPoint[2] - deltaPointsWorld[2],\n        ];\n        viewport.setCamera({\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n        viewport.render();\n    }\n    setSlabThickness(viewport, slabThickness) {\n        let actorUIDs;\n        const { filterActorUIDsToSetSlabThickness } = this.configuration;\n        if (filterActorUIDsToSetSlabThickness &&\n            filterActorUIDsToSetSlabThickness.length > 0) {\n            actorUIDs = filterActorUIDsToSetSlabThickness;\n        }\n        let blendModeToUse = this.configuration.slabThicknessBlendMode;\n        if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n            blendModeToUse = Enums.BlendModes.COMPOSITE;\n        }\n        const immediate = false;\n        viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n        viewport.setSlabThickness(slabThickness, actorUIDs);\n    }\n    _isClockWise(a, b, c) {\n        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n    }\n    _applyDeltaShiftToSelectedViewportCameras(renderingEngine, viewportsAnnotationsToUpdate, delta) {\n        viewportsAnnotationsToUpdate.forEach((annotation) => {\n            this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n        });\n    }\n    _applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta) {\n        const { data } = annotation;\n        const viewport = renderingEngine.getViewport(data.viewportId);\n        const camera = viewport.getCamera();\n        const normal = camera.viewPlaneNormal;\n        const dotProd = vtkMath.dot(delta, normal);\n        const projectedDelta = [...normal];\n        vtkMath.multiplyScalar(projectedDelta, dotProd);\n        if (Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3) {\n            const newFocalPoint = [0, 0, 0];\n            const newPosition = [0, 0, 0];\n            vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n            vtkMath.add(camera.position, projectedDelta, newPosition);\n            viewport.setCamera({\n                focalPoint: newFocalPoint,\n                position: newPosition,\n            });\n            viewport.render();\n        }\n    }\n    _getRotationHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        for (let i = 0; i < rotationPoints.length; i++) {\n            const point = rotationPoints[i][0];\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.ROTATE;\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _getSlabThicknessHandleNearImagePoint(viewport, annotation, canvasCoords, proximity) {\n        const { data } = annotation;\n        const { slabThicknessPoints } = data.handles;\n        for (let i = 0; i < slabThicknessPoints.length; i++) {\n            const point = slabThicknessPoints[i][0];\n            const otherViewport = slabThicknessPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            if (!viewportControllable) {\n                continue;\n            }\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n                data.handles.activeOperation = OPERATION.SLAB;\n                data.activeViewportIds = [otherViewport.id];\n                this.editData = {\n                    annotation,\n                };\n                return point;\n            }\n        }\n        return null;\n    }\n    _pointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { clientWidth, clientHeight } = viewport.canvas;\n        const canvasDiagonalLength = Math.sqrt(clientWidth * clientWidth + clientHeight * clientHeight);\n        const { data } = annotation;\n        const { rotationPoints } = data.handles;\n        const { slabThicknessPoints } = data.handles;\n        const viewportIdArray = [];\n        for (let i = 0; i < rotationPoints.length - 1; ++i) {\n            const otherViewport = rotationPoints[i][1];\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportControllable || !viewportDraggableRotatable) {\n                continue;\n            }\n            const lineSegment1 = {\n                start: {\n                    x: rotationPoints[i][2][0],\n                    y: rotationPoints[i][2][1],\n                },\n                end: {\n                    x: rotationPoints[i][3][0],\n                    y: rotationPoints[i][3][1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: rotationPoints[i + 1][2][0],\n                    y: rotationPoints[i + 1][2][1],\n                },\n                end: {\n                    x: rotationPoints[i + 1][3][0],\n                    y: rotationPoints[i + 1][3][1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = OPERATION.DRAG;\n            }\n            i++;\n        }\n        for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n            const otherViewport = slabThicknessPoints[i][1];\n            if (viewportIdArray.find((id) => id === otherViewport.id)) {\n                continue;\n            }\n            const viewportControllable = this._getReferenceLineControllable(otherViewport.id);\n            const viewportSlabThicknessControlsOn = this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n            if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n                continue;\n            }\n            const stPointLineCanvas1 = slabThicknessPoints[i][2];\n            const stPointLineCanvas2 = slabThicknessPoints[i][3];\n            const centerCanvas = vec2.create();\n            vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n            vec2.scale(centerCanvas, centerCanvas, 0.5);\n            const canvasUnitVectorFromCenter = vec2.create();\n            vec2.subtract(canvasUnitVectorFromCenter, stPointLineCanvas1, centerCanvas);\n            vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n            const canvasVectorFromCenterStart = vec2.create();\n            vec2.scale(canvasVectorFromCenterStart, canvasUnitVectorFromCenter, canvasDiagonalLength * 0.05);\n            const stPointLineCanvas1Start = vec2.create();\n            const stPointLineCanvas2Start = vec2.create();\n            vec2.add(stPointLineCanvas1Start, centerCanvas, canvasVectorFromCenterStart);\n            vec2.subtract(stPointLineCanvas2Start, centerCanvas, canvasVectorFromCenterStart);\n            const lineSegment1 = {\n                start: {\n                    x: stPointLineCanvas1Start[0],\n                    y: stPointLineCanvas1Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas1[0],\n                    y: stPointLineCanvas1[1],\n                },\n            };\n            const distanceToPoint1 = lineSegment.distanceToPoint([lineSegment1.start.x, lineSegment1.start.y], [lineSegment1.end.x, lineSegment1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const lineSegment2 = {\n                start: {\n                    x: stPointLineCanvas2Start[0],\n                    y: stPointLineCanvas2Start[1],\n                },\n                end: {\n                    x: stPointLineCanvas2[0],\n                    y: stPointLineCanvas2[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([lineSegment2.start.x, lineSegment2.start.y], [lineSegment2.end.x, lineSegment2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n                viewportIdArray.push(otherViewport.id);\n                data.handles.activeOperation = null;\n            }\n            i++;\n        }\n        data.activeViewportIds = [...viewportIdArray];\n        this.editData = {\n            annotation,\n        };\n        return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n    }\n}\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\nimport { getEnabledElement, StackViewport, Enums } from '@cornerstonejs/core';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store/state';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\nclass MagnifyTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            magnifySize: 10,\n            magnifyWidth: 250,\n            magnifyHeight: 250,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._hasBeenRemoved = false;\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('MagnifyTool only works on StackViewports');\n            }\n            const referencedImageId = this._getReferencedImageId(viewport);\n            if (!referencedImageId) {\n                throw new Error('MagnifyTool: No referenced image id found, reconstructed planes not supported yet');\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                referencedImageId,\n                viewportIdsToRender,\n                enabledElement,\n                renderingEngine,\n                currentPoints,\n            };\n            this._createMagnificationViewport();\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this.preTouchStartCallback = (evt) => {\n            this.preMouseDownCallback(evt);\n        };\n        this._createMagnificationViewport = () => {\n            const { enabledElement, referencedImageId, viewportIdsToRender, renderingEngine, currentPoints, } = this.editData;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportProperties = viewport.getProperties();\n            const { rotation: originalViewportRotation } = viewport.getViewPresentation();\n            const { canvas: canvasPos, world: worldPos } = currentPoints;\n            let magnifyToolElement;\n            magnifyToolElement = element.querySelector('.magnifyTool');\n            if (magnifyToolElement === null) {\n                const magnifyElement = document.createElement('div');\n                magnifyElement.classList.add('magnifyTool');\n                magnifyElement.style.display = 'block';\n                magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n                magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n                magnifyElement.style.position = 'absolute';\n                magnifyToolElement = magnifyElement;\n                const viewportElement = element.querySelector('.viewport-element');\n                viewportElement.appendChild(magnifyElement);\n                const viewportInput = {\n                    viewportId: MAGNIFY_VIEWPORT_ID,\n                    type: Enums.ViewportType.STACK,\n                    element: magnifyToolElement,\n                };\n                renderingEngine.enableElement(viewportInput);\n            }\n            magnifyToolElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyToolElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            magnifyViewport.setStack([referencedImageId]).then(() => {\n                if (this._hasBeenRemoved) {\n                    return;\n                }\n                magnifyViewport.setProperties(viewportProperties);\n                magnifyViewport.setViewPresentation({\n                    rotation: originalViewportRotation,\n                });\n                const { parallelScale } = viewport.getCamera();\n                const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n                const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n                    Math.pow(focalPoint[1] - position[1], 2) +\n                    Math.pow(focalPoint[2] - position[2], 2));\n                const updatedFocalPoint = [\n                    worldPos[0],\n                    worldPos[1],\n                    worldPos[2],\n                ];\n                const updatedPosition = [\n                    updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n                    updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n                    updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n                ];\n                magnifyViewport.setCamera({\n                    parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n                    focalPoint: updatedFocalPoint,\n                    position: updatedPosition,\n                });\n                magnifyViewport.render();\n            });\n            magnifyToolElement.style.display = 'block';\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { deltaPoints, element, currentPoints } = eventDetail;\n            const deltaPointsWorld = deltaPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n            const magnifyElement = element.querySelector('.magnifyTool');\n            if (!magnifyElement) {\n                return;\n            }\n            magnifyElement.style.top = `${canvasPos[1] - this.configuration.magnifyHeight / 2}px`;\n            magnifyElement.style.left = `${canvasPos[0] - this.configuration.magnifyWidth / 2}px`;\n            const { focalPoint, position } = magnifyViewport.getCamera();\n            const updatedPosition = [\n                position[0] + deltaPointsWorld[0],\n                position[1] + deltaPointsWorld[1],\n                position[2] + deltaPointsWorld[2],\n            ];\n            const updatedFocalPoint = [\n                focalPoint[0] + deltaPointsWorld[0],\n                focalPoint[1] + deltaPointsWorld[1],\n                focalPoint[2] + deltaPointsWorld[2],\n            ];\n            magnifyViewport.setCamera({\n                focalPoint: updatedFocalPoint,\n                position: updatedPosition,\n            });\n            magnifyViewport.render();\n        };\n        this._dragEndCallback = (evt) => {\n            const { element } = evt.detail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n            const viewportElement = element.querySelector('.viewport-element');\n            const magnifyToolElement = viewportElement.querySelector('.magnifyTool');\n            viewportElement.removeChild(magnifyToolElement);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this._hasBeenRemoved = true;\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            this._hasBeenRemoved = false;\n            element.addEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._dragEndCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_END, this._dragEndCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n    }\n    _getReferencedImageId(viewport) {\n        const targetId = this.getTargetId(viewport);\n        let referencedImageId;\n        if (viewport instanceof StackViewport) {\n            referencedImageId = targetId.split('imageId:')[1];\n        }\n        return referencedImageId;\n    }\n}\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import { AnnotationTool } from './base';\nimport { getEnabledElement, utilities as csUtils, eventTarget, Enums, getRenderingEngine, CONSTANTS, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, } from '../drawingSvg';\nimport { state } from '../store/state';\nimport { Events, MouseBindings, KeyboardBindings, Events as cstEvents, SegmentationRepresentations, ToolModes, } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../utilities/math/circle';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nimport debounce from '../utilities/debounce';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { addSegmentationRepresentations } from '../stateManagement/segmentation';\nconst MAGNIFY_CLASSNAME = 'advancedMagnifyTool';\nconst MAGNIFY_VIEWPORT_INITIAL_RADIUS = 125;\nconst { Events: csEvents } = Enums;\nconst isSegmentation = (actor) => actor.uid !== actor.referencedId;\nvar AdvancedMagnifyToolActions;\n(function (AdvancedMagnifyToolActions) {\n    AdvancedMagnifyToolActions[\"ShowZoomFactorsList\"] = \"showZoomFactorsList\";\n})(AdvancedMagnifyToolActions || (AdvancedMagnifyToolActions = {}));\nconst ADVANCED_MAGNIFY_TOOL_NAME = 'AdvancedMagnify';\nconst PARALLEL_THRESHOLD = 1 - CONSTANTS.EPSILON;\nclass AdvancedMagnifyTool extends AnnotationTool {\n    static { this.Actions = AdvancedMagnifyToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            magnifyingGlass: {\n                radius: 125,\n                zoomFactor: 3,\n                zoomFactorList: [1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5],\n                autoPan: {\n                    enabled: true,\n                    padding: 10,\n                },\n            },\n            actions: {\n                showZoomFactorsList: {\n                    method: 'showZoomFactorsList',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Secondary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const { magnifyingGlass: config } = this.configuration;\n            const { radius, zoomFactor, autoPan } = config;\n            const canvasHandlePoints = this._getCanvasHandlePoints(canvasPos, radius);\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotationUID = csUtils.uuidv4();\n            const magnifyViewportId = csUtils.uuidv4();\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    sourceViewportId: viewport.id,\n                    magnifyViewportId,\n                    zoomFactor,\n                    isCanvasAnnotation: true,\n                    handles: {\n                        points: canvasHandlePoints,\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            this.magnifyViewportManager.createViewport(annotation, {\n                magnifyViewportId,\n                sourceEnabledElement: enabledElement,\n                position: canvasPos,\n                radius,\n                zoomFactor,\n                autoPan: {\n                    enabled: autoPan.enabled,\n                    padding: autoPan.padding,\n                    callback: (data) => {\n                        const annotationPoints = annotation.data.handles.points;\n                        const { canvas: canvasDelta } = data.delta;\n                        for (let i = 0, len = annotationPoints.length; i < len; i++) {\n                            const point = annotationPoints[i];\n                            point[0] += canvasDelta[0];\n                            point[1] += canvasDelta[1];\n                            annotation.invalidated = true;\n                        }\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.onSetToolDisabled = () => {\n            this.magnifyViewportManager.dispose();\n            const annotations = getAllAnnotations();\n            annotations.forEach((annotation) => {\n                if (annotation.metadata.toolName === this.getToolName()) {\n                    removeAnnotation(annotation.annotationUID);\n                }\n            });\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const center = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const radiusPoint = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radiusPoint - radius) < proximity * 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            const { points } = data.handles;\n            const handleIndex = points.findIndex((p) => p === handle);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { deltaPoints } = eventDetail;\n            const canvasDelta = deltaPoints?.canvas ?? [0, 0, 0];\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { points } = annotation.data.handles;\n            points.forEach((point) => {\n                point[0] += canvasDelta[0];\n                point[1] += canvasDelta[1];\n            });\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const canvasDelta = deltaPoints.canvas;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += canvasDelta[0];\n                    point[1] += canvasDelta[1];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points;\n            const canvasTop = canvasCoordinates[0];\n            const canvasBottom = canvasCoordinates[2];\n            const canvasLeft = canvasCoordinates[3];\n            const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n            const canvasCenter = [\n                canvasLeft[0] + radius,\n                canvasTop[1] + radius,\n            ];\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const newRadius = getCanvasCircleRadius([\n                canvasCenter,\n                currentCanvasPoints,\n            ]);\n            const newCanvasHandlePoints = this._getCanvasHandlePoints(canvasCenter, newRadius);\n            points[0] = newCanvasHandlePoints[0];\n            points[1] = newCanvasHandlePoints[1];\n            points[2] = newCanvasHandlePoints[2];\n            points[3] = newCanvasHandlePoints[3];\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = annotations?.filter((annotation) => annotation.data.sourceViewportId ===\n                viewport.id);\n            const filteredAnnotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!filteredAnnotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < filteredAnnotations.length; i++) {\n                const annotation = filteredAnnotations[i];\n                const { annotationUID, data } = annotation;\n                const { magnifyViewportId, zoomFactor, handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points;\n                const canvasTop = canvasCoordinates[0];\n                const canvasBottom = canvasCoordinates[2];\n                const canvasLeft = canvasCoordinates[3];\n                const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n                const center = [\n                    canvasLeft[0] + radius,\n                    canvasTop[1] + radius,\n                ];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-advancedMagnify`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineWidth: 5,\n                }, dataId);\n                const magnifyViewport = this.magnifyViewportManager.getViewport(magnifyViewportId);\n                magnifyViewport.position = center;\n                magnifyViewport.radius = radius;\n                magnifyViewport.zoomFactor = zoomFactor;\n                magnifyViewport.update();\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._getCanvasHandlePoints = (canvasCenterPos, canvasRadius) => {\n            return [\n                [canvasCenterPos[0], canvasCenterPos[1] - canvasRadius, 0],\n                [canvasCenterPos[0] + canvasRadius, canvasCenterPos[1], 0],\n                [canvasCenterPos[0], canvasCenterPos[1] + canvasRadius, 0],\n                [canvasCenterPos[0] - canvasRadius, canvasCenterPos[1], 0],\n            ];\n        };\n        this.magnifyViewportManager = AdvancedMagnifyViewportManager.getInstance();\n    }\n    showZoomFactorsList(evt, annotation) {\n        const { element, currentPoints } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvas: canvasPoint } = currentPoints;\n        const viewportElement = element.querySelector(':scope .viewport-element');\n        const currentZoomFactor = annotation.data.zoomFactor;\n        const remove = () => dropdown.parentElement.removeChild(dropdown);\n        const dropdown = this._getZoomFactorsListDropdown(currentZoomFactor, (newZoomFactor) => {\n            if (newZoomFactor !== undefined) {\n                annotation.data.zoomFactor = Number.parseFloat(newZoomFactor);\n                annotation.invalidated = true;\n            }\n            remove();\n            viewport.render();\n        });\n        Object.assign(dropdown.style, {\n            left: `${canvasPoint[0]}px`,\n            top: `${canvasPoint[1]}px`,\n        });\n        viewportElement.appendChild(dropdown);\n        dropdown.focus();\n    }\n    _getZoomFactorsListDropdown(currentZoomFactor, onChangeCallback) {\n        const { zoomFactorList } = this.configuration.magnifyingGlass;\n        const dropdown = document.createElement('select');\n        dropdown.size = 5;\n        Object.assign(dropdown.style, {\n            width: '50px',\n            position: 'absolute',\n        });\n        ['mousedown', 'mouseup', 'mousemove', 'click'].forEach((eventName) => {\n            dropdown.addEventListener(eventName, (evt) => evt.stopPropagation());\n        });\n        dropdown.addEventListener('change', (evt) => {\n            evt.stopPropagation();\n            onChangeCallback(dropdown.value);\n        });\n        dropdown.addEventListener('keydown', (evt) => {\n            const shouldCancel = (evt.keyCode ?? evt.which === 27) ||\n                evt.key?.toLowerCase() === 'escape';\n            if (shouldCancel) {\n                evt.stopPropagation();\n                onChangeCallback();\n            }\n        });\n        zoomFactorList.forEach((zoomFactor) => {\n            const option = document.createElement('option');\n            option.label = zoomFactor;\n            option.title = `Zoom factor ${zoomFactor.toFixed(1)}`;\n            option.value = zoomFactor;\n            option.defaultSelected = zoomFactor === currentZoomFactor;\n            dropdown.add(option);\n        });\n        return dropdown;\n    }\n}\nclass AdvancedMagnifyViewportManager {\n    constructor() {\n        this.createViewport = (annotation, viewportInfo) => {\n            const { magnifyViewportId, sourceEnabledElement, position, radius, zoomFactor, autoPan, } = viewportInfo;\n            const { viewport: sourceViewport } = sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            const magnifyViewport = new AdvancedMagnifyViewport({\n                magnifyViewportId,\n                sourceEnabledElement,\n                radius,\n                position,\n                zoomFactor,\n                autoPan,\n            });\n            this._addSourceElementEventListener(sourceElement);\n            this._magnifyViewportsMap.set(magnifyViewport.viewportId, {\n                annotation,\n                magnifyViewport,\n                magnifyViewportInfo: viewportInfo,\n            });\n            return magnifyViewport;\n        };\n        this._annotationRemovedCallback = (evt) => {\n            const { annotation } = evt.detail;\n            if (annotation.metadata.toolName !== ADVANCED_MAGNIFY_TOOL_NAME) {\n                return;\n            }\n            this.destroyViewport(annotation.data.magnifyViewportId);\n        };\n        this._newStackImageCallback = (evt) => {\n            const { viewportId: sourceViewportId, imageId } = evt.detail;\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            const { viewport } = getEnabledElementByViewportId(sourceViewportId);\n            if (viewport.stackActorReInitialized) {\n                this._reset(sourceViewportId);\n            }\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                annotation.metadata.referencedImageId = imageId;\n                annotation.invalidated = true;\n            });\n        };\n        this._newVolumeImageCallback = (evt) => {\n            const { renderingEngineId, viewportId: sourceViewportId } = evt.detail;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            const sourceViewport = renderingEngine.getViewport(sourceViewportId);\n            const { viewPlaneNormal: currentViewPlaneNormal } = sourceViewport.getCamera();\n            const magnifyViewportsMapEntries = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n            magnifyViewportsMapEntries.forEach(({ annotation }) => {\n                const { viewPlaneNormal } = annotation.metadata;\n                const isParallel = Math.abs(vec3.dot(viewPlaneNormal, currentViewPlaneNormal)) >\n                    PARALLEL_THRESHOLD;\n                if (!isParallel) {\n                    return;\n                }\n                const { handles } = annotation.data;\n                const worldImagePlanePoint = sourceViewport.canvasToWorld([0, 0]);\n                const vecHandleToImagePlane = vec3.sub(vec3.create(), worldImagePlanePoint, handles.points[0]);\n                const worldDist = vec3.dot(vecHandleToImagePlane, currentViewPlaneNormal);\n                const worldDelta = vec3.scale(vec3.create(), currentViewPlaneNormal, worldDist);\n                for (let i = 0, len = handles.points.length; i < len; i++) {\n                    const point = handles.points[i];\n                    point[0] += worldDelta[0];\n                    point[1] += worldDelta[1];\n                    point[2] += worldDelta[2];\n                }\n                annotation.invalidated = true;\n            });\n        };\n        this._magnifyViewportsMap = new Map();\n        this._initialize();\n    }\n    static getInstance() {\n        AdvancedMagnifyViewportManager._singleton =\n            AdvancedMagnifyViewportManager._singleton ??\n                new AdvancedMagnifyViewportManager();\n        return AdvancedMagnifyViewportManager._singleton;\n    }\n    getViewport(magnifyViewportId) {\n        return this._magnifyViewportsMap.get(magnifyViewportId)?.magnifyViewport;\n    }\n    dispose() {\n        this._removeEventListeners();\n        this._destroyViewports();\n    }\n    destroyViewport(magnifyViewportId) {\n        const magnifyViewportMapEntry = this._magnifyViewportsMap.get(magnifyViewportId);\n        if (magnifyViewportMapEntry) {\n            const { magnifyViewport } = magnifyViewportMapEntry;\n            const { viewport: sourceViewport } = magnifyViewport.sourceEnabledElement;\n            const { element: sourceElement } = sourceViewport;\n            this._removeSourceElementEventListener(sourceElement);\n            magnifyViewport.dispose();\n            this._magnifyViewportsMap.delete(magnifyViewportId);\n        }\n    }\n    _destroyViewports() {\n        const magnifyViewportIds = Array.from(this._magnifyViewportsMap.keys());\n        magnifyViewportIds.forEach((magnifyViewportId) => this.destroyViewport(magnifyViewportId));\n    }\n    _getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId) {\n        const magnifyViewportsMapEntries = Array.from(this._magnifyViewportsMap.values());\n        return magnifyViewportsMapEntries.filter(({ magnifyViewport }) => {\n            const { viewport } = magnifyViewport.sourceEnabledElement;\n            return viewport.id === sourceViewportId;\n        });\n    }\n    _reset(sourceViewportId) {\n        const magnifyViewports = this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n        magnifyViewports.forEach(({ magnifyViewport, annotation, magnifyViewportInfo }) => {\n            this.destroyViewport(magnifyViewport.viewportId);\n            const newEnabledElement = getEnabledElementByViewportId(sourceViewportId);\n            this.createViewport(annotation, {\n                ...magnifyViewportInfo,\n                sourceEnabledElement: {\n                    ...newEnabledElement,\n                },\n            });\n        });\n    }\n    _addEventListeners() {\n        eventTarget.addEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _removeEventListeners() {\n        eventTarget.removeEventListener(cstEvents.ANNOTATION_REMOVED, this._annotationRemovedCallback);\n    }\n    _addSourceElementEventListener(element) {\n        element.addEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        const newStackHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, newStackHandler);\n        const newVolumeHandler = (evt) => {\n            const { viewportId: sourceViewportId } = evt.detail;\n            this._reset(sourceViewportId);\n        };\n        element.addEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, newVolumeHandler);\n        element.addEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.newStackHandler = newStackHandler;\n        element.newVolumeHandler = newVolumeHandler;\n    }\n    _removeSourceElementEventListener(element) {\n        element.removeEventListener(csEvents.STACK_NEW_IMAGE, this._newStackImageCallback);\n        element.removeEventListener(csEvents.VOLUME_NEW_IMAGE, this._newVolumeImageCallback);\n        element.removeEventListener(csEvents.VIEWPORT_NEW_IMAGE_SET, element.newStackHandler);\n        element.removeEventListener(csEvents.VOLUME_VIEWPORT_NEW_VOLUME, element.newVolumeHandler);\n        delete element.newStackHandler;\n        delete element.newVolumeHandler;\n    }\n    _initialize() {\n        this._addEventListeners();\n    }\n}\nclass AdvancedMagnifyViewport {\n    constructor({ magnifyViewportId, sourceEnabledElement, radius = MAGNIFY_VIEWPORT_INITIAL_RADIUS, position = [0, 0], zoomFactor, autoPan, }) {\n        this._enabledElement = null;\n        this._sourceToolGroup = null;\n        this._magnifyToolGroup = null;\n        this._isViewportReady = false;\n        this._radius = 0;\n        this._resized = false;\n        this._canAutoPan = false;\n        this._viewportId = magnifyViewportId ?? csUtils.uuidv4();\n        this._sourceEnabledElement = sourceEnabledElement;\n        this._autoPan = autoPan;\n        this.radius = radius;\n        this.position = position;\n        this.zoomFactor = zoomFactor;\n        this.visible = true;\n        this._browserMouseDownCallback = this._browserMouseDownCallback.bind(this);\n        this._browserMouseUpCallback = this._browserMouseUpCallback.bind(this);\n        this._handleToolModeChanged = this._handleToolModeChanged.bind(this);\n        this._mouseDragCallback = this._mouseDragCallback.bind(this);\n        this._resizeViewportAsync = (debounce(this._resizeViewport.bind(this), 1));\n        this._initialize();\n    }\n    get sourceEnabledElement() {\n        return this._sourceEnabledElement;\n    }\n    get viewportId() {\n        return this._viewportId;\n    }\n    get radius() {\n        return this._radius;\n    }\n    set radius(radius) {\n        if (Math.abs(this._radius - radius) > 0.00001) {\n            this._radius = radius;\n            this._resized = true;\n        }\n    }\n    update() {\n        const { radius, position, visible } = this;\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const size = 2 * radius;\n        const [x, y] = position;\n        if (this._resized) {\n            this._resizeViewportAsync();\n            this._resized = false;\n        }\n        Object.assign(element.style, {\n            display: visible ? 'block' : 'hidden',\n            width: `${size}px`,\n            height: `${size}px`,\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(${x}px, ${y}px)`,\n        });\n        if (this._isViewportReady) {\n            this._syncViewports();\n            viewport.render();\n        }\n    }\n    dispose() {\n        const { viewport } = this._enabledElement;\n        const { element } = viewport;\n        const renderingEngine = viewport.getRenderingEngine();\n        this._removeEventListeners(element);\n        renderingEngine.disableElement(viewport.id);\n        if (element.parentNode) {\n            element.parentNode.removeChild(element);\n        }\n    }\n    _handleToolModeChanged(evt) {\n        const { _magnifyToolGroup: magnifyToolGroup } = this;\n        const { toolGroupId, toolName, mode, toolBindingsOptions } = evt.detail;\n        if (this._sourceToolGroup?.id !== toolGroupId) {\n            return;\n        }\n        switch (mode) {\n            case ToolModes.Active:\n                magnifyToolGroup.setToolActive(toolName, toolBindingsOptions);\n                break;\n            case ToolModes.Passive:\n                magnifyToolGroup.setToolPassive(toolName);\n                break;\n            case ToolModes.Enabled:\n                magnifyToolGroup.setToolEnabled(toolName);\n                break;\n            case ToolModes.Disabled:\n                magnifyToolGroup.setToolDisabled(toolName);\n                break;\n            default:\n                throw new Error(`Unknow tool mode (${mode})`);\n        }\n    }\n    _inheritBorderRadius(magnifyElement) {\n        const viewport = magnifyElement.querySelector('.viewport-element');\n        const canvas = magnifyElement.querySelector('.cornerstone-canvas');\n        viewport.style.borderRadius = 'inherit';\n        canvas.style.borderRadius = 'inherit';\n    }\n    _createViewportNode() {\n        const magnifyElement = document.createElement('div');\n        const { radius } = this;\n        const size = radius * 2;\n        magnifyElement.classList.add(MAGNIFY_CLASSNAME);\n        Object.assign(magnifyElement.style, {\n            display: 'block',\n            width: `${size}px`,\n            height: `${size}px`,\n            position: 'absolute',\n            overflow: 'hidden',\n            borderRadius: '50%',\n            boxSizing: 'border-box',\n            left: `${-radius}px`,\n            top: `${-radius}px`,\n            transform: `translate(-1000px, -1000px)`,\n        });\n        return magnifyElement;\n    }\n    _convertZoomFactorToParallelScale(viewport, magnifyViewport, zoomFactor) {\n        const { parallelScale } = viewport.getCamera();\n        const canvasRatio = magnifyViewport.canvas.offsetWidth / viewport.canvas.offsetWidth;\n        return parallelScale * (1 / zoomFactor) * canvasRatio;\n    }\n    _isStackViewport(viewport) {\n        return 'setStack' in viewport;\n    }\n    _isVolumeViewport(viewport) {\n        return 'addVolumes' in viewport;\n    }\n    _cloneToolGroups(sourceViewport, magnifyViewport) {\n        const sourceActors = sourceViewport.getActors();\n        const magnifyToolGroupId = `${magnifyViewport.id}-toolGroup`;\n        const sourceToolGroup = getToolGroupForViewport(sourceViewport.id, sourceViewport.renderingEngineId);\n        const magnifyToolGroup = sourceToolGroup.clone(magnifyToolGroupId, (toolName) => {\n            const toolInstance = sourceToolGroup.getToolInstance(toolName);\n            const isAnnotationTool = toolInstance instanceof AnnotationTool &&\n                !(toolInstance instanceof AdvancedMagnifyTool);\n            return isAnnotationTool;\n        });\n        magnifyToolGroup.addViewport(magnifyViewport.id, magnifyViewport.renderingEngineId);\n        sourceActors.filter(isSegmentation).forEach((actor) => {\n            addSegmentationRepresentations(this.viewportId, [\n                {\n                    segmentationId: actor.referencedId,\n                    type: SegmentationRepresentations.Labelmap,\n                },\n            ]);\n        });\n        return { sourceToolGroup, magnifyToolGroup };\n    }\n    _cloneStack(sourceViewport, magnifyViewport) {\n        const imageIds = sourceViewport.getImageIds();\n        magnifyViewport.setStack(imageIds).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n    }\n    _cloneVolumes(sourceViewport, magnifyViewport) {\n        const actors = sourceViewport.getActors();\n        const volumeInputArray = actors\n            .filter((actor) => !isSegmentation(actor))\n            .map((actor) => ({ volumeId: actor.uid }));\n        magnifyViewport.setVolumes(volumeInputArray).then(() => {\n            this._isViewportReady = true;\n            this.update();\n        });\n        return magnifyViewport;\n    }\n    _cloneViewport(sourceViewport, magnifyElement) {\n        const { viewportId: magnifyViewportId } = this;\n        const renderingEngine = sourceViewport.getRenderingEngine();\n        const { options: sourceViewportOptions } = sourceViewport;\n        const viewportInput = {\n            element: magnifyElement,\n            viewportId: magnifyViewportId,\n            type: sourceViewport.type,\n            defaultOptions: { ...sourceViewportOptions },\n        };\n        renderingEngine.enableElement(viewportInput);\n        const magnifyViewport = (renderingEngine.getViewport(magnifyViewportId));\n        if (this._isStackViewport(sourceViewport)) {\n            this._cloneStack(sourceViewport, magnifyViewport);\n        }\n        else if (this._isVolumeViewport(sourceViewport)) {\n            this._cloneVolumes(sourceViewport, magnifyViewport);\n        }\n        this._inheritBorderRadius(magnifyElement);\n        const toolGroups = this._cloneToolGroups(sourceViewport, magnifyViewport);\n        this._sourceToolGroup = toolGroups.sourceToolGroup;\n        this._magnifyToolGroup = toolGroups.magnifyToolGroup;\n    }\n    _cancelMouseEventCallback(evt) {\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n    _browserMouseUpCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _browserMouseDownCallback(evt) {\n        const { element } = this._enabledElement.viewport;\n        this._canAutoPan = !!evt.target?.closest('.advancedMagnifyTool');\n        document.addEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n    }\n    _mouseDragCallback(evt) {\n        if (!state.isInteractingWithTool) {\n            return;\n        }\n        const { _autoPan: autoPan } = this;\n        if (!autoPan.enabled || !this._canAutoPan) {\n            return;\n        }\n        const { currentPoints } = evt.detail;\n        const { viewport } = this._enabledElement;\n        const { canvasToWorld } = viewport;\n        const { canvas: canvasCurrent } = currentPoints;\n        const { radius: magnifyRadius } = this;\n        const canvasCenter = [magnifyRadius, magnifyRadius];\n        const dist = distanceToPoint(canvasCenter, canvasCurrent);\n        const maxDist = magnifyRadius - autoPan.padding;\n        if (dist <= maxDist) {\n            return;\n        }\n        const panDist = dist - maxDist;\n        const canvasDeltaPos = vec2.sub(vec2.create(), canvasCurrent, canvasCenter);\n        vec2.normalize(canvasDeltaPos, canvasDeltaPos);\n        vec2.scale(canvasDeltaPos, canvasDeltaPos, panDist);\n        const newCanvasPosition = vec2.add(vec2.create(), this.position, canvasDeltaPos);\n        const currentWorldPos = canvasToWorld(this.position);\n        const newWorldPos = canvasToWorld(newCanvasPosition);\n        const worldDeltaPos = vec3.sub(vec3.create(), newWorldPos, currentWorldPos);\n        const autoPanCallbackData = {\n            points: {\n                currentPosition: {\n                    canvas: this.position,\n                    world: currentWorldPos,\n                },\n                newPosition: {\n                    canvas: newCanvasPosition,\n                    world: newWorldPos,\n                },\n            },\n            delta: {\n                canvas: canvasDeltaPos,\n                world: worldDeltaPos,\n            },\n        };\n        autoPan.callback(autoPanCallbackData);\n    }\n    _addBrowserEventListeners(element) {\n        document.addEventListener('mousedown', this._browserMouseDownCallback, true);\n        element.addEventListener('mousedown', this._cancelMouseEventCallback);\n        element.addEventListener('mouseup', this._cancelMouseEventCallback);\n        element.addEventListener('mousemove', this._cancelMouseEventCallback);\n        element.addEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _removeBrowserEventListeners(element) {\n        document.removeEventListener('mousedown', this._browserMouseDownCallback, true);\n        document.removeEventListener('mouseup', this._browserMouseUpCallback);\n        element.removeEventListener('mousedown', this._cancelMouseEventCallback);\n        element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n        element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n        element.removeEventListener('dblclick', this._cancelMouseEventCallback);\n    }\n    _addEventListeners(element) {\n        eventTarget.addEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._addBrowserEventListeners(element);\n    }\n    _removeEventListeners(element) {\n        eventTarget.removeEventListener(cstEvents.TOOL_MODE_CHANGED, this._handleToolModeChanged);\n        element.addEventListener(cstEvents.MOUSE_MOVE, this._mouseDragCallback);\n        element.addEventListener(cstEvents.MOUSE_DRAG, this._mouseDragCallback);\n        this._removeBrowserEventListeners(element);\n    }\n    _initialize() {\n        const { _sourceEnabledElement: sourceEnabledElement } = this;\n        const { viewport: sourceViewport } = sourceEnabledElement;\n        const { canvas: sourceCanvas } = sourceViewport;\n        const magnifyElement = this._createViewportNode();\n        sourceCanvas.parentNode.appendChild(magnifyElement);\n        this._addEventListeners(magnifyElement);\n        this._cloneViewport(sourceViewport, magnifyElement);\n        this._enabledElement = getEnabledElement(magnifyElement);\n    }\n    _syncViewportsCameras(sourceViewport, magnifyViewport) {\n        const worldPos = sourceViewport.canvasToWorld(this.position);\n        const parallelScale = this._convertZoomFactorToParallelScale(sourceViewport, magnifyViewport, this.zoomFactor);\n        const { focalPoint, position, viewPlaneNormal } = magnifyViewport.getCamera();\n        const distance = Math.sqrt(Math.pow(focalPoint[0] - position[0], 2) +\n            Math.pow(focalPoint[1] - position[1], 2) +\n            Math.pow(focalPoint[2] - position[2], 2));\n        const updatedFocalPoint = [\n            worldPos[0],\n            worldPos[1],\n            worldPos[2],\n        ];\n        const updatedPosition = [\n            updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n            updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n            updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n        ];\n        magnifyViewport.setCamera({\n            parallelScale,\n            focalPoint: updatedFocalPoint,\n            position: updatedPosition,\n        });\n    }\n    _syncStackViewports(sourceViewport, magnifyViewport) {\n        magnifyViewport.setImageIdIndex(sourceViewport.getCurrentImageIdIndex());\n    }\n    _syncViewports() {\n        const { viewport: sourceViewport } = this._sourceEnabledElement;\n        const { viewport: magnifyViewport } = this._enabledElement;\n        const sourceProperties = sourceViewport.getProperties();\n        const imageData = magnifyViewport.getImageData();\n        if (!imageData) {\n            return;\n        }\n        magnifyViewport.setProperties(sourceProperties);\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        if (this._isStackViewport(sourceViewport)) {\n            this._syncStackViewports(sourceViewport, magnifyViewport);\n        }\n        this._syncViewportsCameras(sourceViewport, magnifyViewport);\n        magnifyViewport.render();\n    }\n    _resizeViewport() {\n        const { viewport } = this._enabledElement;\n        const renderingEngine = viewport.getRenderingEngine();\n        renderingEngine.resize();\n    }\n}\nAdvancedMagnifyTool.toolName = 'AdvancedMagnify';\nexport { AdvancedMagnifyTool as default };\n","import { vec3 } from 'gl-matrix';\nimport { getRenderingEngines, CONSTANTS, utilities as csUtils, } from '@cornerstonejs/core';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass ReferenceLines extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceViewportId: '',\n            enforceSameFrameOfReference: true,\n            showFullDimension: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            let viewports = renderingEngine.getViewports();\n            viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n            const sourceViewport = renderingEngine.getViewport(this.configuration.sourceViewportId);\n            if (!sourceViewport?.getImageData()) {\n                return;\n            }\n            const { element } = sourceViewport;\n            const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n            const sourceViewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(sourceViewport);\n            let annotation = this.editData?.annotation;\n            const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n            if (!annotation) {\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        viewPlaneNormal: [...viewPlaneNormal],\n                        viewUp: [...viewUp],\n                        FrameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        handles: {\n                            points: sourceViewportCanvasCornersInWorld,\n                        },\n                    },\n                };\n                addAnnotation(newAnnotation, element);\n                annotation = newAnnotation;\n            }\n            else {\n                this.editData.annotation.data.handles.points =\n                    sourceViewportCanvasCornersInWorld;\n            }\n            this.editData = {\n                sourceViewportId: sourceViewport.id,\n                renderingEngine,\n                annotation,\n            };\n            triggerAnnotationRenderForViewportIds(viewports\n                .filter((viewport) => viewport.id !== sourceViewport.id)\n                .map((viewport) => viewport.id));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolConfiguration = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport: targetViewport } = enabledElement;\n            if (!this.editData) {\n                return false;\n            }\n            const { annotation, sourceViewportId } = this.editData;\n            let renderStatus = false;\n            const { viewport: sourceViewport } = getEnabledElementByViewportId(sourceViewportId) || {};\n            if (!sourceViewport) {\n                return renderStatus;\n            }\n            if (sourceViewport.id === targetViewport.id) {\n                return renderStatus;\n            }\n            if (!annotation || !annotation?.data?.handles?.points) {\n                return renderStatus;\n            }\n            if (this.configuration.enforceSameFrameOfReference &&\n                sourceViewport.getFrameOfReferenceUID() !==\n                    targetViewport.getFrameOfReferenceUID()) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const topLeft = annotation.data.handles.points[0];\n            const topRight = annotation.data.handles.points[1];\n            const bottomLeft = annotation.data.handles.points[2];\n            const bottomRight = annotation.data.handles.points[3];\n            const { focalPoint, viewPlaneNormal, viewUp } = targetViewport.getCamera();\n            const { viewPlaneNormal: sourceViewPlaneNormal } = sourceViewport.getCamera();\n            if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            let pointSetToUse = pointSet1;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const newNormal = vec3.cross(vec3.create(), topBottomVec, topRightVec);\n            if (this.isParallel(newNormal, viewPlaneNormal)) {\n                return renderStatus;\n            }\n            if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                pointSetToUse = pointSet2;\n            }\n            const lineStartWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n            const lineEndWorld = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n            const { annotationUID } = annotation;\n            styleSpecifier.annotationUID = annotationUID;\n            const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n            const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n            const color = this.getStyle('color', styleSpecifier, annotation);\n            const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n            let canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n            if (this.configuration.showFullDimension) {\n                canvasCoordinates = this.handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates);\n            }\n            if (canvasCoordinates.length < 2) {\n                return renderStatus;\n            }\n            const dataId = `${annotationUID}-line`;\n            const lineUID = '1';\n            drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, dataId);\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    handleFullDimension(targetViewport, lineStartWorld, viewPlaneNormal, viewUp, lineEndWorld, canvasCoordinates) {\n        const renderingEngine = targetViewport.getRenderingEngine();\n        const targetId = this.getTargetId(targetViewport);\n        const targetImage = this.getTargetImageData(targetId);\n        const referencedImageId = this.getReferencedImageId(targetViewport, lineStartWorld, viewPlaneNormal, viewUp);\n        if (referencedImageId && targetImage) {\n            try {\n                const { imageData, dimensions } = targetImage;\n                const [topLeftImageCoord, topRightImageCoord, bottomRightImageCoord, bottomLeftImageCoord,] = [\n                    imageData.indexToWorld([0, 0, 0]),\n                    imageData.indexToWorld([dimensions[0] - 1, 0, 0]),\n                    imageData.indexToWorld([\n                        dimensions[0] - 1,\n                        dimensions[1] - 1,\n                        0,\n                    ]),\n                    imageData.indexToWorld([0, dimensions[1] - 1, 0]),\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                const [lineStartImageCoord, lineEndImageCoord] = [\n                    lineStartWorld,\n                    lineEndWorld,\n                ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n                canvasCoordinates = [\n                    [topLeftImageCoord, topRightImageCoord],\n                    [topRightImageCoord, bottomRightImageCoord],\n                    [bottomLeftImageCoord, bottomRightImageCoord],\n                    [topLeftImageCoord, bottomLeftImageCoord],\n                ]\n                    .map(([start, end]) => this.intersectInfiniteLines(start, end, lineStartImageCoord, lineEndImageCoord))\n                    .filter((point) => point && this.isInBound(point, dimensions))\n                    .map((point) => {\n                    const world = csUtils.imageToWorldCoords(referencedImageId, point);\n                    return targetViewport.worldToCanvas(world);\n                });\n            }\n            catch (err) {\n                console.log(err);\n            }\n        }\n        return canvasCoordinates;\n    }\n    intersectInfiniteLines(line1Start, line1End, line2Start, line2End) {\n        const [x1, y1] = line1Start;\n        const [x2, y2] = line1End;\n        const [x3, y3] = line2Start;\n        const [x4, y4] = line2End;\n        const a1 = y2 - y1;\n        const b1 = x1 - x2;\n        const c1 = x2 * y1 - x1 * y2;\n        const a2 = y4 - y3;\n        const b2 = x3 - x4;\n        const c2 = x4 * y3 - x3 * y4;\n        if (Math.abs(a1 * b2 - a2 * b1) < EPSILON) {\n            return;\n        }\n        const x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n        const y = (a2 * c1 - a1 * c2) / (a1 * b2 - a2 * b1);\n        return [x, y];\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    isInBound(point, dimensions) {\n        return (point[0] >= 0 &&\n            point[0] <= dimensions[0] &&\n            point[1] >= 0 &&\n            point[1] <= dimensions[1]);\n    }\n}\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import { vec3 } from 'gl-matrix';\nimport { metaData, CONSTANTS, getRenderingEngine, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nconst { EPSILON } = CONSTANTS;\nclass OverlayGridTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            sourceImageIds: [],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onSetToolActive = () => {\n            this._init();\n        };\n        this._init = () => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            if (!sourceImageIds?.length) {\n                console.warn('OverlayGridTool: No sourceImageIds provided in configuration');\n                return;\n            }\n            const imagePlaneModule = metaData.get('imagePlaneModule', sourceImageIds[0]);\n            if (!imagePlaneModule) {\n                console.warn('OverlayGridTool: No imagePlaneModule found for sourceImageIds');\n                return;\n            }\n            const { frameOfReferenceUID } = imagePlaneModule;\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn('OverlayGridTool: No viewports found');\n                return;\n            }\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const pointSets = sourceImageIds.map((id) => {\n                    return this.calculateImageIdPointSets(id);\n                });\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        viewportData: new Map(),\n                        pointSets,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.calculateImageIdPointSets = (imageId) => {\n            const { imagePositionPatient, rows, columns, rowCosines, columnCosines, rowPixelSpacing, columnPixelSpacing, } = metaData.get('imagePlaneModule', imageId);\n            const topLeft = [...imagePositionPatient];\n            const topRight = [...imagePositionPatient];\n            const bottomLeft = [...imagePositionPatient];\n            const bottomRight = [...imagePositionPatient];\n            vec3.scaleAndAdd(topRight, imagePositionPatient, columnCosines, columns * columnPixelSpacing);\n            vec3.scaleAndAdd(bottomLeft, imagePositionPatient, rowCosines, rows * rowPixelSpacing);\n            vec3.scaleAndAdd(bottomRight, bottomLeft, columnCosines, columns * columnPixelSpacing);\n            const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n            const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n            return { pointSet1, pointSet2 };\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const sourceImageIds = this.configuration.sourceImageIds;\n            let renderStatus = false;\n            if (!sourceImageIds?.length) {\n                return renderStatus;\n            }\n            const { viewport: targetViewport, FrameOfReferenceUID } = enabledElement;\n            const targetImageIds = targetViewport.getImageIds();\n            if (targetImageIds.length < 2) {\n                return renderStatus;\n            }\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const imageIdNormal = (this.getImageIdNormal(sourceImageIds[0]));\n            if (this.isParallel(viewPlaneNormal, imageIdNormal)) {\n                return renderStatus;\n            }\n            const targetViewportPlane = csUtils.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const pointSets = annotation.data.pointSets;\n            const viewportData = annotation.data.viewportData;\n            for (let i = 0; i < sourceImageIds.length; i++) {\n                const { pointSet1, pointSet2 } = pointSets[i];\n                const targetData = viewportData.get(targetViewport.id) ||\n                    this.initializeViewportData(viewportData, targetViewport.id);\n                if (!targetData.pointSetsToUse[i]) {\n                    let pointSetToUse = pointSet1;\n                    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n                    topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n                    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n                        pointSetToUse = pointSet2;\n                    }\n                    targetData.pointSetsToUse[i] = pointSetToUse;\n                    targetData.lineStartsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[0], pointSetToUse[1], targetViewportPlane);\n                    targetData.lineEndsWorld[i] = csUtils.planar.linePlaneIntersection(pointSetToUse[2], pointSetToUse[3], targetViewportPlane);\n                }\n                const lineStartWorld = targetData.lineStartsWorld[i];\n                const lineEndWorld = targetData.lineEndsWorld[i];\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n                const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) => targetViewport.worldToCanvas(world));\n                const dataId = `${annotationUID}-line`;\n                const lineUID = `${i}`;\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n            }\n            renderStatus = true;\n            return renderStatus;\n        };\n        this.initializeViewportData = (viewportData, id) => {\n            viewportData.set(id, {\n                pointSetsToUse: [],\n                lineStartsWorld: [],\n                lineEndsWorld: [],\n            });\n            return viewportData.get(id);\n        };\n        this.isPerpendicular = (vec1, vec2) => {\n            const dot = vec3.dot(vec1, vec2);\n            return Math.abs(dot) < EPSILON;\n        };\n    }\n    isParallel(vec1, vec2) {\n        return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n    }\n    getImageIdNormal(imageId) {\n        const { imageOrientationPatient } = metaData.get('imagePlaneModule', imageId);\n        const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n        const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n        return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n    }\n}\nOverlayGridTool.toolName = 'OverlayGrid';\nexport default OverlayGridTool;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawPath } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { pointToString } from '../utilities/pointToString';\nimport { polyDataUtils } from '../utilities';\nclass SegmentationIntersectionTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            opacity: 0.5,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._init = () => {\n            const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportsInfo?.length) {\n                console.warn(this.getToolName() + 'Tool: No viewports found');\n                return;\n            }\n            const firstViewport = getRenderingEngine(viewportsInfo[0].renderingEngineId)?.getViewport(viewportsInfo[0].viewportId);\n            if (!firstViewport) {\n                return;\n            }\n            const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();\n            const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n            if (!annotations?.length) {\n                const actorsWorldPointsMap = new Map();\n                calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo);\n                const newAnnotation = {\n                    highlighted: true,\n                    invalidated: true,\n                    metadata: {\n                        toolName: this.getToolName(),\n                        FrameOfReferenceUID: frameOfReferenceUID,\n                        referencedImageId: null,\n                    },\n                    data: {\n                        actorsWorldPointsMap,\n                    },\n                };\n                addAnnotation(newAnnotation, frameOfReferenceUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportsInfo.map(({ viewportId }) => viewportId));\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this._init();\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            let renderStatus = false;\n            const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const annotation = annotations[0];\n            const { annotationUID } = annotation;\n            const actorsWorldPointsMap = annotation.data.actorsWorldPointsMap;\n            calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n            const actorEntries = viewport.getActors();\n            const cacheId = getCacheId(viewport);\n            actorEntries.forEach((actorEntry) => {\n                if (!actorEntry?.clippingFilter) {\n                    return;\n                }\n                const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);\n                if (!actorWorldPointMap) {\n                    return;\n                }\n                if (!actorWorldPointMap.get(cacheId)) {\n                    return;\n                }\n                let polyLineIdx = 1;\n                const { worldPointsSet, color } = actorWorldPointMap.get(cacheId);\n                for (let i = 0; i < worldPointsSet.length; i++) {\n                    const worldPoints = worldPointsSet[i];\n                    const canvasPoints = worldPoints.map((point) => viewport.worldToCanvas(point));\n                    const options = {\n                        color: color,\n                        fillColor: color,\n                        fillOpacity: this.configuration.opacity,\n                        closePath: true,\n                        lineWidth: 2,\n                    };\n                    const polyLineUID = actorEntry.uid + '#' + polyLineIdx;\n                    drawPath(svgDrawingHelper, annotationUID, polyLineUID, canvasPoints, options);\n                    polyLineIdx++;\n                }\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nfunction calculateSurfaceSegmentationIntersections(actorsWorldPointsMap, viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport);\n    });\n}\nfunction calculateSurfaceSegmentationIntersectionsForViewport(actorsWorldPointsMap, viewport) {\n    const actorEntries = viewport.getActors();\n    const cacheId = getCacheId(viewport);\n    actorEntries.forEach((actorEntry) => {\n        if (!actorEntry?.clippingFilter) {\n            return;\n        }\n        let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);\n        if (!actorWorldPointsMap) {\n            actorWorldPointsMap = new Map();\n            actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);\n        }\n        if (!actorWorldPointsMap.get(cacheId)) {\n            const polyData = actorEntry.clippingFilter.getOutputData();\n            const worldPointsSet = polyDataUtils.getPolyDataPoints(polyData);\n            if (!worldPointsSet) {\n                return;\n            }\n            const colorArray = actorEntry.actor.getProperty().getColor();\n            const color = colorToString(colorArray);\n            actorWorldPointsMap.set(cacheId, { worldPointsSet, color });\n        }\n    });\n}\nfunction getCacheId(viewport) {\n    const { viewPlaneNormal } = viewport.getCamera();\n    const imageIndex = viewport.getCurrentImageIdIndex();\n    return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;\n}\nfunction colorToString(colorArray) {\n    function colorComponentToString(component) {\n        let componentString = Math.floor(component * 255).toString(16);\n        if (componentString.length === 1) {\n            componentString = '0' + componentString;\n        }\n        return componentString;\n    }\n    return ('#' +\n        colorComponentToString(colorArray[0]) +\n        colorComponentToString(colorArray[1]) +\n        colorComponentToString(colorArray[2]));\n}\nfunction removeExtraPoints(viewport, worldPointsSet) {\n    return worldPointsSet.map((worldPoints) => {\n        const canvasPoints = worldPoints.map((point) => {\n            const canvasPoint = viewport.worldToCanvas(point);\n            return [Math.floor(canvasPoint[0]), Math.floor(canvasPoint[1])];\n        });\n        let lastPoint;\n        const newWorldPoints = [];\n        let newCanvasPoints = [];\n        for (let i = 0; i < worldPoints.length; i++) {\n            if (lastPoint) {\n                if (distanceToPoint(lastPoint, canvasPoints[i]) > 0) {\n                    newWorldPoints.push(worldPoints[i]);\n                    newCanvasPoints.push(canvasPoints[i]);\n                }\n            }\n            lastPoint = canvasPoints[i];\n        }\n        const firstPoint = newCanvasPoints[0];\n        for (let j = Math.min(30, newCanvasPoints.length); j < newCanvasPoints.length; j++) {\n            if (distanceToPoint(firstPoint, newCanvasPoints[j]) < 0.5) {\n                newCanvasPoints = newCanvasPoints.slice(0, j);\n                return newWorldPoints.slice(0, j);\n            }\n        }\n        return newWorldPoints;\n    });\n}\nSegmentationIntersectionTool.toolName = 'SegmentationIntersection';\nexport default SegmentationIntersectionTool;\n","export function pointToString(point, decimals = 5) {\n    return (parseFloat(point[0]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[1]).toFixed(decimals) +\n        ',' +\n        parseFloat(point[2]).toFixed(decimals) +\n        ',');\n}\n","import { getEnabledElement, StackViewport, VolumeViewport, utilities, getEnabledElementByIds, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\nclass ReferenceCursors extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            displayThreshold: 5,\n            positionSync: true,\n            disableCursor: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isHandleOutsideImage = false;\n        this._elementWithCursor = null;\n        this._currentCursorWorldPosition = null;\n        this._currentCanvasPosition = null;\n        this._disableCursorEnabled = false;\n        this.mouseMoveCallback = (evt) => {\n            const { detail } = evt;\n            const { element, currentPoints } = detail;\n            this._currentCursorWorldPosition = currentPoints.world;\n            this._currentCanvasPosition = currentPoints.canvas;\n            this._elementWithCursor = element;\n            const annotation = this.getActiveAnnotation(element);\n            if (annotation === null) {\n                this.createInitialAnnotation(currentPoints.world, element);\n                return false;\n            }\n            this.updateAnnotationPosition(element, annotation);\n            return false;\n        };\n        this.createInitialAnnotation = (worldPos, element) => {\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                throw new Error('No enabled element found');\n            }\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            if (!viewPlaneNormal || !viewUp) {\n                throw new Error('Camera not found');\n            }\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                },\n            };\n            const annotations = getAnnotations(this.getToolName(), element);\n            if (annotations.length > 0) {\n                return null;\n            }\n            const annotationId = addAnnotation(annotation, element);\n            if (annotationId === null) {\n                return;\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.onCameraModified = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, previousCamera, camera } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const viewport = enabledElement.viewport;\n            if (element !== this._elementWithCursor) {\n                return;\n            }\n            const oldFocalPoint = previousCamera.focalPoint;\n            const cameraNormal = camera.viewPlaneNormal;\n            const newFocalPoint = camera.focalPoint;\n            const deltaCameraFocalPoint = [0, 0, 0];\n            vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n            if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) {\n                return;\n            }\n            const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n            if (Math.abs(dotProduct) < 1e-2) {\n                return;\n            }\n            if (!this._currentCanvasPosition) {\n                return;\n            }\n            const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n            this._currentCursorWorldPosition = newWorldPos;\n            this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, FrameOfReferenceUID } = enabledElement;\n            const isElementWithCursor = this._elementWithCursor === viewport.element;\n            if (this.configuration.positionSync && !isElementWithCursor) {\n                this.updateViewportImage(viewport);\n            }\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                if (!annotationUID) {\n                    return renderStatus;\n                }\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidthBase = parseFloat(this.getStyle('lineWidth', styleSpecifier, annotation));\n                const lineWidth = typeof lineWidthBase === 'number' && isElementWithCursor\n                    ? lineWidthBase\n                    : lineWidthBase;\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (points[0].some((e) => isNaN(e))) {\n                    return renderStatus;\n                }\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const crosshairUIDs = {\n                    upper: 'upper',\n                    right: 'right',\n                    lower: 'lower',\n                    left: 'left',\n                };\n                const [x, y] = canvasCoordinates[0];\n                const centerSpace = isElementWithCursor ? 20 : 7;\n                const lineLength = isElementWithCursor ? 5 : 7;\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.upper, [x, y - (centerSpace / 2 + lineLength)], [x, y - centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.lower, [x, y + (centerSpace / 2 + lineLength)], [x, y + centerSpace / 2], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.right, [x + (centerSpace / 2 + lineLength), y], [x + centerSpace / 2, y], { color, lineDash, lineWidth });\n                drawLine(svgDrawingHelper, annotationUID, crosshairUIDs.left, [x - (centerSpace / 2 + lineLength), y], [x - centerSpace / 2, y], { color, lineDash, lineWidth });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._disableCursorEnabled = this.configuration.disableCursor;\n    }\n    onSetToolActive() {\n        this._disableCursorEnabled = this.configuration.disableCursor;\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                hideElementCursor(element.viewport.element);\n            }\n        });\n    }\n    onSetToolDisabled() {\n        if (!this._disableCursorEnabled) {\n            return;\n        }\n        const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n        if (!viewportIds) {\n            return;\n        }\n        const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n        enabledElements.forEach((element) => {\n            if (element) {\n                resetElementCursor(element.viewport.element);\n            }\n        });\n    }\n    getActiveAnnotation(element) {\n        const annotations = getAnnotations(this.getToolName(), element);\n        if (!annotations.length) {\n            return null;\n        }\n        const targetAnnotation = annotations[0];\n        return targetAnnotation;\n    }\n    updateAnnotationPosition(element, annotation) {\n        const worldPos = this._currentCursorWorldPosition;\n        if (!worldPos) {\n            return;\n        }\n        if (!annotation.data?.handles?.points) {\n            return;\n        }\n        annotation.data.handles.points = [[...worldPos]];\n        annotation.invalidated = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!(annotations instanceof Array) || annotations.length === 0) {\n            return [];\n        }\n        const annotation = annotations[0];\n        const viewport = getEnabledElement(element)?.viewport;\n        if (!viewport) {\n            return [];\n        }\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, focalPoint } = camera;\n        if (!viewPlaneNormal || !focalPoint) {\n            return [];\n        }\n        const points = annotation.data?.handles?.points;\n        if (!(points instanceof Array) || points.length !== 1) {\n            return [];\n        }\n        const worldPos = points[0];\n        const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n        const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n        return distance < this.configuration.displayThreshold ? [annotation] : [];\n    }\n    updateViewportImage(viewport) {\n        const currentMousePosition = this._currentCursorWorldPosition;\n        if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e))) {\n            return;\n        }\n        if (viewport instanceof StackViewport) {\n            const closestIndex = utilities.getClosestStackImageIndexForPoint(currentMousePosition, viewport);\n            if (closestIndex === null) {\n                return;\n            }\n            if (closestIndex !== viewport.getCurrentImageIdIndex()) {\n                viewport.setImageIdIndex(closestIndex);\n            }\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n            if (!focalPoint || !viewPlaneNormal) {\n                return;\n            }\n            const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n            const currentDistance = utilities.planar.planeDistanceToPoint(plane, currentMousePosition, true);\n            if (Math.abs(currentDistance) < 0.5) {\n                return;\n            }\n            const normalizedViewPlane = vec3.normalize(vec3.create(), vec3.fromValues(...viewPlaneNormal));\n            const scaledPlaneNormal = vec3.scale(vec3.create(), normalizedViewPlane, currentDistance);\n            const newFocalPoint = vec3.add(vec3.create(), vec3.fromValues(...focalPoint), scaledPlaneNormal);\n            const isInBounds = true;\n            if (isInBounds) {\n                viewport.setCamera({ focalPoint: newFocalPoint });\n                const renderingEngine = viewport.getRenderingEngine();\n                if (renderingEngine) {\n                    renderingEngine.renderViewport(viewport.id);\n                }\n            }\n        }\n    }\n}\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport { getEnabledElementByIds, getRenderingEngines, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, } from '../stateManagement/annotation/annotationState';\nimport { drawLine as drawLineSvg, drawTextBox as drawTextBoxSvg, } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nconst viewportsWithAnnotations = [];\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            viewportId: '',\n            scaleLocation: 'bottom',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.editData = null;\n        this._init = () => {\n            const renderingEngines = getRenderingEngines();\n            const renderingEngine = renderingEngines[0];\n            if (!renderingEngine) {\n                return;\n            }\n            const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n            if (!viewportIds) {\n                return;\n            }\n            const enabledElements = viewportIds.map((e) => getEnabledElementByIds(e.viewportId, e.renderingEngineId));\n            let { viewport } = enabledElements[0];\n            const { FrameOfReferenceUID } = enabledElements[0];\n            if (this.configuration.viewportId) {\n                enabledElements.forEach((element) => {\n                    if (element.viewport.id == this.configuration.viewportId) {\n                        viewport = element.viewport;\n                    }\n                });\n            }\n            if (!viewport) {\n                return;\n            }\n            const { viewUp, viewPlaneNormal } = viewport.getCamera();\n            const viewportCanvasCornersInWorld = csUtils.getViewportImageCornersInWorld(viewport);\n            let annotation = this.editData?.annotation;\n            const annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (annotations.length) {\n                annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n            }\n            enabledElements.forEach((element) => {\n                const { viewport } = element;\n                if (!viewportsWithAnnotations.includes(viewport.id)) {\n                    const newAnnotation = {\n                        metadata: {\n                            toolName: this.getToolName(),\n                            viewPlaneNormal: [...viewPlaneNormal],\n                            viewUp: [...viewUp],\n                            FrameOfReferenceUID,\n                            referencedImageId: null,\n                        },\n                        data: {\n                            handles: {\n                                points: csUtils.getViewportImageCornersInWorld(viewport),\n                            },\n                            viewportId: viewport.id,\n                        },\n                    };\n                    viewportsWithAnnotations.push(viewport.id);\n                    addAnnotation(newAnnotation, viewport.element);\n                    annotation = newAnnotation;\n                }\n            });\n            if (this.editData?.annotation &&\n                this.editData.annotation.data.viewportId == viewport.id) {\n                this.editData.annotation.data.handles.points =\n                    viewportCanvasCornersInWorld;\n                this.editData.annotation.data.viewportId = viewport.id;\n            }\n            this.editData = {\n                viewport,\n                renderingEngine,\n                annotation,\n            };\n        };\n        this.onSetToolEnabled = () => {\n            this._init();\n        };\n        this.onCameraModified = (evt) => {\n            this.configuration.viewportId = evt.detail.viewportId;\n            this._init();\n        };\n        this.computeScaleSize = (worldWidthViewport, worldHeightViewport, location) => {\n            const scaleSizes = [\n                16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n            ];\n            let currentScaleSize;\n            if (location == 'top' || location == 'bottom') {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldWidthViewport * 0.6 &&\n                    scaleSize > worldWidthViewport * 0.2);\n            }\n            else {\n                currentScaleSize = scaleSizes.filter((scaleSize) => scaleSize < worldHeightViewport * 0.6 &&\n                    scaleSize > worldHeightViewport * 0.2);\n            }\n            return currentScaleSize[0];\n        };\n        this.computeEndScaleTicks = (canvasCoordinates, location) => {\n            const locationTickOffset = {\n                bottom: [\n                    [0, -10],\n                    [0, -10],\n                ],\n                top: [\n                    [0, 10],\n                    [0, 10],\n                ],\n                left: [\n                    [0, 0],\n                    [10, 0],\n                ],\n                right: [\n                    [0, 0],\n                    [-10, 0],\n                ],\n            };\n            const endTick1 = [\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            const endTick2 = [\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n                ],\n                [\n                    canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n                    canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n                ],\n            ];\n            return {\n                endTick1: endTick1,\n                endTick2: endTick2,\n            };\n        };\n        this.computeInnerScaleTicks = (scaleSize, location, annotationUID, leftTick, rightTick) => {\n            let canvasScaleSize;\n            if (location == 'bottom' || location == 'top') {\n                canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n            }\n            else if (location == 'left' || location == 'right') {\n                canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n            }\n            const tickIds = [];\n            const tickUIDs = [];\n            const tickCoordinates = [];\n            let numberSmallTicks = scaleSize;\n            if (scaleSize >= 50) {\n                numberSmallTicks = scaleSize / 10;\n            }\n            const tickSpacing = canvasScaleSize / numberSmallTicks;\n            for (let i = 0; i < numberSmallTicks - 1; i++) {\n                const locationOffset = {\n                    bottom: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), 5],\n                    ],\n                    top: [\n                        [tickSpacing * (i + 1), 0],\n                        [tickSpacing * (i + 1), -5],\n                    ],\n                    left: [\n                        [0, tickSpacing * (i + 1)],\n                        [-5, tickSpacing * (i + 1)],\n                    ],\n                    right: [\n                        [0, tickSpacing * (i + 1)],\n                        [5, tickSpacing * (i + 1)],\n                    ],\n                };\n                tickIds.push(`${annotationUID}-tick${i}`);\n                tickUIDs.push(`tick${i}`);\n                if ((i + 1) % 5 == 0) {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][0][0],\n                            leftTick[1][1] + locationOffset[location][0][1],\n                        ],\n                    ]);\n                }\n                else {\n                    tickCoordinates.push([\n                        [\n                            leftTick[0][0] + locationOffset[location][0][0],\n                            leftTick[0][1] + locationOffset[location][0][1],\n                        ],\n                        [\n                            leftTick[1][0] + locationOffset[location][1][0],\n                            leftTick[1][1] + locationOffset[location][1][1],\n                        ],\n                    ]);\n                }\n            }\n            return { tickIds, tickUIDs, tickCoordinates };\n        };\n        this.computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n            let worldCoordinates;\n            let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n            topBottomVec = vec3.normalize(vec3.create(), topBottomVec);\n            let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n            topRightVec = vec3.normalize(vec3.create(), topRightVec);\n            const midpointLocation = {\n                bottom: [pointSet[1], pointSet[2]],\n                top: [pointSet[0], pointSet[3]],\n                right: [pointSet[2], pointSet[3]],\n                left: [pointSet[0], pointSet[1]],\n            };\n            const midpoint = vec3\n                .add(vec3.create(), midpointLocation[location][0], midpointLocation[location][0])\n                .map((i) => i / 2);\n            const offset = scaleSize /\n                2 /\n                Math.sqrt(Math.pow(topBottomVec[0], 2) +\n                    Math.pow(topBottomVec[1], 2) +\n                    Math.pow(topBottomVec[2], 2));\n            if (location == 'top' || location == 'bottom') {\n                worldCoordinates = [\n                    vec3.subtract(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                    vec3.add(vec3.create(), midpoint, topRightVec.map((i) => i * offset)),\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                worldCoordinates = [\n                    vec3.add(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                    vec3.subtract(vec3.create(), midpoint, topBottomVec.map((i) => i * offset)),\n                ];\n            }\n            return worldCoordinates;\n        };\n        this.computeCanvasScaleCoordinates = (canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location) => {\n            let scaleCanvasCoordinates;\n            if (location == 'top' || location == 'bottom') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][0] - canvasCoordinates[1][0];\n                scaleCanvasCoordinates = [\n                    [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n                    [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n                ];\n            }\n            else if (location == 'left' || location == 'right') {\n                const worldDistanceOnCanvas = canvasCoordinates[0][1] - canvasCoordinates[1][1];\n                scaleCanvasCoordinates = [\n                    [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n                    [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n                ];\n            }\n            return scaleCanvasCoordinates;\n        };\n        this.computeScaleBounds = (canvasSize, horizontalReduction, verticalReduction, location) => {\n            const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n            const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n            const locationBounds = {\n                bottom: [-vReduction, -hReduction],\n                top: [vReduction, hReduction],\n                left: [vReduction, hReduction],\n                right: [-vReduction, -hReduction],\n            };\n            const canvasBounds = {\n                bottom: [canvasSize.height, canvasSize.width],\n                top: [0, canvasSize.width],\n                left: [canvasSize.height, 0],\n                right: [canvasSize.height, canvasSize.width],\n            };\n            return {\n                height: canvasBounds[location][0] + locationBounds[location][0],\n                width: canvasBounds[location][1] + locationBounds[location][1],\n            };\n        };\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.editData || !this.editData.viewport) {\n            return;\n        }\n        const location = this.configuration.scaleLocation;\n        const { viewport } = enabledElement;\n        const annotations = getAnnotations(this.getToolName(), viewport.element);\n        const annotation = annotations.filter((thisAnnotation) => thisAnnotation.data.viewportId == viewport.id)[0];\n        const canvas = enabledElement.viewport.canvas;\n        const renderStatus = false;\n        if (!viewport) {\n            return renderStatus;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        const canvasSize = {\n            width: canvas.width / window.devicePixelRatio || 1,\n            height: canvas.height / window.devicePixelRatio || 1,\n        };\n        const topLeft = annotation.data.handles.points[0];\n        const topRight = annotation.data.handles.points[1];\n        const bottomLeft = annotation.data.handles.points[2];\n        const bottomRight = annotation.data.handles.points[3];\n        const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n        const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n        const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n        const hscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const vscaleBounds = this.computeScaleBounds(canvasSize, 0.05, 0.05, location);\n        const scaleSize = this.computeScaleSize(worldWidthViewport, worldHeightViewport, location);\n        const canvasCoordinates = this.computeWorldScaleCoordinates(scaleSize, location, pointSet1).map((world) => viewport.worldToCanvas(world));\n        const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(canvasSize, canvasCoordinates, vscaleBounds, hscaleBounds, location);\n        const scaleTicks = this.computeEndScaleTicks(scaleCanvasCoordinates, location);\n        const { annotationUID } = annotation;\n        styleSpecifier.annotationUID = annotationUID;\n        const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n        const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n        const color = this.getStyle('color', styleSpecifier, annotation);\n        const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n        const scaleId = `${annotationUID}-scaleline`;\n        const scaleLineUID = '1';\n        drawLineSvg(svgDrawingHelper, annotationUID, scaleLineUID, scaleCanvasCoordinates[0], scaleCanvasCoordinates[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, scaleId);\n        const leftTickId = `${annotationUID}-left`;\n        const leftTickUID = '2';\n        drawLineSvg(svgDrawingHelper, annotationUID, leftTickUID, scaleTicks.endTick1[0], scaleTicks.endTick1[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, leftTickId);\n        const rightTickId = `${annotationUID}-right`;\n        const rightTickUID = '3';\n        drawLineSvg(svgDrawingHelper, annotationUID, rightTickUID, scaleTicks.endTick2[0], scaleTicks.endTick2[1], {\n            color,\n            width: lineWidth,\n            lineDash,\n            shadow,\n        }, rightTickId);\n        const locationTextOffest = {\n            bottom: [-10, -42],\n            top: [-12, -35],\n            left: [-40, -20],\n            right: [-50, -20],\n        };\n        const textCanvasCoordinates = [\n            scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n            scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n        ];\n        const textBoxLines = this._getTextLines(scaleSize);\n        const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(scaleSize, location, annotationUID, scaleTicks.endTick1, scaleTicks.endTick2);\n        for (let i = 0; i < tickUIDs.length; i++) {\n            drawLineSvg(svgDrawingHelper, annotationUID, tickUIDs[i], tickCoordinates[i][0], tickCoordinates[i][1], {\n                color,\n                width: lineWidth,\n                lineDash,\n                shadow,\n            }, tickIds[i]);\n        }\n        const textUID = 'text0';\n        drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textBoxLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], {\n            fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n            fontSize: '14px',\n            lineDash: '2,3',\n            lineWidth: '1',\n            shadow: true,\n            color: color,\n        });\n        return renderStatus;\n    }\n    _getTextLines(scaleSize) {\n        let scaleSizeDisplayValue;\n        let scaleSizeUnits;\n        if (scaleSize >= 50) {\n            scaleSizeDisplayValue = scaleSize / 10;\n            scaleSizeUnits = ' cm';\n        }\n        else {\n            scaleSizeDisplayValue = scaleSize;\n            scaleSizeUnits = ' mm';\n        }\n        const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n        return textLines;\n    }\n}\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { getAnnotations } from '../stateManagement';\nimport { point } from '../utilities/math';\nimport { Events, ToolModes, AnnotationStyleStates, ChangeTypes, } from '../enums';\nimport { triggerAnnotationRenderForViewportIds } from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { hideElementCursor, resetElementCursor, } from '../cursors/elementCursor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\nimport { triggerAnnotationModified } from '../stateManagement/annotation/helpers/state';\nimport CircleSculptCursor from './SculptorTool/CircleSculptCursor';\nimport { distancePointToContour } from './distancePointToContour';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass SculptorTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            minSpacing: 1,\n            referencedToolNames: [\n                'PlanarFreehandROI',\n                'PlanarFreehandContourSegmentationTool',\n            ],\n            toolShape: 'circle',\n            referencedToolName: 'PlanarFreehandROI',\n            updateCursorSize: 'dynamic',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.registeredShapes = new Map();\n        this.isActive = false;\n        this.commonData = {\n            activeAnnotationUID: null,\n            viewportIdsToRender: [],\n            isEditingOpenContour: false,\n            canvasLocation: undefined,\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.configureToolSize(evt);\n            this.selectFreehandTool(eventData);\n            if (this.commonData.activeAnnotationUID === null) {\n                return;\n            }\n            this.isActive = true;\n            hideElementCursor(element);\n            this.activateModify(element);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.configureToolSize(evt);\n                this.updateCursor(evt);\n            }\n            else {\n                this.commonData.canvasLocation = undefined;\n            }\n        };\n        this.endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const config = this.configuration;\n            const enabledElement = getEnabledElement(element);\n            this.isActive = false;\n            this.deactivateModify(element);\n            resetElementCursor(element);\n            const { renderingEngineId, viewportId } = enabledElement;\n            const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n            const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (toolInstance.configuration.calculateStats) {\n                activeAnnotation.invalidated = true;\n            }\n            triggerAnnotationModified(activeAnnotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this.dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const element = eventData.element;\n            this.updateCursor(evt);\n            const annotations = this.filterSculptableAnnotationsForElement(element);\n            const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n            if (!annotations?.length || !this.isActive) {\n                return;\n            }\n            const points = activeAnnotation.data.contour.polyline;\n            this.sculpt(eventData, points);\n        };\n        this.registerShapes(CircleSculptCursor.shapeName, CircleSculptCursor);\n        this.setToolShape(this.configuration.toolShape);\n    }\n    registerShapes(shapeName, shapeClass) {\n        const shape = new shapeClass();\n        this.registeredShapes.set(shapeName, shape);\n    }\n    sculpt(eventData, points) {\n        const config = this.configuration;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        this.sculptData = {\n            mousePoint: eventData.currentPoints.world,\n            mouseCanvasPoint: eventData.currentPoints.canvas,\n            deltaWorld: eventData.deltaPoints.world,\n            points,\n            maxSpacing: cursorShape.getMaxSpacing(config.minSpacing),\n            element: element,\n        };\n        const pushedHandles = cursorShape.pushHandles(viewport, this.sculptData);\n        if (pushedHandles.first !== undefined) {\n            this.insertNewHandles(pushedHandles);\n        }\n    }\n    interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing) {\n        const { element } = this.sculptData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const nextHandleIndex = contourIndex(i + 1, points.length);\n        const currentCanvasPoint = viewport.worldToCanvas(points[i]);\n        const nextCanvasPoint = viewport.worldToCanvas(points[nextHandleIndex]);\n        const distanceToNextHandle = point.distanceToPoint(currentCanvasPoint, nextCanvasPoint);\n        if (distanceToNextHandle > maxSpacing) {\n            indicesToInsertAfter.push(i);\n        }\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const element = eventData.element;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine, viewport } = enabledElement;\n        this.commonData.viewportIdsToRender = [viewport.id];\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const activeAnnotation = annotations.find((annotation) => annotation.annotationUID === this.commonData.activeAnnotationUID);\n        this.commonData.canvasLocation = eventData.currentPoints.canvas;\n        if (this.isActive) {\n            activeAnnotation.highlighted = true;\n        }\n        else {\n            const cursorShape = this.registeredShapes.get(this.selectedShape);\n            const canvasCoords = eventData.currentPoints.canvas;\n            if (this.configuration.updateCursorSize === 'dynamic') {\n                cursorShape.updateToolSize(canvasCoords, viewport, activeAnnotation);\n            }\n        }\n        triggerAnnotationRenderForViewportIds(this.commonData.viewportIdsToRender);\n    }\n    filterSculptableAnnotationsForElement(element) {\n        const config = this.configuration;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngineId, viewportId } = enabledElement;\n        const sculptableAnnotations = [];\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        const toolInstance = toolGroup.getToolInstance(config.referencedToolName);\n        config.referencedToolNames.forEach((referencedToolName) => {\n            const annotations = getAnnotations(referencedToolName, element);\n            if (annotations) {\n                sculptableAnnotations.push(...annotations);\n            }\n        });\n        return toolInstance.filterInteractableAnnotationsForElement(element, sculptableAnnotations);\n    }\n    configureToolSize(evt) {\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.configureToolSize(evt);\n    }\n    insertNewHandles(pushedHandles) {\n        const indicesToInsertAfter = this.findNewHandleIndices(pushedHandles);\n        let newIndexModifier = 0;\n        for (let i = 0; i < indicesToInsertAfter?.length; i++) {\n            const insertIndex = indicesToInsertAfter[i] + 1 + newIndexModifier;\n            this.insertHandleRadially(insertIndex);\n            newIndexModifier++;\n        }\n    }\n    findNewHandleIndices(pushedHandles) {\n        const { points, maxSpacing } = this.sculptData;\n        const indicesToInsertAfter = [];\n        for (let i = pushedHandles.first; i <= pushedHandles.last; i++) {\n            this.interpolatePointsWithinMaxSpacing(i, points, indicesToInsertAfter, maxSpacing);\n        }\n        return indicesToInsertAfter;\n    }\n    insertHandleRadially(insertIndex) {\n        const { points } = this.sculptData;\n        if (insertIndex > points.length - 1 &&\n            this.commonData.isEditingOpenContour) {\n            return;\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        const previousIndex = insertIndex - 1;\n        const nextIndex = contourIndex(insertIndex, points.length);\n        const insertPosition = cursorShape.getInsertPosition(previousIndex, nextIndex, this.sculptData);\n        const handleData = insertPosition;\n        points.splice(insertIndex, 0, handleData);\n    }\n    selectFreehandTool(eventData) {\n        const closestAnnotationUID = this.getClosestFreehandToolOnElement(eventData);\n        if (closestAnnotationUID === undefined) {\n            return;\n        }\n        this.commonData.activeAnnotationUID = closestAnnotationUID;\n    }\n    getClosestFreehandToolOnElement(eventData) {\n        const { element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const config = this.configuration;\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const canvasPoints = eventData.currentPoints.canvas;\n        const closest = {\n            distance: Infinity,\n            toolIndex: undefined,\n            annotationUID: undefined,\n        };\n        for (let i = 0; i < annotations?.length; i++) {\n            if (annotations[i].isLocked || !annotations[i].isVisible) {\n                continue;\n            }\n            const distanceFromTool = distancePointToContour(viewport, annotations[i], canvasPoints);\n            if (distanceFromTool === -1) {\n                continue;\n            }\n            if (distanceFromTool < closest.distance) {\n                closest.distance = distanceFromTool;\n                closest.toolIndex = i;\n                closest.annotationUID = annotations[i].annotationUID;\n            }\n        }\n        this.commonData.isEditingOpenContour =\n            !annotations[closest.toolIndex].data.contour.closed;\n        config.referencedToolName =\n            annotations[closest.toolIndex].metadata.toolName;\n        return closest.annotationUID;\n    }\n    activateModify(element) {\n        element.addEventListener(Events.MOUSE_UP, this.endCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.addEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.addEventListener(Events.TOUCH_END, this.endCallback);\n        element.addEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    deactivateModify(element) {\n        element.removeEventListener(Events.MOUSE_UP, this.endCallback);\n        element.removeEventListener(Events.MOUSE_CLICK, this.endCallback);\n        element.removeEventListener(Events.MOUSE_DRAG, this.dragCallback);\n        element.removeEventListener(Events.TOUCH_TAP, this.endCallback);\n        element.removeEventListener(Events.TOUCH_END, this.endCallback);\n        element.removeEventListener(Events.TOUCH_DRAG, this.dragCallback);\n    }\n    setToolShape(toolShape) {\n        this.selectedShape =\n            this.registeredShapes.get(toolShape) ?? CircleSculptCursor.shapeName;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const viewportIdsToRender = this.commonData.viewportIdsToRender;\n        if (!this.commonData.canvasLocation ||\n            this.mode !== ToolModes.Active ||\n            !viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const annotations = this.filterSculptableAnnotationsForElement(element);\n        if (!annotations?.length) {\n            return;\n        }\n        const styleSpecifier = {\n            toolGroupId: this.toolGroupId,\n            toolName: this.getToolName(),\n            viewportId: enabledElement.viewport.id,\n        };\n        let color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Default, this.mode);\n        if (this.isActive) {\n            color = getStyleProperty('color', styleSpecifier, AnnotationStyleStates.Highlighted, this.mode);\n        }\n        const cursorShape = this.registeredShapes.get(this.selectedShape);\n        cursorShape.renderShape(svgDrawingHelper, this.commonData.canvasLocation, {\n            color,\n        });\n    }\n}\nexport const contourIndex = (i, length) => {\n    return (i + length) % length;\n};\nSculptorTool.toolName = 'SculptorTool';\nexport default SculptorTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nconst DIRECTIONS = {\n    X: [1, 0, 0],\n    Y: [0, 1, 0],\n    Z: [0, 0, 1],\n    CUSTOM: [],\n};\nclass VolumeRotateTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            direction: DIRECTIONS.Z,\n            rotateIncrementDegrees: 30,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n    }\n    mouseWheelCallback(evt) {\n        const { element, wheel } = evt.detail;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { direction, rotateIncrementDegrees } = this.configuration;\n        const camera = viewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n        const { direction: deltaY } = wheel;\n        const [cx, cy, cz] = focalPoint;\n        const [ax, ay, az] = direction;\n        const angle = (deltaY * (rotateIncrementDegrees * Math.PI)) / 180;\n        const newPosition = [0, 0, 0];\n        const newFocalPoint = [0, 0, 0];\n        const newViewUp = [0, 0, 0];\n        const transform = mat4.identity(new Float32Array(16));\n        mat4.translate(transform, transform, [cx, cy, cz]);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        mat4.translate(transform, transform, [-cx, -cy, -cz]);\n        vec3.transformMat4(newPosition, position, transform);\n        vec3.transformMat4(newFocalPoint, focalPoint, transform);\n        mat4.identity(transform);\n        mat4.rotate(transform, transform, angle, [ax, ay, az]);\n        vec3.transformMat4(newViewUp, viewUp, transform);\n        viewport.setCamera({\n            position: newPosition,\n            viewUp: newViewUp,\n            focalPoint: newFocalPoint,\n        });\n        viewport.render();\n    }\n}\nVolumeRotateTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateTool;\n","import { vec2 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawTextBox as drawTextBoxSvg } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass LabelTool extends AnnotationTool {\n    static { this.toolName = 'Label'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotationUID } = annotation;\n            const point = annotation.data.handles.points[0];\n            const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n            const dist = vec2.distance(canvasCoords, annotationCanvasCoordinate);\n            if (dist < proximity) {\n                return true;\n            }\n            const svgLayer = element.querySelector('svg');\n            if (!svgLayer) {\n                return false;\n            }\n            const textGroup = svgLayer.querySelector(`g[data-annotation-uid=\"${annotationUID}\"]`);\n            if (!textGroup) {\n                return false;\n            }\n            const textGroupElement = textGroup;\n            const bbox = textGroupElement.getBBox();\n            const transform = textGroupElement.getAttribute('transform');\n            let translateX = 0;\n            let translateY = 0;\n            if (transform) {\n                const matches = transform.match(/translate\\(([-\\d.]+)\\s+([-\\d.]+)\\)/);\n                if (matches) {\n                    translateX = parseFloat(matches[1]);\n                    translateY = parseFloat(matches[2]);\n                }\n            }\n            const x = bbox.x + translateX;\n            const y = bbox.y + translateY;\n            const isNear = canvasCoords[0] >= x &&\n                canvasCoords[0] <= x + bbox.width &&\n                canvasCoords[1] >= y &&\n                canvasCoords[1] <= y + bbox.height;\n            return isNear;\n        };\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                annotationUID: null,\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    text: '',\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                    },\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n                offset: [0, 0, 0],\n            };\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((text) => {\n                if (!text) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                resetElementCursor(element);\n                annotation.data.text = text;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            let offset = [0, 0, 0];\n            if (currentPoints && currentPoints.world) {\n                const initialWorldPos = currentPoints.world;\n                const anchorWorldPos = annotation.data.handles.points[0];\n                offset = [\n                    anchorWorldPos[0] - initialWorldPos[0],\n                    anchorWorldPos[1] - initialWorldPos[1],\n                    anchorWorldPos[2] - initialWorldPos[2],\n                ];\n            }\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                offset,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, offset } = this.editData;\n            if (offset) {\n                annotation.data.handles.points[0] = [\n                    worldPos[0] + offset[0],\n                    worldPos[1] + offset[1],\n                    worldPos[2] + offset[2],\n                ];\n            }\n            else {\n                annotation.data.handles.points[0] = [...worldPos];\n            }\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.LabelChange);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const point = data.handles.points[0];\n                styleSpecifier.annotationUID = annotationUID;\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!data.text) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                const textBoxUID = '1';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [data.text], canvasCoordinates, {\n                    ...options,\n                    padding: 0,\n                });\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, position, text, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const { viewPlaneNormal, viewUp } = viewport.getCamera();\n        const instance = new this();\n        const referencedImageId = instance.getReferencedImageId(viewport, position, viewPlaneNormal, viewUp);\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                text,\n                handles: {\n                    points: [position],\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...options,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle, interactionType) { }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nLabelTool.toolName = 'Label';\nexport default LabelTool;\n","import { Events, ChangeTypes } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass LengthTool extends AnnotationTool {\n    static { this.toolName = 'Length'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(LengthTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const length = this._calculateLength(worldPos1, worldPos2) / scale;\n            if (this._isInsideVolume(index1, index2, dimensions)) {\n                this.isHandleOutsideImage = false;\n            }\n            else {\n                this.isHandleOutsideImage = true;\n            }\n            cachedStats[targetId] = {\n                length,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { length, unit } = cachedVolumeStats;\n    if (length === undefined || length === null || isNaN(length)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(length)} ${unit}`];\n    return textLines;\n}\nexport default LengthTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawHeight as drawHeightSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nconst { transformWorldToIndex } = csUtils;\nclass HeightTool extends AnnotationTool {\n    static { this.toolName = 'Height'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const enabledElement = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const heightUID = '0';\n                drawHeightSvg(svgDrawingHelper, annotationUID, heightUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash: lineDash,\n                });\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateHeight(pos1, pos2) {\n        const dx = pos2[0] - pos1[0];\n        const dy = pos2[1] - pos1[1];\n        const dz = pos2[2] - pos1[2];\n        if (dx == 0) {\n            if (dy != 0) {\n                return Math.abs(dz);\n            }\n            else {\n                return 0;\n            }\n        }\n        else if (dy == 0) {\n            return Math.abs(dz);\n        }\n        else if (dz == 0) {\n            return Math.abs(dy);\n        }\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData, dimensions } = image;\n            const index1 = transformWorldToIndex(imageData, worldPos1);\n            const index2 = transformWorldToIndex(imageData, worldPos2);\n            const handles = [index1, index2];\n            const { scale, unit } = getCalibratedLengthUnitsAndScale(image, handles);\n            const height = this._calculateHeight(worldPos1, worldPos2) / scale;\n            const outside = this._isInsideVolume(index1, index2, dimensions);\n            this.isHandleOutsideImage = outside;\n            cachedStats[targetId] = {\n                height,\n                unit,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { height, unit } = cachedVolumeStats;\n    if (height === undefined || height === null || isNaN(height)) {\n        return;\n    }\n    const textLines = [`${csUtils.roundNumber(height)} ${unit}`];\n    return textLines;\n}\nexport default HeightTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nconst { transformWorldToIndex } = csUtils;\nclass ProbeTool extends AnnotationTool {\n    static { this.toolName = 'Probe'; }\n    static { this.probeDefaults = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            handleRadius: '6',\n            textCanvasOffset: {\n                x: 6,\n                y: -6,\n            },\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps) {\n        super(toolProps, AnnotationTool.mergeDefaultProps(ProbeTool.probeDefaults, defaultToolProps));\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const annotationUID = annotation.annotationUID;\n                const data = annotation.data;\n                const point = data.handles.points[0];\n                const canvasCoordinates = viewport.worldToCanvas(point);\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats) {\n                    data.cachedStats = {};\n                }\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].value === null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        index: null,\n                        value: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement, ChangeTypes.StatsUpdated);\n                }\n                else if (annotation.invalidated) {\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                const handleGroupUID = '0';\n                drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color, lineWidth, handleRadius: this.configuration.handleRadius });\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (textLines) {\n                    const textCanvasCoordinates = [\n                        canvasCoordinates[0] + this.configuration.textCanvasOffset.x,\n                        canvasCoordinates[1] + this.configuration.textCanvasOffset.y,\n                    ];\n                    const textUID = '0';\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], options);\n                }\n            }\n            return renderStatus;\n        };\n    }\n    isPointNearTool(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        return vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n    }\n    toolSelectedCallback() { }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(ProbeTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    getHandleNearImagePoint(element, annotation, canvasCoords, proximity) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { data } = annotation;\n        const point = data.handles.points[0];\n        const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n        const near = vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n        if (near === true) {\n            return point;\n        }\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement, changeType = ChangeTypes.StatsUpdated) {\n        const data = annotation.data;\n        const { renderingEngineId, viewport } = enabledElement;\n        const { element } = viewport;\n        const worldPos = data.handles.points[0];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const pixelUnitsOptions = {\n                isPreScaled: isViewportPreScaled(viewport, targetId),\n                isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n            };\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { dimensions, imageData, metadata, voxelManager } = image;\n            const modality = metadata.Modality;\n            let ijk = transformWorldToIndex(imageData, worldPos);\n            ijk = vec3.round(ijk, ijk);\n            if (csUtils.indexWithinDimensions(ijk, dimensions)) {\n                this.isHandleOutsideImage = false;\n                let value = voxelManager.getAtIJKPoint(ijk);\n                if (targetId.startsWith('imageId:')) {\n                    const imageId = targetId.split('imageId:')[1];\n                    const imageURI = csUtils.imageIdToURI(imageId);\n                    const viewports = csUtils.getViewportsWithImageURI(imageURI);\n                    const viewport = viewports[0];\n                    ijk[2] = viewport.getCurrentImageIdIndex();\n                }\n                let modalityUnit;\n                if (modality === 'US') {\n                    const calibratedResults = getCalibratedProbeUnitsAndValue(image, [\n                        ijk,\n                    ]);\n                    const hasEnhancedRegionValues = calibratedResults.values.every((value) => value !== null);\n                    value = (hasEnhancedRegionValues ? calibratedResults.values : value);\n                    modalityUnit = hasEnhancedRegionValues\n                        ? calibratedResults.units\n                        : 'raw';\n                }\n                else {\n                    modalityUnit = getPixelValueUnits(modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                }\n                cachedStats[targetId] = {\n                    index: ijk,\n                    value,\n                    Modality: modality,\n                    modalityUnit,\n                };\n            }\n            else {\n                this.isHandleOutsideImage = true;\n                cachedStats[targetId] = {\n                    index: ijk,\n                    Modality: modality,\n                };\n            }\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, changeType);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined || !index) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    if (value instanceof Array && modalityUnit instanceof Array) {\n        for (let i = 0; i < value.length; i++) {\n            textLines.push(`${csUtils.roundNumber(value[i])} ${modalityUnit[i]}`);\n        }\n    }\n    else {\n        textLines.push(`${csUtils.roundNumber(value)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default ProbeTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { drawHandles as drawHandlesSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nclass DragProbeTool extends ProbeTool {\n    static { this.toolName = 'DragProbe'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.postMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                isVisible: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: { points: [[...worldPos]] },\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                newAnnotation: true,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.postTouchStartCallback = (evt) => {\n            return this.postMouseDownCallback(evt);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const annotations = this.filterInteractableAnnotationsForElement(viewport.element, [this.editData.annotation]);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const annotation = this.editData.annotation;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const point = data.handles.points[0];\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            styleSpecifier.annotationUID = annotationUID;\n            const { color } = this.getAnnotationStyle({\n                annotation,\n                styleSpecifier,\n            });\n            if (!data.cachedStats[targetId] ||\n                data.cachedStats[targetId].value === null) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    index: null,\n                    value: null,\n                };\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n            }\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, [canvasCoordinates], { color });\n            renderStatus = true;\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (textLines) {\n                const textCanvasCoordinates = [\n                    canvasCoordinates[0] + 6,\n                    canvasCoordinates[1] - 6,\n                ];\n                const textUID = '0';\n                drawTextBoxSvg(svgDrawingHelper, annotationUID, textUID, textLines, [textCanvasCoordinates[0], textCanvasCoordinates[1]], this.getLinkedTextBoxStyle(styleSpecifier, annotation));\n            }\n            return renderStatus;\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { index, value, modalityUnit } = cachedVolumeStats;\n    if (value === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n    textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n    return textLines;\n}\nexport default DragProbeTool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawEllipseByCoordinates as drawEllipseSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { pointInEllipse, getCanvasEllipseCorners, } from '../../utilities/math/ellipse';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { vec2 } from 'gl-matrix';\nconst { transformWorldToIndex } = csUtils;\nclass EllipticalROITool extends AnnotationTool {\n    static { this.toolName = 'EllipticalROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    initialRotation: viewport.getRotation(),\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                centerWorld: worldPos,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const [bottom, top, left, right] = canvasCoordinates;\n            const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n            const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n            const angle = Math.atan2(left[1] - right[1], left[0] - right[0]);\n            const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n            const minorEllipse = {\n                center,\n                xRadius: (w - proximity) / 2,\n                yRadius: (h - proximity) / 2,\n                angle,\n            };\n            const majorEllipse = {\n                center,\n                xRadius: (w + proximity) / 2,\n                yRadius: (h + proximity) / 2,\n                angle,\n            };\n            const pointInMinorEllipse = this._pointInEllipseCanvas(minorEllipse, canvasCoords);\n            const pointInMajorEllipse = this._pointInEllipseCanvas(majorEllipse, canvasCoords);\n            if (pointInMajorEllipse && !pointInMinorEllipse) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            let centerCanvas;\n            let centerWorld;\n            let canvasWidth;\n            let canvasHeight;\n            let originalHandleCanvas;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                const { viewport } = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = viewport;\n                handleIndex = points.findIndex((p) => p === handle);\n                const pointsCanvas = points.map(worldToCanvas);\n                originalHandleCanvas = pointsCanvas[handleIndex];\n                canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n                canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n                centerCanvas = [\n                    (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n                    (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n                ];\n                centerWorld = canvasToWorld(centerCanvas);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                canvasWidth,\n                canvasHeight,\n                centerWorld,\n                originalHandleCanvas,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerWorld, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const bottomCanvas = [centerCanvas[0], centerCanvas[1] - dY];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] + dY];\n            const leftCanvas = [centerCanvas[0] - dX, centerCanvas[1]];\n            const rightCanvas = [centerCanvas[0] + dX, centerCanvas[1]];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = viewport;\n            const { annotation, canvasWidth, canvasHeight, handleIndex, centerWorld, originalHandleCanvas, } = this.editData;\n            const centerCanvas = viewport.worldToCanvas(centerWorld);\n            const { data } = annotation;\n            const { points } = data.handles;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            if (handleIndex === 0 || handleIndex === 1) {\n                const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - dYCanvas,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + dYCanvas,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n                const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n                const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n                const canvasLeft = [\n                    centerCanvas[0] - newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + newHalfCanvasWidth,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n            }\n            else {\n                const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n                const canvasLeft = [\n                    centerCanvas[0] - dXCanvas,\n                    centerCanvas[1],\n                ];\n                const canvasRight = [\n                    centerCanvas[0] + dXCanvas,\n                    centerCanvas[1],\n                ];\n                points[2] = canvasToWorld(canvasLeft);\n                points[3] = canvasToWorld(canvasRight);\n                const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n                const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n                const canvasBottom = [\n                    centerCanvas[0],\n                    centerCanvas[1] - newHalfCanvasHeight,\n                ];\n                const canvasTop = [\n                    centerCanvas[0],\n                    centerCanvas[1] + newHalfCanvasHeight,\n                ];\n                points[0] = canvasToWorld(canvasBottom);\n                points[1] = canvasToWorld(canvasTop);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasCorners = (getCanvasEllipseCorners(canvasCoordinates));\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-ellipse`;\n                const ellipseUID = '0';\n                drawEllipseSvg(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    const minRadius = Math.min(Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2);\n                    if (minRadius > 3 * centerPointRadius) {\n                        const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${ellipseUID}-center`, centerPoint, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasEllipseCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const post2Index = transformWorldToIndex(imageData, worldPos2);\n                post2Index[0] = Math.floor(post2Index[0]);\n                post2Index[1] = Math.floor(post2Index[1]);\n                post2Index[2] = Math.floor(post2Index[2]);\n                this.isHandleOutsideImage = !this._isInsideVolume(pos1Index, post2Index, dimensions);\n                const iMin = Math.min(pos1Index[0], post2Index[0]);\n                const iMax = Math.max(pos1Index[0], post2Index[0]);\n                const jMin = Math.min(pos1Index[1], post2Index[1]);\n                const jMax = Math.max(pos1Index[1], post2Index[1]);\n                const kMin = Math.min(pos1Index[2], post2Index[2]);\n                const kMax = Math.max(pos1Index[2], post2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = [\n                    (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n                    (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n                    (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n                ];\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                const handles = [pos1Index, post2Index];\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                const area = Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2)) /\n                    scale /\n                    scale;\n                const pixelUnitsOptions = {\n                    isPreScaled: isViewportPreScaled(viewport, targetId),\n                    isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                };\n                const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                let pointsInShape;\n                if (voxelManager) {\n                    const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                        boundsIJK,\n                        imageData,\n                        isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                        returnPoints: this.configuration.storePointData,\n                    });\n                }\n                const stats = this.configuration.statsCalculator.getStatistics();\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    mean: stats.mean?.value,\n                    max: stats.max?.value,\n                    min: stats.min?.value,\n                    stdDev: stats.stdDev?.value,\n                    statsArray: stats.array,\n                    pointsInShape,\n                    isEmptyArea,\n                    areaUnit,\n                    modalityUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(EllipticalROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    _pointInEllipseCanvas(ellipse, location) {\n        const { xRadius, yRadius, center, angle } = ellipse;\n        const rotLocation = vec2.rotate(vec2.create(), location, center, -angle);\n        if (xRadius <= 0.0 || yRadius <= 0.0) {\n            return false;\n        }\n        const normalized = [rotLocation[0] - center[0], rotLocation[1] - center[1]];\n        const inEllipse = (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n            (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n            1.0;\n        return inEllipse;\n    }\n    _getCanvasEllipseCenter(ellipseCanvasPoints) {\n        const [bottom, top, left, right] = ellipseCanvasPoints;\n        const topLeft = [left[0], top[1]];\n        const bottomRight = [right[0], bottom[1]];\n        return [\n            (topLeft[0] + bottomRight[0]) / 2,\n            (topLeft[1] + bottomRight[1]) / 2,\n        ];\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit, min } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default EllipticalROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, EPSILON, } from '@cornerstonejs/core';\nimport { getCalibratedAspect, getCalibratedLengthUnitsAndScale, } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROITool extends AnnotationTool {\n    static { this.toolName = 'CircleROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            storePointData: false,\n            centerPointRadius: 0,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const radius = getCanvasCircleRadius(canvasCoordinates);\n            const radiusPoint = getCanvasCircleRadius([\n                canvasCoordinates[0],\n                canvasCoords,\n            ]);\n            if (Math.abs(radiusPoint - radius) < proximity / 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            data.handles.points = [\n                data.handles.points[0],\n                canvasToWorld(currentCanvasPoints),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragHandle(evt);\n                annotation.invalidated = true;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => worldToCanvas(p));\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            if (handleIndex === 0) {\n                const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n                const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n                const canvasCenter = currentCanvasPoints;\n                const canvasEnd = [\n                    canvasCoordinates[1][0] + dXCanvas,\n                    canvasCoordinates[1][1] + dYCanvas,\n                ];\n                points[0] = canvasToWorld(canvasCenter);\n                points[1] = canvasToWorld(canvasEnd);\n            }\n            else {\n                points[1] = canvasToWorld(currentCanvasPoints);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius(canvasCoordinates);\n                const canvasCorners = getCanvasCircleCorners(canvasCoordinates);\n                const { centerPointRadius } = this.configuration;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                        radius: null,\n                        radiusUnit: null,\n                        perimeter: null,\n                    };\n                    this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-circle`;\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            const { element } = viewport;\n            const wasInvalidated = annotation.invalidated;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const { viewPlaneNormal, viewUp } = viewport.getCamera();\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const center = [\n                        (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n                        (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n                        (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n                    ];\n                    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n                    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n                    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n                    const ellipseObj = {\n                        center,\n                        xRadius: xRadius < EPSILON / 2 ? 0 : xRadius,\n                        yRadius: yRadius < EPSILON / 2 ? 0 : yRadius,\n                        zRadius: zRadius < EPSILON / 2 ? 0 : zRadius,\n                    };\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, unit, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const aspect = getCalibratedAspect(image);\n                    const area = Math.abs(Math.PI *\n                        (worldWidth / scale / 2) *\n                        (worldHeight / aspect / scale / 2));\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    let pointsInShape;\n                    if (voxelManager) {\n                        pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                            isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS, { fast: true }),\n                            boundsIJK,\n                            imageData,\n                            returnPoints: this.configuration.storePointData,\n                        });\n                    }\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        max: stats.max?.value,\n                        min: stats.min?.value,\n                        pointsInShape,\n                        stdDev: stats.stdDev?.value,\n                        statsArray: stats.array,\n                        isEmptyArea,\n                        areaUnit,\n                        radius: worldWidth / 2 / scale,\n                        radiusUnit: unit,\n                        perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            annotation.invalidated = false;\n            if (wasInvalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(CircleROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { radius, radiusUnit, area, mean, stdDev, max, min, isEmptyArea, areaUnit, modalityUnit, } = cachedVolumeStats;\n    const textLines = [];\n    if (csUtils.isNumber(radius)) {\n        const radiusLine = isEmptyArea\n            ? `Radius: Oblique not supported`\n            : `Radius: ${csUtils.roundNumber(radius)} ${radiusUnit}`;\n        textLines.push(radiusLine);\n    }\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default CircleROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted } from '../../stateManagement/annotation/helpers/state';\nimport { drawCircle as drawCircleSvg, drawLine } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getCanvasCircleRadius } from '../../utilities/math/circle';\nimport { vec3 } from 'gl-matrix';\nconst CROSSHAIR_SIZE = 5;\nclass ETDRSGridTool extends AnnotationTool {\n    static { this.toolName = 'ETDRSGrid'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            degrees: [45, 135, 225, 315],\n            diameters: [10, 30, 60],\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [[...worldPos]],\n                    },\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const center = viewport.worldToCanvas(points[0]);\n            const radius = getCanvasCircleRadius([center, canvasCoords]);\n            if (Math.abs(radius) < proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            hideElementCursor(element);\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            data.handles.points = [\n                canvasToWorld(currentCanvasPoints),\n                canvasToWorld(currentCanvasPoints),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            const { deltaPoints } = eventDetail;\n            const worldPosDelta = deltaPoints.world;\n            const points = data.handles.points;\n            points.forEach((point) => {\n                point[0] += worldPosDelta[0];\n                point[1] += worldPosDelta[1];\n                point[2] += worldPosDelta[2];\n            });\n            annotation.invalidated = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._dragHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => worldToCanvas(p));\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n            const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n            const canvasCenter = currentCanvasPoints;\n            const canvasEnd = [\n                canvasCoordinates[1][0] + dXCanvas,\n                canvasCoordinates[1][1] + dYCanvas,\n            ];\n            points[0] = canvasToWorld(canvasCenter);\n            points[1] = canvasToWorld(canvasEnd);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const { renderingEngine } = getEnabledElement(element);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles } = data;\n                const { points } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                let lineUID = `${annotationUID}-crosshair-vertical`;\n                let start = [center[0], center[1] + CROSSHAIR_SIZE];\n                let end = [center[0], center[1] - CROSSHAIR_SIZE];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                lineUID = `${annotationUID}-crosshair-horizontal`;\n                start = [center[0] + CROSSHAIR_SIZE, center[1]];\n                end = [center[0] - CROSSHAIR_SIZE, center[1]];\n                drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                const diametersCanvas = this.configuration.diameters.map((diameter) => this.worldMeasureToCanvas(diameter, viewport));\n                for (let i = 0; i < diametersCanvas.length; i++) {\n                    const dataId = `${annotationUID}-circle-${i}`;\n                    const circleUID = `${annotationUID}-circle-${i}`;\n                    drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, diametersCanvas[i] / 2, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    }, dataId);\n                }\n                const degreesRad = (x) => (x * Math.PI) / 180;\n                const angleRadians = this.configuration.degrees.map((degree) => degreesRad(degree));\n                for (let i = 0; i < angleRadians.length; i++) {\n                    const lineUID = `${annotationUID}-line-${i}`;\n                    const start = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[0]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[0]) / 2 + center[1],\n                    ];\n                    const end = [\n                        (Math.cos(angleRadians[i]) * diametersCanvas[2]) / 2 + center[0],\n                        (Math.sin(angleRadians[i]) * diametersCanvas[2]) / 2 + center[1],\n                    ];\n                    drawLine(svgDrawingHelper, annotationUID, lineUID, start, end, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n    worldMeasureToCanvas(measurement, viewport) {\n        const p1 = viewport.canvasToWorld([\n            viewport.canvas.width / 2,\n            viewport.canvas.height / 2,\n        ]);\n        const { viewUp } = viewport.getCamera();\n        const p2 = vec3.scaleAndAdd(vec3.create(), p1, viewUp, measurement);\n        const p1Canvas = viewport.worldToCanvas(p1);\n        const p2Canvas = viewport.worldToCanvas(p2);\n        const distance = Math.sqrt(Math.pow(p2Canvas[0] - p1Canvas[0], 2) +\n            Math.pow(p2Canvas[1] - p1Canvas[1], 2));\n        return distance;\n    }\n}\nexport default ETDRSGridTool;\n","import { getEnabledElement, eventTarget, triggerEvent, utilities, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, getChildAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawPolyline as drawPolylineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, MouseBindings, KeyboardBindings, ChangeTypes, } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport * as math from '../../utilities/math';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { CardinalSpline } from './splines/CardinalSpline';\nimport { LinearSpline } from './splines/LinearSpline';\nimport { CatmullRomSpline } from './splines/CatmullRomSpline';\nimport { BSpline } from './splines/BSpline';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nconst SPLINE_MIN_POINTS = 3;\nconst SPLINE_CLICK_CLOSE_CURVE_DIST = 10;\nconst DEFAULT_SPLINE_CONFIG = {\n    resolution: 20,\n    controlPointAdditionDistance: 6,\n    controlPointDeletionDistance: 6,\n    showControlPointsConnectors: false,\n    controlPointAdditionEnabled: true,\n    controlPointDeletionEnabled: true,\n};\nvar SplineTypesEnum;\n(function (SplineTypesEnum) {\n    SplineTypesEnum[\"Cardinal\"] = \"CARDINAL\";\n    SplineTypesEnum[\"Linear\"] = \"LINEAR\";\n    SplineTypesEnum[\"CatmullRom\"] = \"CATMULLROM\";\n    SplineTypesEnum[\"BSpline\"] = \"BSPLINE\";\n})(SplineTypesEnum || (SplineTypesEnum = {}));\nvar SplineToolActions;\n(function (SplineToolActions) {\n    SplineToolActions[\"AddControlPoint\"] = \"addControlPoint\";\n    SplineToolActions[\"DeleteControlPoint\"] = \"deleteControlPoint\";\n})(SplineToolActions || (SplineToolActions = {}));\nclass SplineROITool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'SplineROI'; }\n    static { this.SplineTypes = SplineTypesEnum; }\n    static { this.Actions = SplineToolActions; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            simplifiedSpline: false,\n            getTextLines: defaultGetTextLines,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            spline: {\n                configuration: {\n                    [SplineTypesEnum.Cardinal]: {\n                        Class: CardinalSpline,\n                        scale: 0.5,\n                    },\n                    [SplineTypesEnum.CatmullRom]: {\n                        Class: CatmullRomSpline,\n                    },\n                    [SplineTypesEnum.Linear]: {\n                        Class: LinearSpline,\n                    },\n                    [SplineTypesEnum.BSpline]: {\n                        Class: BSpline,\n                        controlPointAdditionEnabled: false,\n                        controlPointDeletionEnabled: false,\n                        showControlPointsConnectors: true,\n                    },\n                },\n                type: SplineTypesEnum.CatmullRom,\n                drawPreviewEnabled: true,\n                enableTwoPointPreview: false,\n                lastControlPointDeletionKeys: ['Backspace', 'Delete'],\n            },\n            actions: {\n                [SplineToolActions.AddControlPoint]: {\n                    method: 'addControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Shift,\n                        },\n                    ],\n                },\n                [SplineToolActions.DeleteControlPoint]: {\n                    method: 'deleteControlPointCallback',\n                    bindings: [\n                        {\n                            mouseButton: MouseBindings.Primary,\n                            modifierKey: KeyboardBindings.Ctrl,\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.splineToolNames = [\n            'CatmullRomSplineROI',\n            'LinearSplineROI',\n            'BSplineROI',\n            'CardinalSplineROI',\n        ];\n        this.isHandleOutsideImage = false;\n        this.fireChangeOnUpdate = null;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const { instance: spline } = annotation.data.spline;\n            return spline.isPointNearCurve(canvasCoords, proximity);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            annotation.autoGenerated = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const image = this.getTargetImageData(this.getTargetId(enabledElement.viewport));\n            const { imageData, dimensions } = image;\n            this.isHandleOutsideImage = data.handles.points\n                .map((p) => utilities.transformWorldToIndex(imageData, p))\n                .some((index) => !utilities.indexWithinDimensions(index, dimensions));\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            if (!this.fireChangeOnUpdate) {\n                this.fireChangeOnUpdate = {\n                    annotationUID: annotation.annotationUID,\n                    changeType,\n                    contourHoleProcessingEnabled,\n                };\n            }\n            else {\n                this.fireChangeOnUpdate.annotationUID = annotation.annotationUID;\n                this.fireChangeOnUpdate.changeType = changeType;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._keyDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const key = eventDetail.key ?? '';\n            const { lastControlPointDeletionKeys } = this.configuration.spline;\n            const deleteLastPoint = lastControlPointDeletionKeys.includes(key);\n            if (!deleteLastPoint) {\n                return;\n            }\n            const { annotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length === SPLINE_MIN_POINTS) {\n                this.cancel(element);\n                return;\n            }\n            else {\n                const controlPointIndex = data.handles.points.length - 1;\n                this._deleteControlPointByIndex(element, annotation, controlPointIndex);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { drawPreviewEnabled } = this.configuration.spline;\n            if (!drawPreviewEnabled) {\n                return;\n            }\n            const { element } = evt.detail;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = evt.detail.currentPoints.canvas;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender } = this.editData;\n            const { data } = annotation;\n            if (data.contour.closed) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const { canvas: canvasPoint, world: worldPoint } = currentPoints;\n            let closeContour = data.handles.points.length >= 2 && doubleClick;\n            let addNewPoint = true;\n            if (data.handles.points.length) {\n                this.createMemo(element, annotation, {\n                    newAnnotation: data.handles.points.length === 1,\n                });\n            }\n            if (data.handles.points.length >= 3) {\n                this.createMemo(element, annotation);\n                const { instance: spline } = data.spline;\n                const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                if (closestControlPoint?.index === 0) {\n                    addNewPoint = false;\n                    closeContour = true;\n                }\n            }\n            if (addNewPoint) {\n                data.handles.points.push(worldPoint);\n            }\n            data.contour.closed = data.contour.closed || closeContour;\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (data.contour.closed) {\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                this.moveAnnotation(annotation, worldPosDelta);\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.triggerAnnotationCompleted = (annotation, contourHoleProcessingEnabled) => {\n            const eventType = Events.ANNOTATION_COMPLETED;\n            const eventDetail = {\n                annotation,\n                changeType: ChangeTypes.Completed,\n                contourHoleProcessingEnabled,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled) => {\n            if (changeType === ChangeTypes.Completed) {\n                this.triggerAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                this.triggerAnnotationModified(annotation, enabledElement, changeType);\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.KEY_DOWN, this._keyDownCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.spline.instance.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.addControlPointCallback = (evt, annotation) => {\n            const { data } = annotation;\n            const splineType = data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointAdditionDistance;\n            if (splineConfig.controlPointAdditionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { instance: spline } = data.spline;\n            const canvasPos = evt.detail.currentPoints.canvas;\n            const closestPointInfo = spline.getClosestPoint(canvasPos);\n            if (closestPointInfo.distance > maxDist) {\n                return;\n            }\n            const { index, point: canvasPoint } = spline.addControlPointAtU(closestPointInfo.uValue);\n            data.handles.points.splice(index, 0, canvasToWorld(canvasPoint));\n            annotation.invalidated = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.deleteControlPointCallback = (evt, annotation) => {\n            const splineType = annotation.data.spline.type;\n            const splineConfig = this._getSplineConfig(splineType);\n            const maxDist = splineConfig.controlPointDeletionDistance;\n            if (splineConfig.controlPointDeletionEnabled === false) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const { canvas: canvasPos } = currentPoints;\n            const { instance: spline } = annotation.data.spline;\n            const closestControlPoint = spline.getClosestControlPointWithinDistance(canvasPos, maxDist);\n            if (!closestControlPoint) {\n                return;\n            }\n            this._deleteControlPointByIndex(element, annotation, closestControlPoint.index);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n        this.annotationCompletedBinded = this.annotationCompleted.bind(this);\n    }\n    annotationCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (!this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline ||\n            !this.isContourSegmentationTool()) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompletedBinded);\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.removeListeners();\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { canvas: canvasPos } = currentPoints;\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        const annotation = this.createAnnotation(evt);\n        this.isDrawing = true;\n        this.addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n            lastCanvasPoint: canvasPos,\n            contourHoleProcessingEnabled,\n        };\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n        if (newAnnotation) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        super.cancelAnnotation(annotation);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        this.editData = null;\n        return annotation.annotationUID;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper, annotationStyle } = renderContext;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { element } = viewport;\n        const annotation = renderContext.annotation;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const { points: controlPoints, activeHandleIndex } = handles;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color, locked: annotationLocked, } = annotationStyle;\n        const canvasCoordinates = controlPoints.map((p) => worldToCanvas(p));\n        const { drawPreviewEnabled } = this.configuration.spline;\n        const splineType = annotation.data.spline.type;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = annotation.data.spline.instance;\n        const childAnnotations = getChildAnnotations(annotation);\n        const missingAnnotation = childAnnotations.findIndex((it) => !it);\n        if (missingAnnotation !== -1) {\n            throw new Error(`Can't find annotation for child ${annotation.childAnnotationUIDs.join()}`);\n        }\n        const splineAnnotationsGroup = [annotation, ...childAnnotations].filter((annotation) => this._isSplineROIAnnotation(annotation));\n        splineAnnotationsGroup.forEach((annotation) => {\n            const spline = this._updateSplineInstance(element, annotation);\n            const splinePolylineCanvas = spline.getPolylinePoints();\n            this.updateContourPolyline(annotation, {\n                points: splinePolylineCanvas,\n                closed: data.contour.closed,\n                targetWindingDirection: ContourWindingDirection.Clockwise,\n            }, viewport, { updateWindingDirection: data.contour.closed });\n        });\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId].areaUnit == null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        let activeHandleCanvasCoords;\n        if (!annotationLocked && !this.editData && activeHandleIndex !== null) {\n            activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n        }\n        if (activeHandleCanvasCoords || newAnnotation || highlighted) {\n            const handleGroupUID = '0';\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                color,\n                lineWidth,\n                handleRadius: '3',\n            });\n        }\n        if (drawPreviewEnabled &&\n            spline.numControlPoints >= 1 &&\n            this.editData?.lastCanvasPoint &&\n            !spline.closed) {\n            const { lastCanvasPoint } = this.editData;\n            const { enableTwoPointPreview } = this.configuration.spline;\n            if (spline.numControlPoints === 1 && enableTwoPointPreview) {\n                const firstPoint = canvasCoordinates[0];\n                const previewPolylinePoints = [firstPoint, lastCanvasPoint];\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n            else if (spline.numControlPoints > 1) {\n                const previewPolylinePoints = spline.getPreviewPolylinePoints(lastCanvasPoint, SPLINE_CLICK_CLOSE_CURVE_DIST);\n                drawPolylineSvg(svgDrawingHelper, annotationUID, 'previewSplineChange', previewPolylinePoints, {\n                    color: '#9EA0CA',\n                    lineDash: lineDash,\n                    lineWidth: 1,\n                });\n            }\n        }\n        if (splineConfig.showControlPointsConnectors) {\n            const controlPointsConnectors = [...canvasCoordinates];\n            if (spline.closed) {\n                controlPointsConnectors.push(canvasCoordinates[0]);\n            }\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'controlPointsConnectors', controlPointsConnectors, {\n                color: 'rgba(255, 255, 255, 0.5)',\n                lineWidth: 1,\n            });\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        if (this.fireChangeOnUpdate?.annotationUID === annotationUID) {\n            this.triggerChangeEvent(annotation, enabledElement, this.fireChangeOnUpdate.changeType, this.fireChangeOnUpdate.contourHoleProcessingEnabled);\n            this.fireChangeOnUpdate = null;\n        }\n        annotation.invalidated = false;\n        return true;\n    }\n    createInterpolatedSplineControl(annotation) {\n        if (annotation.data.handles.points?.length) {\n            return;\n        }\n        const { polyline } = annotation.data.contour;\n        if (!polyline || !polyline.length) {\n            return;\n        }\n        annotation.data.handles.points = [];\n        const { points } = annotation.data.handles;\n        const increment = Math.max(10, Math.floor(polyline.length / 20));\n        for (let i = 0; i < polyline.length - increment; i += increment) {\n            points.push(polyline[i]);\n        }\n        points.push(polyline[polyline.length - 1]);\n    }\n    createAnnotation(evt) {\n        const contourAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const { type: splineType } = this.configuration.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const spline = new splineConfig.Class();\n        const createSpline = () => ({\n            type: splineConfig.type,\n            instance: spline,\n            resolution: splineConfig.resolution,\n        });\n        let onInterpolationComplete;\n        if (this.configuration.interpolation?.enabled) {\n            onInterpolationComplete = (annotation) => {\n                annotation.data.spline ||= createSpline();\n                this.createInterpolatedSplineControl(annotation);\n            };\n        }\n        return utilities.deepMerge(contourAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n                spline: createSpline(),\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n    }\n    _deleteControlPointByIndex(element, annotation, controlPointIndex) {\n        const enabledElement = getEnabledElement(element);\n        const { points: controlPoints } = annotation.data.handles;\n        if (controlPoints.length === 3) {\n            removeAnnotation(annotation.annotationUID);\n        }\n        else {\n            controlPoints.splice(controlPointIndex, 1);\n        }\n        const { renderingEngine } = enabledElement;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        annotation.invalidated = true;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n    }\n    _isSplineROIAnnotation(annotation) {\n        return !!annotation.data?.spline;\n    }\n    _getSplineConfig(type) {\n        const { configuration: config } = this;\n        const splineConfigs = config.spline.configuration;\n        return Object.assign({ type }, DEFAULT_SPLINE_CONFIG, splineConfigs[type]);\n    }\n    _updateSplineInstance(element, annotation) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { data } = annotation;\n        const { type: splineType, instance: spline } = annotation.data.spline;\n        const splineConfig = this._getSplineConfig(splineType);\n        const worldPoints = data.handles.points;\n        const canvasPoints = worldPoints.map(worldToCanvas);\n        const resolution = splineConfig.resolution !== undefined\n            ? parseInt(splineConfig.resolution)\n            : undefined;\n        const scale = splineConfig.scale !== undefined\n            ? parseFloat(splineConfig.scale)\n            : undefined;\n        spline.setControlPoints(canvasPoints);\n        spline.closed = !!data.contour.closed;\n        if (!spline.fixedResolution &&\n            resolution !== undefined &&\n            spline.resolution !== resolution) {\n            spline.resolution = resolution;\n            annotation.invalidated = true;\n        }\n        if (spline instanceof CardinalSpline &&\n            !spline.fixedScale &&\n            scale !== undefined &&\n            spline.scale !== scale) {\n            spline.scale = scale;\n            annotation.invalidated = true;\n        }\n        return spline;\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (points.length < SPLINE_MIN_POINTS) {\n            console.warn('Spline requires at least 3 control points');\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, viewUp, instance, viewport, } = this.hydrateBase(SplineROITool, enabledElement, points, options);\n        const splineType = options?.splineType || SplineTypesEnum.CatmullRom;\n        const splineConfig = instance._getSplineConfig(splineType);\n        const SplineClass = splineConfig.Class;\n        const splineInstance = new SplineClass();\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n                label: '',\n                cachedStats: {},\n                spline: {\n                    type: splineType,\n                    instance: splineInstance,\n                },\n                contour: {\n                    closed: true,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: true,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, isEmptyArea, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${utilities.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\nexport default SplineROITool;\n","import { eventTarget, utilities } from '@cornerstonejs/core';\nimport SplineROITool from './SplineROITool';\nimport { Events } from '../../enums';\nimport { convertContourSegmentationAnnotation } from '../../utilities/contourSegmentation';\nclass SplineContourSegmentationTool extends SplineROITool {\n    static { this.toolName = 'SplineContourSegmentationTool'; }\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.annotationCutMergeCompletedBinded =\n            this.annotationCutMergeCompleted.bind(this);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n    initializeListeners() {\n        eventTarget.addEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    removeListeners() {\n        eventTarget.removeEventListener(Events.ANNOTATION_CUT_MERGE_PROCESS_COMPLETED, this.annotationCutMergeCompletedBinded);\n    }\n    annotationCutMergeCompleted(evt) {\n        const { sourceAnnotation: annotation } = evt.detail;\n        if (!this.splineToolNames.includes(annotation?.metadata?.toolName) ||\n            !this.configuration.simplifiedSpline) {\n            return;\n        }\n        convertContourSegmentationAnnotation(annotation);\n    }\n}\nexport default SplineContourSegmentationTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, VolumeViewport, utilities, triggerEvent, eventTarget, } from '@cornerstonejs/core';\nimport { removeAnnotation } from '../../stateManagement/annotation/annotationState';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { Events, KeyboardBindings, ChangeTypes } from '../../enums';\nimport { resetElementCursor } from '../../cursors/elementCursor';\nimport getMouseModifierKey from '../../eventDispatchers/shared/getMouseModifier';\nimport * as math from '../../utilities/math';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport findHandlePolylineIndex from '../../utilities/contours/findHandlePolylineIndex';\nimport { ContourWindingDirection } from '../../types/ContourAnnotation';\nimport { triggerAnnotationModified, triggerContourAnnotationCompleted, } from '../../stateManagement/annotation/helpers/state';\nimport { LivewireScissors } from '../../utilities/livewire/LivewireScissors';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getCalibratedLengthUnitsAndScale, throttle } from '../../utilities';\nconst CLICK_CLOSE_CURVE_SQR_DIST = 10 ** 2;\nclass LivewireContourTool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'LivewireContour'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextLines: defaultGetTextLines,\n            calculateStats: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            snapHandleNearby: 2,\n            interpolation: {\n                enabled: false,\n                nearestEdge: 2,\n                showInterpolationPolyline: false,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            actions: {\n                cancelInProgress: {\n                    method: 'cancelInProgress',\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const proximitySquared = proximity * proximity;\n            const canvasPoints = annotation.data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            let startPoint = canvasPoints[canvasPoints.length - 1];\n            for (let i = 0; i < canvasPoints.length; i++) {\n                const endPoint = canvasPoints[i];\n                const distanceToPointSquared = math.lineSegment.distanceToPointSquared(startPoint, endPoint, canvasCoords);\n                if (distanceToPointSquared <= proximitySquared) {\n                    return true;\n                }\n                startPoint = endPoint;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            this._activateModify(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                const { points } = data.handles;\n                handleIndex = points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt, clearAnnotation = false) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, contourHoleProcessingEnabled, } = this.editData;\n            const { data } = annotation;\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            if ((this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) ||\n                clearAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n                this.clearEditData();\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                return;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            const changeType = newAnnotation\n                ? ChangeTypes.Completed\n                : ChangeTypes.HandlesUpdated;\n            this.triggerChangeEvent(annotation, enabledElement, changeType, contourHoleProcessingEnabled);\n            this.clearEditData();\n        };\n        this.triggerChangeEvent = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated, contourHoleProcessingEnabled = false) => {\n            if (changeType === ChangeTypes.Completed) {\n                triggerContourAnnotationCompleted(annotation, contourHoleProcessingEnabled);\n            }\n            else {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, changeType);\n            }\n        };\n        this._mouseDownCallback = (evt) => {\n            const doubleClick = evt.type === Events.MOUSE_DOUBLE_CLICK;\n            const { annotation, viewportIdsToRender, worldToSlice, sliceToWorld, newAnnotation, } = this.editData;\n            if (this.editData.closed) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const { canvas: canvasPos, world: worldPosOriginal } = currentPoints;\n            let worldPos = worldPosOriginal;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const controlPoints = this.editData.currentPath.getControlPoints();\n            let closePath = controlPoints.length >= 2 && doubleClick;\n            this.doneEditMemo();\n            this.createMemo(element, annotation, {\n                newAnnotation: newAnnotation && controlPoints.length === 1,\n            });\n            if (controlPoints.length >= 2) {\n                const closestHandlePoint = {\n                    index: -1,\n                    distSquared: Infinity,\n                };\n                for (let i = 0, len = controlPoints.length; i < len; i++) {\n                    const controlPoint = controlPoints[i];\n                    const worldControlPoint = sliceToWorld(controlPoint);\n                    const canvasControlPoint = viewport.worldToCanvas(worldControlPoint);\n                    const distSquared = math.point.distanceToPointSquared(canvasPos, canvasControlPoint);\n                    if (distSquared <= CLICK_CLOSE_CURVE_SQR_DIST &&\n                        distSquared < closestHandlePoint.distSquared) {\n                        closestHandlePoint.distSquared = distSquared;\n                        closestHandlePoint.index = i;\n                    }\n                }\n                if (closestHandlePoint.index === 0) {\n                    closePath = true;\n                }\n            }\n            const { snapHandleNearby } = this.configuration;\n            if (snapHandleNearby && !this.editData.closed) {\n                const currentPath = new LivewirePath();\n                const snapPoint = this.scissors.findMinNearby(worldToSlice(worldPosOriginal), 1);\n                const pathPoints = this.scissors.findPathToPoint(snapPoint);\n                currentPath.addPoints(pathPoints);\n                currentPath.prependPath(this.editData.confirmedPath);\n                worldPos = sliceToWorld(snapPoint);\n                this.editData.currentPath = currentPath;\n            }\n            this.editData.closed = this.editData.closed || closePath;\n            this.editData.confirmedPath = this.editData.currentPath;\n            const lastPoint = this.editData.currentPath.getLastPoint();\n            this.editData.confirmedPath.addControlPoint(lastPoint);\n            annotation.data.handles.points.push(sliceToWorld(lastPoint));\n            this.scissors.startSearch(worldToSlice(worldPos));\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (this.editData.closed) {\n                this.updateAnnotation(this.editData.confirmedPath);\n                this._endCallback(evt);\n            }\n            evt.preventDefault();\n        };\n        this._mouseMoveCallback = (evt) => {\n            const { element, currentPoints } = evt.detail;\n            const { world: worldPos, canvas: canvasPos } = currentPoints;\n            const { renderingEngine } = getEnabledElement(element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData.lastCanvasPoint = canvasPos;\n            const { width: imgWidth, height: imgHeight } = this.scissors;\n            const { worldToSlice } = this.editData;\n            const slicePoint = worldToSlice(worldPos);\n            if (slicePoint[0] < 0 ||\n                slicePoint[1] < 0 ||\n                slicePoint[0] >= imgWidth ||\n                slicePoint[1] >= imgHeight) {\n                return;\n            }\n            const pathPoints = this.scissors.findPathToPoint(slicePoint);\n            const currentPath = new LivewirePath();\n            currentPath.addPoints(pathPoints);\n            currentPath.prependPath(this.editData.confirmedPath);\n            this.editData.currentPath = currentPath;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, movingTextBox, handleIndex, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                console.warn('Drag annotation not implemented');\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                this.editHandle(worldPos, element, annotation, handleIndex);\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            if (newAnnotation) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            this.scissors = null;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_MOVE, this._mouseMoveCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.MOUSE_DOUBLE_CLICK, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._mouseDownCallback);\n        };\n        this._calculateCachedStats = (annotation, element) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const data = annotation.data;\n            if (!data.contour.closed) {\n                return;\n            }\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            const { cachedStats } = data;\n            const { polyline: points } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                const { imageData } = image;\n                const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, () => {\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(canvasCoordinates);\n                    const topLeftBBWorld = viewport.canvasToWorld([\n                        canvasMinX,\n                        canvasMinY,\n                    ]);\n                    const topLeftBBIndex = utilities.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = utilities.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                let area = math.polyline.getArea(canvasCoordinates) / scale / scale;\n                area *= deltaInX * deltaInY;\n                cachedStats[targetId] = {\n                    Modality: metadata.Modality,\n                    area,\n                    areaUnit: areaUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                this.triggerAnnotationModified(annotation, enabledElement, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, svgDrawingHelper, textboxStyle) => {\n            const data = annotation.data;\n            const targetId = this.getTargetId(viewport);\n            if (!data.contour.closed || !textboxStyle.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = 'textBox';\n            const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, textboxStyle);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        this.triggerAnnotationModified = (annotation, enabledElement, changeType = ChangeTypes.StatsUpdated) => {\n            const { viewportId, renderingEngineId } = enabledElement;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n                changeType,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    setupBaseEditData(worldPos, element, annotation, nextPos, contourHoleProcessingEnabled) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const viewportImageData = viewport.getImageData();\n        const { imageData: vtkImageData } = viewportImageData;\n        let worldToSlice;\n        let sliceToWorld;\n        let width;\n        let height;\n        let scalarData;\n        if (!(viewport instanceof VolumeViewport)) {\n            width = viewportImageData.dimensions[0];\n            height = viewportImageData.dimensions[1];\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                return [ijkPoint[0], ijkPoint[1]];\n            };\n            sliceToWorld = (point) => csUtils.transformIndexToWorld(vtkImageData, [point[0], point[1], 0]);\n            scalarData = viewportImageData.scalarData;\n        }\n        else if (viewport instanceof VolumeViewport) {\n            const sliceImageData = csUtils.getCurrentVolumeViewportSlice(viewport);\n            const { sliceToIndexMatrix, indexToSliceMatrix } = sliceImageData;\n            worldToSlice = (point) => {\n                const ijkPoint = csUtils.transformWorldToIndex(vtkImageData, point);\n                const slicePoint = vec3.transformMat4([0, 0, 0], ijkPoint, indexToSliceMatrix);\n                return [slicePoint[0], slicePoint[1]];\n            };\n            sliceToWorld = (point) => {\n                const ijkPoint = vec3.transformMat4([0, 0, 0], [point[0], point[1], 0], sliceToIndexMatrix);\n                return csUtils.transformIndexToWorld(vtkImageData, ijkPoint);\n            };\n            scalarData = sliceImageData.scalarData;\n            width = sliceImageData.width;\n            height = sliceImageData.height;\n        }\n        else {\n            throw new Error('Viewport not supported');\n        }\n        scalarData = csUtils.convertToGrayscale(scalarData, width, height);\n        const { voiRange } = viewport.getProperties();\n        const startPos = worldToSlice(worldPos);\n        this.scissors = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n        if (nextPos) {\n            this.scissorsNext = LivewireScissors.createInstanceFromRawPixelData(scalarData, width, height, voiRange);\n            this.scissorsNext.startSearch(worldToSlice(nextPos));\n        }\n        this.scissors.startSearch(startPos);\n        const newAnnotation = !nextPos;\n        const confirmedPath = new LivewirePath();\n        const currentPath = new LivewirePath();\n        const currentPathNext = newAnnotation ? undefined : new LivewirePath();\n        confirmedPath.addPoint(startPos);\n        confirmedPath.addControlPoint(startPos);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        const lastCanvasPoint = viewport.worldToCanvas(worldPos);\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            newAnnotation,\n            hasMoved: false,\n            lastCanvasPoint,\n            confirmedPath,\n            currentPath,\n            confirmedPathNext: currentPathNext,\n            closed: false,\n            handleIndex: this.editData?.handleIndex ?? annotation.handles?.activeHandleIndex,\n            worldToSlice,\n            sliceToWorld,\n            contourHoleProcessingEnabled,\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const { world: worldPos } = currentPoints;\n        const annotation = this.createAnnotation(evt);\n        const contourHoleProcessingEnabled = getMouseModifierKey(evt.detail.event) ===\n            this.configuration.contourHoleAdditionModifierKey;\n        this.setupBaseEditData(worldPos, element, annotation, undefined, contourHoleProcessingEnabled);\n        this.addAnnotation(annotation, element);\n        this._activateDraw(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(this.editData.viewportIdsToRender);\n        return annotation;\n    }\n    clearEditData() {\n        this.editData = null;\n        this.scissors = null;\n        this.scissorsNext = null;\n        this.isDrawing = false;\n    }\n    editHandle(worldPos, element, annotation, handleIndex) {\n        const { data } = annotation;\n        const { points: handlePoints } = data.handles;\n        const { length: numHandles } = handlePoints;\n        const previousHandle = handlePoints[(handleIndex - 1 + numHandles) % numHandles];\n        const nextHandle = handlePoints[(handleIndex + 1) % numHandles];\n        if (!this.editData?.confirmedPathNext) {\n            this.setupBaseEditData(previousHandle, element, annotation, nextHandle);\n            const { polyline } = data.contour;\n            const confirmedPath = new LivewirePath();\n            const confirmedPathNext = new LivewirePath();\n            const { worldToSlice } = this.editData;\n            const previousIndex = findHandlePolylineIndex(annotation, handleIndex - 1);\n            const nextIndex = findHandlePolylineIndex(annotation, handleIndex + 1);\n            if (nextIndex === -1 || previousIndex === -1) {\n                throw new Error(`Can't find handle index ${nextIndex === -1 && nextHandle} ${previousIndex === -1 && previousHandle}`);\n            }\n            if (handleIndex === 0) {\n                confirmedPathNext.addPoints(polyline.slice(nextIndex + 1, previousIndex).map(worldToSlice));\n            }\n            else {\n                confirmedPath.addPoints(polyline.slice(0, previousIndex + 1).map(worldToSlice));\n                confirmedPathNext.addPoints(polyline.slice(nextIndex, polyline.length).map(worldToSlice));\n            }\n            this.editData.confirmedPath = confirmedPath;\n            this.editData.confirmedPathNext = confirmedPathNext;\n        }\n        const { editData, scissors } = this;\n        const { worldToSlice, sliceToWorld } = editData;\n        const { activeHandleIndex } = data.handles;\n        if (activeHandleIndex === null || activeHandleIndex === undefined) {\n            data.handles.activeHandleIndex = handleIndex;\n        }\n        else if (activeHandleIndex !== handleIndex) {\n            throw new Error(`Trying to edit a different handle than the one currently being edited ${handleIndex}!==${data.handles.activeHandleIndex}`);\n        }\n        const slicePos = worldToSlice(worldPos);\n        if (slicePos[0] < 0 ||\n            slicePos[0] >= scissors.width ||\n            slicePos[1] < 0 ||\n            slicePos[1] >= scissors.height) {\n            return;\n        }\n        handlePoints[handleIndex] = sliceToWorld(slicePos);\n        const pathPointsLeft = scissors.findPathToPoint(slicePos);\n        const pathPointsRight = this.scissorsNext.findPathToPoint(slicePos);\n        const currentPath = new LivewirePath();\n        currentPath.prependPath(editData.confirmedPath);\n        if (handleIndex !== 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        currentPath.addPoints(pathPointsRight.reverse());\n        currentPath.appendPath(editData.confirmedPathNext);\n        if (handleIndex === 0) {\n            currentPath.addPoints(pathPointsLeft);\n        }\n        editData.currentPath = currentPath;\n        annotation.invalidated = true;\n        editData.hasMoved = true;\n        editData.closed = true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        this.updateAnnotation(this.editData?.currentPath);\n        return super.renderAnnotation(enabledElement, svgDrawingHelper);\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const contourSegmentationAnnotation = super.createAnnotation(evt);\n        const { world: worldPos } = evt.detail.currentPoints;\n        const annotation = csUtils.deepMerge(contourSegmentationAnnotation, {\n            data: {\n                handles: {\n                    points: [[...worldPos]],\n                },\n            },\n        });\n        return annotation;\n    }\n    cancelInProgress(element, config, evt) {\n        if (!this.editData) {\n            this.undo();\n            return;\n        }\n        this._endCallback(evt, true);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { annotation, enabledElement, svgDrawingHelper, annotationStyle, targetId, } = renderContext;\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const { worldToCanvas } = viewport;\n        const { annotationUID, data, highlighted } = annotation;\n        const { handles } = data;\n        const newAnnotation = this.editData?.newAnnotation;\n        const { lineWidth, lineDash, color } = annotationStyle;\n        if (highlighted ||\n            (newAnnotation &&\n                annotation.annotationUID === this.editData?.annotation?.annotationUID)) {\n            const handleGroupUID = '0';\n            const canvasHandles = handles.points.map(worldToCanvas);\n            drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasHandles, {\n                color,\n                lineDash,\n                lineWidth,\n            });\n        }\n        super.renderAnnotationInstance(renderContext);\n        if (!data.cachedStats[targetId] ||\n            data.cachedStats[targetId]?.areaUnit === null) {\n            data.cachedStats[targetId] = {\n                Modality: null,\n                area: null,\n                areaUnit: null,\n            };\n            this._calculateCachedStats(annotation, element);\n        }\n        else if (annotation.invalidated) {\n            this._throttledCalculateCachedStats(annotation, element);\n        }\n        this._renderStats(annotation, viewport, svgDrawingHelper, annotationStyle.textbox);\n        return true;\n    }\n    updateAnnotation(livewirePath) {\n        if (!this.editData || !livewirePath) {\n            return;\n        }\n        const { annotation, sliceToWorld, worldToSlice, closed, newAnnotation } = this.editData;\n        let { pointArray: imagePoints } = livewirePath;\n        if (imagePoints.length > 1) {\n            imagePoints = [...imagePoints, imagePoints[0]];\n        }\n        const targetWindingDirection = newAnnotation && closed ? ContourWindingDirection.Clockwise : undefined;\n        this.updateContourPolyline(annotation, {\n            points: imagePoints,\n            closed,\n            targetWindingDirection,\n        }, {\n            canvasToWorld: sliceToWorld,\n            worldToCanvas: worldToSlice,\n        });\n    }\n}\nexport default LivewireContourTool;\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, areaUnit } = cachedVolumeStats;\n    const textLines = [];\n    if (area) {\n        const areaLine = `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    return textLines;\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport LivewireContourTool from './LivewireContourTool';\nimport { LivewirePath } from '../../utilities/livewire/LiveWirePath';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { ChangeTypes } from '../../enums';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nclass LivewireContourSegmentationTool extends LivewireContourTool {\n    static { this.toolName = 'LivewireContourSegmentationTool'; }\n    updateInterpolatedAnnotation(annotation, enabledElement) {\n        if (this.editData ||\n            !annotation.invalidated ||\n            !annotation.data.handles.interpolationSources) {\n            return;\n        }\n        annotation.data.contour.originalPolyline = annotation.data.contour.polyline;\n        queueMicrotask(() => {\n            if (!annotation.data.handles.interpolationSources) {\n                return;\n            }\n            const { points } = annotation.data.handles;\n            const { element } = enabledElement.viewport;\n            this.setupBaseEditData(points[0], element, annotation);\n            const { length: count } = points;\n            const { scissors } = this;\n            const { nearestEdge, repeatInterpolation } = this.configuration.interpolation;\n            annotation.data.handles.originalPoints = points;\n            const { worldToSlice, sliceToWorld } = this.editData;\n            const handleSmoothing = [];\n            if (nearestEdge) {\n                let lastPoint = worldToSlice(points[points.length - 1]);\n                points.forEach((point, hIndex) => {\n                    const testPoint = worldToSlice(point);\n                    lastPoint = testPoint;\n                    handleSmoothing.push(testPoint);\n                    scissors.startSearch(lastPoint);\n                    scissors.findPathToPoint(testPoint);\n                    scissors.findPathToPoint(worldToSlice(points[(hIndex + 3) % points.length]));\n                    const minPoint = scissors.findMinNearby(testPoint, nearestEdge);\n                    if (!csUtils.isEqual(testPoint, minPoint)) {\n                        handleSmoothing[hIndex] = minPoint;\n                        lastPoint = minPoint;\n                        points[hIndex] = sliceToWorld(minPoint);\n                    }\n                });\n            }\n            const acceptedPath = new LivewirePath();\n            for (let i = 0; i < count; i++) {\n                scissors.startSearch(worldToSlice(points[i]));\n                const path = scissors.findPathToPoint(worldToSlice(points[(i + 1) % count]));\n                acceptedPath.addPoints(path);\n            }\n            this.updateAnnotation(acceptedPath);\n            this.scissors = null;\n            this.scissorsNext = null;\n            this.editData = null;\n            annotation.data.handles.interpolationSources = null;\n            if (repeatInterpolation) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.InterpolationUpdated);\n            }\n        });\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        const { annotationUID } = annotation;\n        const { viewport } = enabledElement;\n        const { worldToCanvas } = viewport;\n        const { showInterpolationPolyline } = this.configuration.interpolation || {};\n        this.updateInterpolatedAnnotation?.(annotation, enabledElement);\n        const { originalPolyline } = annotation.data.contour;\n        const rendered = super.renderAnnotationInstance(renderContext);\n        if (showInterpolationPolyline &&\n            originalPolyline &&\n            annotation.autoGenerated) {\n            const polylineCanvasPoints = originalPolyline.map(worldToCanvas);\n            polylineCanvasPoints.push(polylineCanvasPoints[0]);\n            drawPolylineSvg(svgDrawingHelper, annotationUID, 'interpolationContour-0', polylineCanvasPoints, {\n                color: '#70ffff',\n                lineWidth: 1,\n                fillOpacity: 0,\n            });\n        }\n        return rendered;\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n}\nexport default LivewireContourSegmentationTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawArrow as drawArrowSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { setAnnotationLabel } from '../../utilities';\nclass ArrowAnnotateTool extends AnnotationTool {\n    static { this.toolName = 'ArrowAnnotate'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            getTextCallback,\n            changeTextCallback,\n            preventHandleOutsideImage: false,\n            arrowFirst: true,\n            arrowHeadStyle: 'legacy',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const { arrowFirst } = this.configuration;\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    text: '',\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        arrowFirst,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved, movingTextBox, } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            if (newAnnotation) {\n                this.configuration.getTextCallback((text) => {\n                    if (!text) {\n                        removeAnnotation(annotation.annotationUID);\n                        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                        this.editData = null;\n                        this.isDrawing = false;\n                        return;\n                    }\n                    annotation.data.text = text;\n                    triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n                    triggerAnnotationCompleted(annotation);\n                    this.createMemo(element, annotation, { newAnnotation: !!this.memo });\n                    setAnnotationLabel(annotation, element, text);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                });\n            }\n            else if (!movingTextBox) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.touchTapCallback = (evt) => {\n            if (evt.detail.taps == 2) {\n                this.doubleClickCallback(evt);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.editData = null;\n            this.isDrawing = false;\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { handles, text } = data;\n                const { points, activeHandleIndex } = handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, markerSize } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineWidth,\n                    });\n                }\n                const arrowUID = '1';\n                if (this.configuration.arrowFirst) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[1], canvasCoordinates[0], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                else {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: lineWidth,\n                        lineDash: lineDash,\n                        viaMarker: this.configuration.arrowHeadStyle !== 'legacy',\n                        markerSize,\n                    });\n                }\n                renderStatus = true;\n                if (!text) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, [text], textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    static { this.hydrate = (viewportId, points, text, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(ArrowAnnotateTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                text: text || '',\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const enabledElement = getEnabledElement(element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default ArrowAnnotateTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawPath as drawPathSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass AngleTool extends AnnotationTool {\n    static { this.toolName = 'Angle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            showAngleArc: false,\n            arcOffset: 5,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2, point3] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            if (!point3) {\n                return false;\n            }\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const line2 = {\n                start: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n                end: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n            };\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n                this.editData.handleIndex = 2;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.angleStartedNotYetCompleted = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, angleArcLineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotation.annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                let lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length !== 3) {\n                    return renderStatus;\n                }\n                lineUID = '2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], canvasCoordinates[2], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                if (this.configuration.showAngleArc) {\n                    const center = canvasCoordinates[1];\n                    const offset = this.configuration.arcOffset;\n                    const radius = Math.min(lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]]), lineSegment.distanceToPoint([center[0], center[1]], [canvasCoordinates[2][0], canvasCoordinates[2][1]], [canvasCoordinates[0][0], canvasCoordinates[0][1]])) / offset;\n                    const anglePoints = [];\n                    let startAngle = Math.atan2(canvasCoordinates[0][1] - center[1], canvasCoordinates[0][0] - center[0]);\n                    let endAngle = Math.atan2(canvasCoordinates[2][1] - center[1], canvasCoordinates[2][0] - center[0]);\n                    if (endAngle < startAngle) {\n                        endAngle += 2 * Math.PI;\n                    }\n                    const angleDifference = endAngle - startAngle;\n                    if (angleDifference > Math.PI) {\n                        const temp = startAngle;\n                        startAngle = endAngle;\n                        endAngle = temp + 2 * Math.PI;\n                    }\n                    const segments = 32;\n                    for (let i = 0; i <= segments; i++) {\n                        const angle = startAngle + (i / segments) * (endAngle - startAngle);\n                        anglePoints.push([\n                            center[0] + radius * Math.cos(angle),\n                            center[1] + radius * Math.sin(angle),\n                        ]);\n                    }\n                    drawPathSvg(svgDrawingHelper, annotationUID, '3', anglePoints, {\n                        color: color,\n                        width: lineWidth,\n                        lineDash: angleArcLineDash,\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(AngleTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 3) {\n            return;\n        }\n        const worldPos1 = data.handles.points[0];\n        const worldPos2 = data.handles.points[1];\n        const worldPos3 = data.handles.points[2];\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const angle = angleBetweenLines([worldPos1, worldPos2], [worldPos2, worldPos3]);\n            const { dimensions, imageData } = this.getTargetImageData(targetId);\n            this.isHandleOutsideImage = [worldPos1, worldPos2, worldPos3]\n                .map((worldPos) => csUtils.transformWorldToIndex(imageData, worldPos))\n                .some((index) => !csUtils.indexWithinDimensions(index, dimensions));\n            cachedStats[targetId] = {\n                angle: isNaN(angle) ? 'Incomplete Angle' : angle,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    if (isNaN(angle)) {\n        return [`${angle}`];\n    }\n    const textLines = [\n        `${csUtils.roundNumber(angle)} ${String.fromCharCode(176)}`,\n    ];\n    return textLines;\n}\nexport default AngleTool;\n","import { vec3 } from 'gl-matrix';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawTextBox as drawTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nclass CobbAngleTool extends AnnotationTool {\n    static { this.toolName = 'CobbAngle'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            showArcLines: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.angleStartedNotYetCompleted) {\n                return;\n            }\n            this.angleStartedNotYetCompleted = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { distanceToPoint, distanceToPoint2 } = this.distanceToLines({\n                viewport,\n                points: data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType, canvasCoords, proximity = 6) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { isNearFirstLine, isNearSecondLine } = this.distanceToLines({\n                viewport,\n                points: annotation.data.handles.points,\n                canvasCoords,\n                proximity,\n            });\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n                resetElementCursor(element);\n                this.editData.handleIndex = data.handles.points.length;\n                return;\n            }\n            this.angleStartedNotYetCompleted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._mouseDownCallback = (evt) => {\n            const { annotation, handleIndex } = this.editData;\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { data } = annotation;\n            if (handleIndex === 1) {\n                data.handles.points[1] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[1][0] !== data.handles.points[0][0] ||\n                        data.handles.points[1][1] !== data.handles.points[0][0];\n                return;\n            }\n            if (handleIndex === 3) {\n                data.handles.points[3] = worldPos;\n                this.editData.hasMoved =\n                    data.handles.points[3][0] !== data.handles.points[2][0] ||\n                        data.handles.points[3][1] !== data.handles.points[2][0];\n                this.angleStartedNotYetCompleted = false;\n                return;\n            }\n            this.editData.hasMoved = false;\n            hideElementCursor(element);\n            data.handles.points[2] = data.handles.points[3] = worldPos;\n            this.editData.handleIndex = data.handles.points.length - 1;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, isNearFirstLine, isNearSecondLine, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined &&\n                (isNearFirstLine || isNearSecondLine)) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                if (isNearFirstLine) {\n                    const firstLinePoints = [points[0], points[1]];\n                    firstLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                else if (isNearSecondLine) {\n                    const secondLinePoints = [points[2], points[3]];\n                    secondLinePoints.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                }\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (!this.isDrawing) {\n                return;\n            }\n            this.isDrawing = false;\n            this._deactivateDraw(element);\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            if (data.handles.points.length < 4) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.angleStartedNotYetCompleted = false;\n            return annotation.annotationUID;\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DOWN, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_START, this._mouseDownCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].angle == null) {\n                    data.cachedStats[targetId] = {\n                        angle: null,\n                        arc1Angle: null,\n                        arc2Angle: null,\n                        points: {\n                            world: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                            canvas: {\n                                arc1Start: null,\n                                arc1End: null,\n                                arc2Start: null,\n                                arc2End: null,\n                                arc1Angle: null,\n                                arc2Angle: null,\n                            },\n                        },\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color,\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const firstLine = [canvasCoordinates[0], canvasCoordinates[1]];\n                const secondLine = [canvasCoordinates[2], canvasCoordinates[3]];\n                let lineUID = 'line1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, firstLine[0], firstLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                renderStatus = true;\n                if (canvasCoordinates.length < 4) {\n                    return renderStatus;\n                }\n                lineUID = 'line2';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, secondLine[0], secondLine[1], {\n                    color,\n                    width: lineWidth,\n                    lineDash,\n                });\n                lineUID = 'linkLine';\n                const mid1 = midPoint2(firstLine[0], firstLine[1]);\n                const mid2 = midPoint2(secondLine[0], secondLine[1]);\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n                    color,\n                    lineWidth: '1',\n                    lineDash: '1,4',\n                });\n                const { arc1Start, arc1End, arc2End, arc2Start } = data.cachedStats[targetId].points.canvas;\n                const { arc1Angle, arc2Angle } = data.cachedStats[targetId];\n                if (this.configuration.showArcLines) {\n                    lineUID = 'arc1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc1Start, arc1End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                    lineUID = 'arc2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, arc2Start, arc2End, {\n                        color,\n                        lineWidth: '1',\n                    });\n                }\n                if (!data.cachedStats[targetId]?.angle) {\n                    continue;\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = 'cobbAngleText';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n                if (this.configuration.showArcLines) {\n                    const arc1TextBoxUID = 'arcAngle1';\n                    const arc1TextLine = [\n                        `${arc1Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch1TextPosCanvas = midPoint2(arc1Start, arc1End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc1TextBoxUID, arc1TextLine, arch1TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                    const arc2TextBoxUID = 'arcAngle2';\n                    const arc2TextLine = [\n                        `${arc2Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n                    ];\n                    const arch2TextPosCanvas = midPoint2(arc2Start, arc2End);\n                    drawTextBoxSvg(svgDrawingHelper, annotationUID, arc2TextBoxUID, arc2TextLine, arch2TextPosCanvas, {\n                        ...options,\n                        padding: 3,\n                    });\n                }\n            }\n            return renderStatus;\n        };\n        this.distanceToLines = ({ viewport, points, canvasCoords, proximity }) => {\n            const [point1, point2, point3, point4] = points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const canvasPoint3 = viewport.worldToCanvas(point3);\n            const canvasPoint4 = viewport.worldToCanvas(point4);\n            const line1 = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const line2 = {\n                start: {\n                    x: canvasPoint3[0],\n                    y: canvasPoint3[1],\n                },\n                end: {\n                    x: canvasPoint4[0],\n                    y: canvasPoint4[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line1.start.x, line1.start.y], [line1.end.x, line1.end.y], [canvasCoords[0], canvasCoords[1]]);\n            const distanceToPoint2 = lineSegment.distanceToPoint([line2.start.x, line2.start.y], [line2.end.x, line2.end.y], [canvasCoords[0], canvasCoords[1]]);\n            let isNearFirstLine = false;\n            let isNearSecondLine = false;\n            if (distanceToPoint <= proximity) {\n                isNearFirstLine = true;\n            }\n            else if (distanceToPoint2 <= proximity) {\n                isNearSecondLine = true;\n            }\n            return {\n                distanceToPoint,\n                distanceToPoint2,\n                isNearFirstLine,\n                isNearSecondLine,\n            };\n        };\n        this.getArcsStartEndPoints = ({ firstLine, secondLine, mid1, mid2, }) => {\n            const linkLine = [mid1, mid2];\n            const arc1Angle = angleBetweenLines(firstLine, linkLine);\n            const arc2Angle = angleBetweenLines(secondLine, linkLine);\n            const arc1Side = arc1Angle > 90 ? 1 : 0;\n            const arc2Side = arc2Angle > 90 ? 0 : 1;\n            const midLinkLine = midPoint2(linkLine[0], linkLine[1]);\n            const linkLineLength = Math.sqrt((linkLine[1][0] - linkLine[0][0]) ** 2 +\n                (linkLine[1][1] - linkLine[0][1]) ** 2);\n            const ratio = 0.1;\n            const midFirstLine = midPoint2(firstLine[0], firstLine[1]);\n            const midSecondLine = midPoint2(secondLine[0], secondLine[1]);\n            const directionVectorStartArc1 = [\n                firstLine[arc1Side][0] - midFirstLine[0],\n                firstLine[arc1Side][1] - midFirstLine[1],\n            ];\n            const magnitudeStartArc1 = Math.sqrt(directionVectorStartArc1[0] ** 2 + directionVectorStartArc1[1] ** 2);\n            const normalizedDirectionStartArc1 = [\n                directionVectorStartArc1[0] / magnitudeStartArc1,\n                directionVectorStartArc1[1] / magnitudeStartArc1,\n            ];\n            const arc1Start = [\n                midFirstLine[0] +\n                    normalizedDirectionStartArc1[0] * linkLineLength * ratio,\n                midFirstLine[1] +\n                    normalizedDirectionStartArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc1 = [\n                midLinkLine[0] - mid1[0],\n                midLinkLine[1] - mid1[1],\n            ];\n            const magnitudeEndArc1 = Math.sqrt(directionVectorEndArc1[0] ** 2 + directionVectorEndArc1[1] ** 2);\n            const normalizedDirectionEndArc1 = [\n                directionVectorEndArc1[0] / magnitudeEndArc1,\n                directionVectorEndArc1[1] / magnitudeEndArc1,\n            ];\n            const arc1End = [\n                mid1[0] + normalizedDirectionEndArc1[0] * linkLineLength * ratio,\n                mid1[1] + normalizedDirectionEndArc1[1] * linkLineLength * ratio,\n            ];\n            const directionVectorStartArc2 = [\n                secondLine[arc2Side][0] - midSecondLine[0],\n                secondLine[arc2Side][1] - midSecondLine[1],\n            ];\n            const magnitudeStartArc2 = Math.sqrt(directionVectorStartArc2[0] ** 2 + directionVectorStartArc2[1] ** 2);\n            const normalizedDirectionStartArc2 = [\n                directionVectorStartArc2[0] / magnitudeStartArc2,\n                directionVectorStartArc2[1] / magnitudeStartArc2,\n            ];\n            const arc2Start = [\n                midSecondLine[0] +\n                    normalizedDirectionStartArc2[0] * linkLineLength * ratio,\n                midSecondLine[1] +\n                    normalizedDirectionStartArc2[1] * linkLineLength * ratio,\n            ];\n            const directionVectorEndArc2 = [\n                midLinkLine[0] - mid2[0],\n                midLinkLine[1] - mid2[1],\n            ];\n            const magnitudeEndArc2 = Math.sqrt(directionVectorEndArc2[0] ** 2 + directionVectorEndArc2[1] ** 2);\n            const normalizedDirectionEndArc2 = [\n                directionVectorEndArc2[0] / magnitudeEndArc2,\n                directionVectorEndArc2[1] / magnitudeEndArc2,\n            ];\n            const arc2End = [\n                mid2[0] + normalizedDirectionEndArc2[0] * linkLineLength * ratio,\n                mid2[1] + normalizedDirectionEndArc2[1] * linkLineLength * ratio,\n            ];\n            return {\n                arc1Start,\n                arc1End,\n                arc2Start,\n                arc2End,\n                arc1Angle: arc1Angle > 90 ? 180 - arc1Angle : arc1Angle,\n                arc2Angle: arc2Angle > 90 ? 180 - arc2Angle : arc2Angle,\n            };\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 25, { trailing: true });\n    }\n    handleSelectedCallback(evt, annotation, handle, interactionType = 'mouse') {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        if (data.handles.points.length !== 4) {\n            return;\n        }\n        const seg1 = [null, null];\n        const seg2 = [null, null];\n        let minDist = Number.MAX_VALUE;\n        for (let i = 0; i < 2; i += 1) {\n            for (let j = 2; j < 4; j += 1) {\n                const dist = vec3.distance(data.handles.points[i], data.handles.points[j]);\n                if (dist < minDist) {\n                    minDist = dist;\n                    seg1[1] = data.handles.points[i];\n                    seg1[0] = data.handles.points[(i + 1) % 2];\n                    seg2[0] = data.handles.points[j];\n                    seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n                }\n            }\n        }\n        const { viewport } = enabledElement;\n        const { element } = viewport;\n        const canvasPoints = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const firstLine = [canvasPoints[0], canvasPoints[1]];\n        const secondLine = [canvasPoints[2], canvasPoints[3]];\n        const mid1 = midPoint2(firstLine[0], firstLine[1]);\n        const mid2 = midPoint2(secondLine[0], secondLine[1]);\n        const { arc1Start, arc1End, arc2End, arc2Start, arc1Angle, arc2Angle } = this.getArcsStartEndPoints({\n            firstLine,\n            secondLine,\n            mid1,\n            mid2,\n        });\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            cachedStats[targetId] = {\n                angle: angleBetweenLines(seg1, seg2),\n                arc1Angle,\n                arc2Angle,\n                points: {\n                    canvas: {\n                        arc1Start,\n                        arc1End,\n                        arc2End,\n                        arc2Start,\n                    },\n                    world: {\n                        arc1Start: viewport.canvasToWorld(arc1Start),\n                        arc1End: viewport.canvasToWorld(arc1End),\n                        arc2End: viewport.canvasToWorld(arc2End),\n                        arc2Start: viewport.canvasToWorld(arc2Start),\n                    },\n                },\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { angle } = cachedVolumeStats;\n    if (angle === undefined) {\n        return;\n    }\n    const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n    return textLines;\n}\nexport default CobbAngleTool;\n","import { ChangeTypes, Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils, StackViewport, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandle as drawHandleSvg, drawLine as drawLineSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { distanceToPoint } from '../../utilities/math/point';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { getCalibratedProbeUnitsAndValue } from '../../utilities/getCalibratedUnits';\nimport { lineSegment } from '../../utilities/math';\nconst { transformWorldToIndex } = csUtils;\nclass UltrasoundDirectionalTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundDirectionalTool'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            displayBothAxesDistances: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            if (this.startedDrawing) {\n                return;\n            }\n            this.startedDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (!(viewport instanceof StackViewport)) {\n                throw new Error('UltrasoundDirectionalTool can only be used on a StackViewport');\n            }\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    label: '',\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            if (this.startedDrawing && data.handles.points.length === 1) {\n                this.editData.handleIndex = 1;\n                return;\n            }\n            this.startedDrawing = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                data.handles.points[handleIndex] = [...worldPos];\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                this.startedDrawing = false;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].xValues == null) {\n                    data.cachedStats[targetId] = {\n                        xValues: [0, 0],\n                        yValues: [0, 0],\n                        isHorizontal: false,\n                        units: [''],\n                        isUnitless: false,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let handleGroupUID = '0';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[0], {\n                    color,\n                }, 0);\n                renderStatus = true;\n                if (canvasCoordinates.length !== 2) {\n                    return renderStatus;\n                }\n                handleGroupUID = '1';\n                drawHandleSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates[1], {\n                    color,\n                }, 1);\n                const isUnitless = data.cachedStats[targetId].isUnitless;\n                if (!isUnitless) {\n                    const canvasPoint1 = canvasCoordinates[0];\n                    const canvasPoint2 = canvasCoordinates[1];\n                    const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                    const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                    const isHorizontal = data.cachedStats[targetId].isHorizontal;\n                    let projectedPointCanvas = [0, 0];\n                    if (isHorizontal) {\n                        projectedPointCanvas = [\n                            canvasPoint1[0] + canvasDeltaX,\n                            canvasPoint1[1],\n                        ];\n                    }\n                    else {\n                        projectedPointCanvas = [\n                            canvasPoint1[0],\n                            canvasPoint1[1] + canvasDeltaY,\n                        ];\n                    }\n                    let dataId = `${annotationUID}-line-1`;\n                    let lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                    dataId = `${annotationUID}-line-2`;\n                    lineUID = '2';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[1], projectedPointCanvas, {\n                        color,\n                        width: 1,\n                        lineDash: [1, 1],\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                else {\n                    const dataId = `${annotationUID}-line-1`;\n                    const lineUID = '1';\n                    drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                        color,\n                        width: 1,\n                        shadow: this.configuration.shadow,\n                    }, dataId);\n                }\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId, this.configuration);\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = canvasCoordinates[1];\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    toolSelectedCallback(evt, annotation, interactionType, canvasCoords) {\n        return;\n    }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        this.editData = {\n            handleIndex,\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine } = enabledElement;\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n        const data = annotation.data;\n        const { element } = enabledElement.viewport;\n        if (data.handles.points.length !== 2) {\n            return;\n        }\n        const { cachedStats } = data;\n        const targetIds = Object.keys(cachedStats);\n        for (let i = 0; i < targetIds.length; i++) {\n            const targetId = targetIds[i];\n            const image = this.getTargetImageData(targetId);\n            if (!image) {\n                continue;\n            }\n            const { imageData } = image;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const imageIndex1 = transformWorldToIndex(imageData, worldPos1);\n            const imageIndex2 = transformWorldToIndex(imageData, worldPos2);\n            const { values: values1, units: units1 } = getCalibratedProbeUnitsAndValue(image, [imageIndex1]);\n            const { values: values2, units: units2 } = getCalibratedProbeUnitsAndValue(image, [imageIndex2]);\n            let xValues, yValues, units, isHorizontal;\n            let isUnitless = false;\n            if (units1[0] !== units2[0] ||\n                units1[1] !== units2[1] ||\n                (units1[0] === 'raw' && units2[0] === 'raw')) {\n                const value = distanceToPoint(worldPos1, worldPos2);\n                xValues = [value, 0];\n                yValues = [value, 0];\n                units = ['px'];\n                isUnitless = true;\n            }\n            else {\n                const canvasPoint1 = enabledElement.viewport.worldToCanvas(worldPos1);\n                const canvasPoint2 = enabledElement.viewport.worldToCanvas(worldPos2);\n                const canvasDeltaY = canvasPoint2[1] - canvasPoint1[1];\n                const canvasDeltaX = canvasPoint2[0] - canvasPoint1[0];\n                isHorizontal = Math.abs(canvasDeltaX) > Math.abs(canvasDeltaY);\n                xValues = [values1[0], values2[0]];\n                yValues = [values1[1], values2[1]];\n                units = [units1[0], units1[1]];\n            }\n            cachedStats[targetId] = {\n                xValues,\n                yValues,\n                isHorizontal,\n                units,\n                isUnitless,\n            };\n        }\n        const invalidated = annotation.invalidated;\n        annotation.invalidated = false;\n        if (invalidated) {\n            triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n        }\n        return cachedStats;\n    }\n}\nfunction defaultGetTextLines(data, targetId, configuration) {\n    const cachedStats = data.cachedStats[targetId];\n    const { xValues, yValues, units, isUnitless, isHorizontal } = cachedStats;\n    if (isUnitless) {\n        return [`${csUtils.roundNumber(xValues[0])} px`];\n    }\n    if (configuration.displayBothAxesDistances) {\n        const dist1 = Math.abs(xValues[1] - xValues[0]);\n        const dist2 = Math.abs(yValues[1] - yValues[0]);\n        return [\n            `${csUtils.roundNumber(dist1)} ${units[0]}`,\n            `${csUtils.roundNumber(dist2)} ${units[1]}`,\n        ];\n    }\n    if (isHorizontal) {\n        const dist = Math.abs(xValues[1] - xValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[0]}`];\n    }\n    else {\n        const dist = Math.abs(yValues[1] - yValues[0]);\n        return [`${csUtils.roundNumber(dist)} ${units[1]}`];\n    }\n}\nexport default UltrasoundDirectionalTool;\n","import { Events, ChangeTypes } from '../../../enums';\nimport { getEnabledElement, utilities, metaData, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../../stateManagement/annotation/helpers/state';\nimport * as lineSegment from '../../../utilities/math/line';\nimport { drawHandles as drawHandlesSvg, drawLine as drawLineSvg, drawFan as drawFanSvg, } from '../../../drawingSvg';\nimport { state } from '../../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../../cursors/elementCursor';\nimport { angleFromCenter, calculateInnerFanPercentage, clipInterval, intervalFromPoints, mergeIntervals, subtractIntervals, } from '../../../utilities/math/fan/fanUtils';\nimport { calculateFanGeometry } from './utils/fanExtraction';\nconst { transformIndexToWorld } = utilities;\nclass UltrasoundPleuraBLineTool extends AnnotationTool {\n    static { this.toolName = 'UltrasoundPleuraBLineTool'; }\n    static { this.USPleuraBLineAnnotationType = {\n        BLINE: 'bLine',\n        PLEURA: 'pleura',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n            center: null,\n            innerRadius: null,\n            outerRadius: null,\n            startAngle: null,\n            endAngle: null,\n            bLineColor: 'rgb(60, 255, 60)',\n            pleuraColor: 'rgb(0, 4, 255)',\n            drawDepthGuide: true,\n            depth_ratio: 0.5,\n            depthGuideColor: 'rgb(0, 255, 255)',\n            depthGuideThickness: 4,\n            depthGuideDashLength: 20,\n            depthGuideDashGap: 16,\n            depthGuideOpacity: 0.2,\n            fanOpacity: 0.1,\n            showFanAnnotations: true,\n            updatePercentageCallback: null,\n            actions: {\n                undo: {\n                    method: 'undo',\n                    bindings: [{ key: 'z' }],\n                },\n                redo: {\n                    method: 'redo',\n                    bindings: [{ key: 'y' }],\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.pleuraAnnotations = [];\n        this.bLineAnnotations = [];\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            hideElementCursor(element);\n            this.isDrawing = true;\n            const { viewPlaneNormal, viewUp, position: cameraPosition, } = viewport.getCamera();\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    ...viewport.getViewReference({ points: [worldPos] }),\n                    toolName: this.getToolName(),\n                    referencedImageId,\n                    viewUp,\n                    cameraPosition,\n                },\n                data: {\n                    handles: {\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                    },\n                    annotationType: this.getActiveAnnotationType(),\n                    label: '',\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 1,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const [point1, point2] = data.handles.points;\n            const canvasPoint1 = viewport.worldToCanvas(point1);\n            const canvasPoint2 = viewport.worldToCanvas(point2);\n            const line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            const distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.doneEditMemo();\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { viewport } = getEnabledElement(element) || {};\n            if (!viewport) {\n                return;\n            }\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                const allPointsInsideShape = points.every((point) => {\n                    const newPoint = [\n                        point[0] + worldPosDelta[0],\n                        point[1] + worldPosDelta[1],\n                        point[2] + worldPosDelta[2],\n                    ];\n                    return this.isInsideFanShape(viewport, newPoint);\n                });\n                if (allPointsInsideShape) {\n                    points.forEach((point) => {\n                        point[0] += worldPosDelta[0];\n                        point[1] += worldPosDelta[1];\n                        point[2] += worldPosDelta[2];\n                    });\n                    annotation.invalidated = true;\n                }\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const worldPos = currentPoints.world;\n                if (this.isInsideFanShape(viewport, worldPos)) {\n                    data.handles.points[handleIndex] = [...worldPos];\n                    annotation.invalidated = true;\n                }\n            }\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            if (!this.getFanShapeGeometryParameters(viewport)) {\n                return;\n            }\n            const { imageData } = viewport.getImageData() || {};\n            if (!imageData) {\n                return renderStatus;\n            }\n            if (this.configuration.drawDepthGuide) {\n                this.drawDepthGuide(svgDrawingHelper, viewport);\n            }\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            const fanCenter = viewport.worldToCanvas(transformIndexToWorld(imageData, this.configuration.center));\n            const indexToCanvasRatio = this.getIndexToCanvasRatio(viewport);\n            const innerRadius = this.configuration.innerRadius * indexToCanvasRatio;\n            const outerRadius = this.configuration.outerRadius * indexToCanvasRatio;\n            const currentImageId = viewport.getCurrentImageId();\n            const unMergedPleuraIntervals = annotations\n                .filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId)\n                .map((annotation) => {\n                const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n                const interval = intervalFromPoints(fanCenter, canvasCoordinates);\n                return interval;\n            });\n            const mergedPleuraIntervals = mergeIntervals(unMergedPleuraIntervals);\n            const pleuraIntervalsDisplayed = [];\n            const bLineIntervalsDisplayed = [];\n            const drawAnnotation = (annotation) => {\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    return;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, canvasCoordinates, {\n                        color: this.getColorForLineType(annotation),\n                        fill: this.getColorForLineType(annotation),\n                        lineDash,\n                        lineWidth,\n                    });\n                }\n                const dataId = `${annotationUID}-line`;\n                const lineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color: this.getColorForLineType(annotation),\n                    width: lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId);\n                if (this.configuration.showFanAnnotations) {\n                    const lineInterval = intervalFromPoints(fanCenter, canvasCoordinates);\n                    let fanNumber = 0;\n                    if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                        const uncoveredIntervals = subtractIntervals(bLineIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval) => {\n                            const clippedIntervals = clipInterval(interval, mergedPleuraIntervals);\n                            clippedIntervals.forEach((clippedInterval) => {\n                                fanNumber++;\n                                const fanIndex = fanNumber;\n                                const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                                const fanUID = `2-${fanIndex}`;\n                                drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, clippedInterval[0], clippedInterval[1], {\n                                    color: 'transparent',\n                                    fill: this.getColorForLineType(annotation),\n                                    fillOpacity: this.configuration.fanOpacity,\n                                    width: lineWidth,\n                                    lineDash,\n                                    shadow,\n                                }, fanDataId, 10);\n                                bLineIntervalsDisplayed.push(clippedInterval);\n                            });\n                        });\n                    }\n                    else if (annotation.data.annotationType ===\n                        UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                        const uncoveredIntervals = subtractIntervals(pleuraIntervalsDisplayed, lineInterval);\n                        uncoveredIntervals.forEach((interval, index) => {\n                            fanNumber++;\n                            const fanIndex = fanNumber;\n                            const fanDataId = `${annotationUID}-fan-${fanIndex}`;\n                            const fanUID = `2-${fanIndex}`;\n                            drawFanSvg(svgDrawingHelper, annotationUID, fanUID, fanCenter, innerRadius, outerRadius, interval[0], interval[1], {\n                                color: 'transparent',\n                                fill: this.getColorForLineType(annotation),\n                                fillOpacity: this.configuration.fanOpacity,\n                                width: lineWidth,\n                                lineDash,\n                                shadow,\n                            }, fanDataId, 5);\n                            pleuraIntervalsDisplayed.push(interval);\n                        });\n                    }\n                }\n            };\n            const pleuraAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n                annotation.metadata.referencedImageId === currentImageId);\n            pleuraAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            const bLineAnnotationsToDraw = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n                annotation.metadata.referencedImageId === currentImageId);\n            bLineAnnotationsToDraw.forEach((annotation) => {\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                drawAnnotation(annotation);\n            });\n            renderStatus = true;\n            if (this.configuration.updatePercentageCallback && viewport) {\n                this.configuration.updatePercentageCallback(this.calculateBLinePleuraPercentage(viewport));\n            }\n            return renderStatus;\n        };\n        this.activeAnnotationType =\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE;\n    }\n    static filterAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return [];\n        }\n        const filteredAnnotations = annotations.filter((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            return filterFunction(currentImageId);\n        });\n        return filteredAnnotations;\n    }\n    static countAnnotations(element, filterFunction = () => true) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        const { viewport } = getEnabledElement(element);\n        const imageIds = viewport.getImageIds();\n        const getImageIdIndex = (imageId) => {\n            const index = imageIds.findIndex((id) => id === imageId);\n            if (index === -1) {\n                return 0;\n            }\n            return index;\n        };\n        if (!annotations?.length) {\n            return;\n        }\n        const annotationMapping = new Map();\n        annotations.forEach((annotation) => {\n            const currentImageId = annotation.metadata.referencedImageId;\n            if (!filterFunction(currentImageId)) {\n                return;\n            }\n            const { annotationType } = annotation.data;\n            let counts;\n            if (annotationMapping.has(currentImageId)) {\n                counts = annotationMapping.get(currentImageId);\n            }\n            else {\n                counts = {\n                    frame: getImageIdIndex(currentImageId),\n                    bLine: 0,\n                    pleura: 0,\n                };\n            }\n            if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n                counts.pleura++;\n            }\n            else if (annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n                counts.bLine++;\n            }\n            annotationMapping.set(currentImageId, counts);\n        });\n        return annotationMapping;\n    }\n    static deleteAnnotations(element, filterFunction = () => false) {\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (!annotations?.length) {\n            return;\n        }\n        annotations.forEach((annotation) => {\n            if (!filterFunction(annotation.metadata.referencedImageId)) {\n                return;\n            }\n            removeAnnotation(annotation.annotationUID);\n        });\n    }\n    setActiveAnnotationType(type) {\n        this.activeAnnotationType = type;\n    }\n    getActiveAnnotationType() {\n        return this.activeAnnotationType;\n    }\n    deleteLastAnnotationType(element, type) {\n        let annotationList;\n        const annotations = getAnnotations(UltrasoundPleuraBLineTool.toolName, element);\n        if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA);\n        }\n        else if (type === UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            annotationList = annotations.filter((annotation) => annotation.data.annotationType ===\n                UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE);\n        }\n        if (annotationList?.length > 0) {\n            const annotation = annotationList.pop();\n            removeAnnotation(annotation.annotationUID);\n        }\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(UltrasoundPleuraBLineTool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                },\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n    handleSelectedCallback(evt, annotation, handle) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        const { data } = annotation;\n        annotation.highlighted = true;\n        let movingTextBox = false;\n        let handleIndex;\n        if (handle.worldPosition) {\n            movingTextBox = true;\n        }\n        else {\n            handleIndex = data.handles.points.findIndex((p) => p === handle);\n        }\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex,\n            movingTextBox,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    isInsideFanShape(viewport, point) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return false;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (imageData) {\n            const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n            const canvasCoordinates = viewport.worldToCanvas(point);\n            const angle = angleFromCenter(fanCenter, canvasCoordinates);\n            return (angle >= this.configuration.startAngle &&\n                angle <= this.configuration.endAngle);\n        }\n    }\n    updateFanGeometryConfiguration(fanGeometry) {\n        if (!fanGeometry) {\n            return;\n        }\n        if (this.isFanShapeGeometryParametersValid(fanGeometry)) {\n            this.configuration.center = [\n                fanGeometry.center[0],\n                fanGeometry.center[1],\n                0,\n            ];\n        }\n        this.configuration.innerRadius = fanGeometry.innerRadius;\n        this.configuration.outerRadius = fanGeometry.outerRadius;\n        this.configuration.startAngle = fanGeometry.startAngle;\n        this.configuration.endAngle = fanGeometry.endAngle;\n    }\n    deriveFanGeometryFromViewport(viewport) {\n        const imageId = viewport.getCurrentImageId();\n        const { fanGeometry } = calculateFanGeometry(imageId) || {};\n        if (fanGeometry) {\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n    }\n    isFanShapeGeometryParametersValid(fanGeometry) {\n        if (!fanGeometry) {\n            fanGeometry = this.configuration;\n        }\n        return (fanGeometry?.center &&\n            fanGeometry?.innerRadius > 0 &&\n            fanGeometry?.outerRadius &&\n            fanGeometry?.startAngle > 0 &&\n            fanGeometry?.startAngle < 360 &&\n            fanGeometry?.endAngle > 0 &&\n            fanGeometry?.endAngle < 360);\n    }\n    getFanShapeGeometryParameters(viewport) {\n        if (this.isFanShapeGeometryParametersValid()) {\n            return true;\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            const imageId = viewport.getCurrentImageId();\n            const fanGeometry = metaData.get('ultrasoundFanShapeGeometry', imageId);\n            this.updateFanGeometryConfiguration(fanGeometry);\n        }\n        if (!this.isFanShapeGeometryParametersValid()) {\n            this.deriveFanGeometryFromViewport(viewport);\n        }\n        return this.isFanShapeGeometryParametersValid();\n    }\n    calculateBLinePleuraPercentage(viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const { element } = viewport;\n        const fanCenter = viewport.worldToCanvas(imageData.indexToWorld(this.configuration.center));\n        const currentImageId = viewport.getCurrentImageId();\n        const annotations = getAnnotations(this.getToolName(), element) || [];\n        const pleuraIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        const bLineIntervals = annotations\n            .filter((annotation) => annotation.data.annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE &&\n            annotation.metadata.referencedImageId === currentImageId)\n            .map((annotation) => {\n            const canvasCoordinates = annotation.data.handles.points.map((p) => viewport.worldToCanvas(p));\n            return canvasCoordinates;\n        });\n        return calculateInnerFanPercentage(fanCenter, pleuraIntervals, bLineIntervals);\n    }\n    getColorForLineType(annotation) {\n        const { annotationType } = annotation.data;\n        const { bLineColor, pleuraColor } = this.configuration;\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.BLINE) {\n            return bLineColor;\n        }\n        if (annotationType ===\n            UltrasoundPleuraBLineTool.USPleuraBLineAnnotationType.PLEURA) {\n            return pleuraColor;\n        }\n        return bLineColor;\n    }\n    getIndexToCanvasRatio(viewport) {\n        const { imageData } = viewport.getImageData() || {};\n        const v1 = viewport.worldToCanvas(imageData.indexToWorld([1, 0, 0]));\n        const v2 = viewport.worldToCanvas(imageData.indexToWorld([2, 0, 0]));\n        const diffVector = [v2[0] - v1[0], v2[1] - v1[1]];\n        const vectorSize = Math.sqrt(diffVector[0] * diffVector[0] + diffVector[1] * diffVector[1]);\n        return vectorSize;\n    }\n    drawDepthGuide(svgDrawingHelper, viewport) {\n        if (!this.getFanShapeGeometryParameters(viewport)) {\n            return;\n        }\n        const { imageData } = viewport.getImageData() || {};\n        if (!imageData) {\n            return;\n        }\n        const radToDegree = (rad) => (rad * 180) / Math.PI;\n        const degreeToRad = (degree) => (degree * Math.PI) / 180;\n        const indexToCanvas = (point) => {\n            return viewport.worldToCanvas(transformIndexToWorld(imageData, point));\n        };\n        const depth_radius = this.configuration.innerRadius +\n            this.configuration.depth_ratio *\n                (this.configuration.outerRadius - this.configuration.innerRadius);\n        const theta_start = this.configuration.startAngle;\n        const theta_end = this.configuration.endAngle;\n        const theta_range = theta_end - theta_start;\n        const arc_length = degreeToRad(theta_range) * depth_radius;\n        let num_dashes = Math.round(arc_length /\n            (this.configuration.depthGuideDashLength +\n                this.configuration.depthGuideDashGap));\n        if (num_dashes <= 0) {\n            num_dashes = Math.max(15, Math.round(theta_range / 5));\n        }\n        const theta_step = theta_range / num_dashes;\n        for (let i = 0; i < num_dashes; i++) {\n            const theta1 = degreeToRad(theta_start + i * theta_step);\n            const theta2 = degreeToRad(theta_start +\n                i * theta_step +\n                radToDegree(this.configuration.depthGuideDashLength) / depth_radius);\n            const start_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta1),\n                this.configuration.center[1] + depth_radius * Math.sin(theta1),\n                0,\n            ];\n            const end_point = [\n                this.configuration.center[0] + depth_radius * Math.cos(theta2),\n                this.configuration.center[1] + depth_radius * Math.sin(theta2),\n                0,\n            ];\n            drawLineSvg(svgDrawingHelper, viewport.id, `depthGuide-${i}`, indexToCanvas(start_point), indexToCanvas(end_point), {\n                color: this.configuration.depthGuideColor,\n                lineWidth: this.configuration.depthGuideThickness,\n                strokeOpacity: this.configuration.depthGuideOpacity,\n            });\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (utilities.indexWithinDimensions(index1, dimensions) &&\n            utilities.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    return [''];\n}\nexport default UltrasoundPleuraBLineTool;\n","import { Events } from '../../enums';\nimport { getEnabledElement, utilities as csUtils } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawArrow as drawArrowSvg, drawHandles as drawHandlesSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nclass KeyImageTool extends AnnotationTool {\n    static { this.toolName = 'KeyImage'; }\n    static { this.dataSeries = {\n        data: {\n            seriesLevel: true,\n        },\n    }; }\n    static { this.dataPoint = {\n        data: {\n            isPoint: true,\n        },\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            getTextCallback,\n            changeTextCallback,\n            canvasPosition: [10, 10],\n            canvasSize: 10,\n            handleRadius: '6',\n            seriesLevel: false,\n            isPoint: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element, currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const worldPos = currentPoints.world;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: { points: [[...worldPos]] },\n                    seriesLevel: this.configuration.seriesLevel,\n                    isPoint: this.configuration.isPoint,\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            this.configuration.getTextCallback((text) => {\n                if (!text) {\n                    removeAnnotation(annotation.annotationUID);\n                    triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                    this.isDrawing = false;\n                    return;\n                }\n                annotation.data.text = text;\n                triggerAnnotationCompleted(annotation);\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            });\n            this.createMemo(element, annotation, { newAnnotation: true });\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            if (!data?.isPoint) {\n                return false;\n            }\n            const { canvasPosition, canvasSize } = this.configuration;\n            if (!canvasPosition?.length) {\n                return false;\n            }\n            if (Math.abs(canvasCoords[0] - canvasPosition[0] + canvasSize / 2) <=\n                canvasSize / 2 &&\n                Math.abs(canvasCoords[1] - canvasPosition[1] + canvasSize / 2) <=\n                    canvasSize / 2) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            annotation.highlighted = true;\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { viewportId, renderingEngine } = getEnabledElement(element);\n            this.eventDispatchDetail = {\n                viewportId,\n                renderingEngineId: renderingEngine.id,\n            };\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            if (newAnnotation) {\n                this.createMemo(element, annotation, { newAnnotation });\n            }\n            this.editData = null;\n            this.isDrawing = false;\n            this.doneEditMemo();\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this.doubleClickCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            let annotations = getAnnotations(this.getToolName(), element);\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return;\n            }\n            const clickedAnnotation = annotations.find((annotation) => this.isPointNearTool(element, annotation, eventDetail.currentPoints.canvas, 6));\n            if (!clickedAnnotation) {\n                return;\n            }\n            const annotation = clickedAnnotation;\n            this.createMemo(element, annotation);\n            this.configuration.changeTextCallback(clickedAnnotation, evt.detail, this._doneChangingTextCallback.bind(this, element, annotation));\n            this.isDrawing = false;\n            this.doneEditMemo();\n            evt.stopImmediatePropagation();\n            evt.preventDefault();\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            this.createMemo(element, annotation, { newAnnotation });\n            data.handles.points[0] = [...worldPos];\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { canvasPosition, canvasSize } = this.configuration;\n                const arrowUID = '1';\n                if (data?.isPoint) {\n                    const point = data.handles.points[0];\n                    const canvasCoordinates = viewport.worldToCanvas(point);\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, arrowUID, [canvasCoordinates], {\n                        color,\n                        lineWidth,\n                        handleRadius: this.configuration.handleRadius,\n                    });\n                }\n                else if (canvasPosition?.length) {\n                    drawArrowSvg(svgDrawingHelper, annotationUID, arrowUID, canvasPosition.map((it) => it + canvasSize), canvasPosition, {\n                        color,\n                        width: 1,\n                    });\n                }\n                renderStatus = true;\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n            }\n            return renderStatus;\n        };\n    }\n    handleSelectedCallback(evt, annotation) {\n        const eventDetail = evt.detail;\n        const { element } = eventDetail;\n        annotation.highlighted = true;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n        };\n        this._activateModify(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        evt.preventDefault();\n    }\n    static setPoint(annotation, isPoint = !annotation.data.isPoint, element) {\n        annotation.data.isPoint = isPoint;\n        triggerAnnotationModified(annotation, element);\n    }\n    _doneChangingTextCallback(element, annotation, updatedText) {\n        annotation.data.text = updatedText;\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        triggerAnnotationModified(annotation, element);\n    }\n    cancel(element) {\n        if (this.isDrawing) {\n            this.isDrawing = false;\n            this._deactivateModify(element);\n            resetElementCursor(element);\n            const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n            const { data } = annotation;\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            return annotation.annotationUID;\n        }\n    }\n    _isInsideVolume(index1, index2, dimensions) {\n        return (csUtils.indexWithinDimensions(index1, dimensions) &&\n            csUtils.indexWithinDimensions(index2, dimensions));\n    }\n}\nfunction getTextCallback(doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n    return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\nexport default KeyImageTool;\n","import { BaseTool, AnnotationTool } from './base';\nimport { getAnnotations, getAnnotation, removeAnnotation, } from '../stateManagement/annotation/annotationState';\nimport { setAnnotationSelected } from '../stateManagement/annotation/annotationSelection';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\nclass AnnotationEraserTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'mouse');\n        };\n        this.preTouchStartCallback = (evt) => {\n            return this._deleteNearbyAnnotations(evt, 'touch');\n        };\n    }\n    _deleteNearbyAnnotations(evt, interactionType) {\n        const { renderingEngineId, viewportId, element, currentPoints } = evt.detail;\n        const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n        if (!toolGroup) {\n            return false;\n        }\n        const tools = toolGroup._toolInstances;\n        const annotationsToRemove = [];\n        for (const toolName in tools) {\n            const toolInstance = tools[toolName];\n            if (typeof toolInstance.isPointNearTool !== 'function' ||\n                typeof toolInstance.filterInteractableAnnotationsForElement !==\n                    'function') {\n                continue;\n            }\n            const annotations = getAnnotations(toolName, element);\n            const interactableAnnotations = toolInstance.filterInteractableAnnotationsForElement(element, annotations);\n            if (!interactableAnnotations) {\n                continue;\n            }\n            for (const annotation of interactableAnnotations) {\n                if (toolInstance.isPointNearTool(element, annotation, currentPoints.canvas, 10, interactionType)) {\n                    annotationsToRemove.push(annotation.annotationUID);\n                }\n            }\n        }\n        for (const annotationUID of annotationsToRemove) {\n            setAnnotationSelected(annotationUID);\n            const annotation = getAnnotation(annotationUID);\n            AnnotationTool.createAnnotationMemo(element, annotation, {\n                deleting: true,\n            });\n            removeAnnotation(annotationUID);\n        }\n        evt.preventDefault();\n        return true;\n    }\n}\nAnnotationEraserTool.toolName = 'Eraser';\nexport default AnnotationEraserTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getRenderingEngine, } from '@cornerstonejs/core';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nclass RegionSegmentTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegment'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positiveSeedVariance: 0.5,\n            negativeSeedVariance: 0.9,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.growCutData.circleBorderPoint = currentWorldPoint;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        await super.preMouseDownCallback(evt);\n        Object.assign(this.growCutData, {\n            circleCenterPoint: worldPoint,\n            circleBorderPoint: worldPoint,\n        });\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, renderingEngineId, viewportId, circleCenterPoint, circleBorderPoint, options, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const worldCircleRadius = vec3.len(vec3.sub(vec3.create(), circleCenterPoint, circleBorderPoint));\n        const sphereInfo = {\n            center: circleCenterPoint,\n            radius: worldCircleRadius,\n        };\n        return growCut.runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options);\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentation: segmentationData, circleCenterPoint, circleBorderPoint, } = this.growCutData;\n        const canvasCenterPoint = viewport.worldToCanvas(circleCenterPoint);\n        const canvasBorderPoint = viewport.worldToCanvas(circleBorderPoint);\n        const vecCenterToBorder = vec2.sub(vec2.create(), canvasBorderPoint, canvasCenterPoint);\n        const circleRadius = vec2.len(vecCenterToBorder);\n        if (csUtils.isEqual(circleRadius, 0)) {\n            return;\n        }\n        const annotationUID = 'growcut';\n        const circleUID = '0';\n        const { color } = this.getSegmentStyle({\n            segmentationId: segmentationData.segmentationId,\n            segmentIndex: segmentationData.segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, canvasCenterPoint, circleRadius, {\n            color,\n        });\n    }\n}\nexport default RegionSegmentTool;\n","import { cache, utilities as csUtils, getEnabledElement, } from '@cornerstonejs/core';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nimport { calculateGrowCutSeeds } from '../../utilities/segmentation/growCut/runOneClickGrowCut';\nimport { ToolModes } from '../../enums';\nclass RegionSegmentPlusTool extends GrowCutBaseTool {\n    static { this.toolName = 'RegionSegmentPlus'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: false,\n            positiveSeedVariance: 0.4,\n            negativeSeedVariance: 0.9,\n            subVolumePaddingPercentage: 0.1,\n            islandRemoval: {\n                enabled: false,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseTimer = null;\n        this.allowedToProceed = false;\n    }\n    mouseMoveCallback(evt) {\n        if (this.mode !== ToolModes.Active) {\n            return;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const { world: worldPoint } = currentPoints;\n        element.style.cursor = 'default';\n        if (this.mouseTimer !== null) {\n            window.clearTimeout(this.mouseTimer);\n            this.mouseTimer = null;\n        }\n        this.mouseTimer = window.setTimeout(() => {\n            this.onMouseStable(evt, worldPoint, element);\n        }, this.configuration.mouseStabilityDelay || 500);\n    }\n    async onMouseStable(evt, worldPoint, element) {\n        await super.preMouseDownCallback(evt);\n        const refVolume = cache.getVolume(this.growCutData.segmentation.referencedVolumeId);\n        const seeds = calculateGrowCutSeeds(refVolume, worldPoint, {}) || {\n            positiveSeedIndices: new Set(),\n            negativeSeedIndices: new Set(),\n        };\n        const { positiveSeedIndices, negativeSeedIndices } = seeds;\n        let cursor;\n        if (positiveSeedIndices.size / negativeSeedIndices.size > 20 ||\n            negativeSeedIndices.size < 30) {\n            cursor = 'not-allowed';\n            this.allowedToProceed = false;\n        }\n        else {\n            cursor = 'copy';\n            this.allowedToProceed = true;\n        }\n        const enabledElement = getEnabledElement(element);\n        if (element) {\n            element.style.cursor = cursor;\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== cursor) {\n                    element.style.cursor = cursor;\n                }\n            });\n        }\n        if (this.allowedToProceed) {\n            this.seeds = seeds;\n        }\n        if (enabledElement && enabledElement.viewport) {\n            enabledElement.viewport.render();\n        }\n    }\n    async preMouseDownCallback(evt) {\n        if (!this.allowedToProceed) {\n            return false;\n        }\n        const eventData = evt.detail;\n        const { currentPoints, element } = eventData;\n        const enabledElement = getEnabledElement(element);\n        if (enabledElement) {\n            element.style.cursor = 'wait';\n            requestAnimationFrame(() => {\n                if (element.style.cursor !== 'wait') {\n                    element.style.cursor = 'wait';\n                }\n            });\n        }\n        const { world: worldPoint } = currentPoints;\n        await super.preMouseDownCallback(evt);\n        this.growCutData = csUtils.deepMerge(this.growCutData, {\n            worldPoint,\n            islandRemoval: {\n                worldIslandPoints: [worldPoint],\n            },\n        });\n        this.growCutData.worldPoint = worldPoint;\n        this.growCutData.islandRemoval = {\n            worldIslandPoints: [worldPoint],\n        };\n        await this.runGrowCut();\n        if (element) {\n            element.style.cursor = 'default';\n        }\n        return true;\n    }\n    getRemoveIslandData(growCutData) {\n        const { worldPoint } = growCutData;\n        return {\n            worldIslandPoints: [worldPoint],\n        };\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { referencedVolumeId }, worldPoint, options, } = growCutData;\n        const { subVolumePaddingPercentage } = this.configuration;\n        const mergedOptions = {\n            ...options,\n            subVolumePaddingPercentage,\n            seeds: this.seeds,\n        };\n        return growCut.runOneClickGrowCut({\n            referencedVolumeId,\n            worldPosition: worldPoint,\n            options: mergedOptions,\n        });\n    }\n}\nexport default RegionSegmentPlusTool;\n","import { vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, cache, getRenderingEngine, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { drawPolyline as drawPolylineSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport { Events } from '../../enums';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { growCut } from '../../utilities/segmentation';\nimport GrowCutBaseTool from '../base/GrowCutBaseTool';\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nconst ISLAND_PIXEL_RANGE = [1000, 1900];\nconst { transformWorldToIndex, transformIndexToWorld } = csUtils;\nclass WholeBodySegmentTool extends GrowCutBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            isPartialVolume: true,\n            positivePixelRange: POSITIVE_PIXEL_RANGE,\n            negativePixelRange: NEGATIVE_PIXEL_RANGE,\n            islandRemoval: {\n                enabled: true,\n                islandPixelRange: ISLAND_PIXEL_RANGE,\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const { world: currentWorldPoint } = currentPoints;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const linePoints = this._getHorizontalLineWorldPoints(enabledElement, currentWorldPoint);\n            this.growCutData.horizontalLines[1] = linePoints;\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._endCallback = async (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            await this.runGrowCut();\n            this._deactivateDraw(element);\n            this.growCutData = null;\n            resetElementCursor(element);\n            triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    async preMouseDownCallback(evt) {\n        const eventData = evt.detail;\n        const { element, currentPoints } = eventData;\n        const { world: worldPoint } = currentPoints;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        const linePoints = this._getHorizontalLineWorldPoints(enabledElement, worldPoint);\n        await super.preMouseDownCallback(evt);\n        this.growCutData.horizontalLines = [linePoints, linePoints];\n        this._activateDraw(element);\n        hideElementCursor(element);\n        triggerAnnotationRenderForViewportUIDs([viewport.id]);\n        return true;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this.growCutData) {\n            return;\n        }\n        const { segmentation: segmentationData, horizontalLines } = this.growCutData;\n        if (horizontalLines.length !== 2) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { segmentationId, segmentIndex } = segmentationData;\n        const [line1, line2] = horizontalLines;\n        const [worldLine1P1, worldLine1P2] = line1;\n        const [worldLine2P1, worldLine2P2] = line2;\n        const canvasPoints = [\n            worldLine1P1,\n            worldLine1P2,\n            worldLine2P2,\n            worldLine2P1,\n        ].map((worldPoint) => viewport.worldToCanvas(worldPoint));\n        const annotationUID = 'growCutRect';\n        const squareGroupUID = '0';\n        const { color, fillColor, lineWidth, fillOpacity, lineDash } = this.getSegmentStyle({\n            segmentationId,\n            segmentIndex,\n            viewportId: viewport.id,\n        });\n        drawPolylineSvg(svgDrawingHelper, annotationUID, squareGroupUID, canvasPoints, {\n            color,\n            fillColor,\n            fillOpacity,\n            lineWidth,\n            lineDash,\n            closePath: true,\n        });\n    }\n    async getGrowCutLabelmap(growCutData) {\n        const { segmentation: { segmentIndex, referencedVolumeId }, renderingEngineId, viewportId, horizontalLines, } = growCutData;\n        const renderingEngine = getRenderingEngine(renderingEngineId);\n        const viewport = renderingEngine.getViewport(viewportId);\n        const [line1, line2] = horizontalLines;\n        const worldSquarePoints = [line1[0], line1[1], line2[1], line2[0]];\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const { topLeft: worldTopLeft, bottomRight: worldBottomRight } = this._getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints);\n        const ijkTopLeft = transformWorldToIndex(referencedVolume.imageData, worldTopLeft);\n        const ijkBottomRight = transformWorldToIndex(referencedVolume.imageData, worldBottomRight);\n        const boundingBoxInfo = {\n            boundingBox: {\n                ijkTopLeft,\n                ijkBottomRight,\n            },\n        };\n        const config = this.configuration;\n        const options = {\n            positiveSeedValue: segmentIndex,\n            negativeSeedValue: 255,\n            negativePixelRange: config.negativePixelRange,\n            positivePixelRange: config.positivePixelRange,\n        };\n        return growCut.runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options);\n    }\n    getRemoveIslandData() {\n        const { segmentation: { segmentIndex, referencedVolumeId, labelmapVolumeId }, } = this.growCutData;\n        const referencedVolume = cache.getVolume(referencedVolumeId);\n        const labelmapVolume = cache.getVolume(labelmapVolumeId);\n        const referencedVolumeData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n        const labelmapData = labelmapVolume.voxelManager.getCompleteScalarDataArray();\n        const { islandPixelRange } = this.configuration.islandRemoval;\n        const islandPointIndexes = [];\n        for (let i = 0, len = labelmapData.length; i < len; i++) {\n            if (labelmapData[i] !== segmentIndex) {\n                continue;\n            }\n            const pixelValue = referencedVolumeData[i];\n            if (pixelValue >= islandPixelRange[0] &&\n                pixelValue <= islandPixelRange[1]) {\n                islandPointIndexes.push(i);\n            }\n        }\n        return {\n            islandPointIndexes,\n        };\n    }\n    _activateDraw(element) {\n        element.addEventListener(Events.MOUSE_UP, this._endCallback);\n        element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n        element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n    }\n    _projectWorldPointAcrossSlices(viewport, worldEdgePoint, vecDirection) {\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldEdgePoint);\n        const axis = vecDirection.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        if (axis === -1) {\n            throw new Error('Non-orthogonal direction vector');\n        }\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldEdgePoint) {\n        const { viewPlaneNormal } = viewport.getCamera();\n        return this._projectWorldPointAcrossSlices(viewport, worldEdgePoint, viewPlaneNormal);\n    }\n    _getWorldCuboidCornerPoints(viewport, worldSquarePoints) {\n        const cuboidPoints = [];\n        const volume = this._getViewportVolume(viewport);\n        worldSquarePoints.forEach((worldSquarePoint) => {\n            const ijkEdgePoints = this._getCuboidIJKEdgePointsFromProjectedWorldPoint(viewport, worldSquarePoint);\n            const worldEdgePoints = ijkEdgePoints.map((ijkPoint) => transformIndexToWorld(volume.imageData, ijkPoint));\n            cuboidPoints.push(...worldEdgePoints);\n        });\n        return cuboidPoints;\n    }\n    _getWorldBoundingBoxFromProjectedSquare(viewport, worldSquarePoints) {\n        const worldCuboidPoints = this._getWorldCuboidCornerPoints(viewport, worldSquarePoints);\n        const topLeft = [...worldCuboidPoints[0]];\n        const bottomRight = [...worldCuboidPoints[0]];\n        worldCuboidPoints.forEach((worldPoint) => {\n            vec3.min(topLeft, topLeft, worldPoint);\n            vec3.max(bottomRight, bottomRight, worldPoint);\n        });\n        return { topLeft, bottomRight };\n    }\n    _getViewportVolume(viewport) {\n        if (!(viewport instanceof BaseVolumeViewport)) {\n            throw new Error('Viewport is not a BaseVolumeViewport');\n        }\n        const volumeId = viewport.getAllVolumeIds()[0];\n        return cache.getVolume(volumeId);\n    }\n    _getHorizontalLineIJKPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const { dimensions } = volume;\n        const ijkPoint = transformWorldToIndex(volume.imageData, worldPoint);\n        const { viewUp, viewPlaneNormal } = viewport.getCamera();\n        const vecRow = vec3.cross(vec3.create(), viewUp, viewPlaneNormal);\n        const axis = vecRow.findIndex((n) => csUtils.isEqual(Math.abs(n), 1));\n        const ijkLineP1 = [...ijkPoint];\n        const ijkLineP2 = [...ijkPoint];\n        ijkLineP1[axis] = 0;\n        ijkLineP2[axis] = dimensions[axis] - 1;\n        return [ijkLineP1, ijkLineP2];\n    }\n    _getHorizontalLineWorldPoints(enabledElement, worldPoint) {\n        const { viewport } = enabledElement;\n        const volume = this._getViewportVolume(viewport);\n        const [ijkPoint1, ijkPoint2] = this._getHorizontalLineIJKPoints(enabledElement, worldPoint);\n        const worldPoint1 = transformIndexToWorld(volume.imageData, ijkPoint1);\n        const worldPoint2 = transformIndexToWorld(volume.imageData, ijkPoint2);\n        return [worldPoint1, worldPoint2];\n    }\n}\nWholeBodySegmentTool.toolName = 'WholeBodySegment';\nexport default WholeBodySegmentTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass RectangleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideRectangle,\n                ERASE_INSIDE: eraseInsideRectangle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData[SegmentationRepresentations.Labelmap];\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                },\n            };\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n            const { data } = annotation;\n            const { currentPoints } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n            const worldPos = currentPoints.world;\n            const { points } = data.handles;\n            points[handleIndex] = [...worldPos];\n            let bottomLeftCanvas;\n            let bottomRightCanvas;\n            let topLeftCanvas;\n            let topRightCanvas;\n            let bottomLeftWorld;\n            let bottomRightWorld;\n            let topLeftWorld;\n            let topRightWorld;\n            switch (handleIndex) {\n                case 0:\n                case 3:\n                    bottomLeftCanvas = worldToCanvas(points[0]);\n                    topRightCanvas = worldToCanvas(points[3]);\n                    bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                    topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                    bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                    topLeftWorld = canvasToWorld(topLeftCanvas);\n                    points[1] = bottomRightWorld;\n                    points[2] = topLeftWorld;\n                    break;\n                case 1:\n                case 2:\n                    bottomRightCanvas = worldToCanvas(points[1]);\n                    topLeftCanvas = worldToCanvas(points[2]);\n                    bottomLeftCanvas = [\n                        topLeftCanvas[0],\n                        bottomRightCanvas[1],\n                    ];\n                    topRightCanvas = [bottomRightCanvas[0], topLeftCanvas[1]];\n                    bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                    topRightWorld = canvasToWorld(topRightCanvas);\n                    points[0] = bottomLeftWorld;\n                    points[3] = topRightWorld;\n                    break;\n            }\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const rectangleUID = '0';\n            drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { BaseVolumeViewport, cache, getEnabledElement, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, config as segmentationConfig, } from '../../stateManagement/segmentation';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass CircleScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideCircle,\n                ERASE_INSIDE: eraseInsideCircle,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeLabelmapSegmentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeLabelmapSegmentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeLabelmapSegmentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            const { representationData } = getSegmentation(segmentationId);\n            const labelmapData = representationData.Labelmap;\n            if (!labelmapData) {\n                throw new Error('No labelmap data found for the active segmentation, create one before using scissors tool');\n            }\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    isDrawing: true,\n                    cachedStats: {},\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = labelmapData;\n                const segmentation = cache.getVolume(volumeId);\n                this.editData = {\n                    ...this.editData,\n                    volumeId,\n                    referencedVolumeId: segmentation.referencedVolumeId,\n                };\n            }\n            else {\n                const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                this.editData = {\n                    ...this.editData,\n                    imageId: segmentationImageId,\n                };\n            }\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { Events, SegmentationRepresentations } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, activeSegmentation, } from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nclass SphereScissorsTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE: fillInsideSphere,\n                ERASE_INSIDE: eraseInsideSphere,\n            },\n            defaultStrategy: 'FILL_INSIDE',\n            activeStrategy: 'FILL_INSIDE',\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            if (this.isDrawing === true) {\n                return;\n            }\n            this.doneEditMemo();\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const canvasPos = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const segmentColor = segmentationConfig.color.getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n            this.isDrawing = true;\n            const annotation = {\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                    referencedImageId: '',\n                    toolName: this.getToolName(),\n                    segmentColor,\n                },\n                data: {\n                    invalidated: true,\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                    highlighted: true,\n                },\n            };\n            const viewportIdsToRender = [viewport.id];\n            this.editData = {\n                annotation,\n                centerCanvas: canvasPos,\n                segmentIndex,\n                segmentationId,\n                segmentsLocked,\n                segmentColor,\n                toolGroupId: this.toolGroupId,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n                volumeId: null,\n                referencedVolumeId: null,\n                imageId: null,\n            };\n            const { representationData } = getSegmentation(segmentationId);\n            const editData = this.getEditData({\n                viewport,\n                representationData,\n                segmentsLocked,\n                segmentationId,\n            });\n            this.editData = {\n                ...this.editData,\n                ...editData,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return true;\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { currentPoints } = eventDetail;\n            const currentCanvasPoints = currentPoints.canvas;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine, viewport } = enabledElement;\n            const { canvasToWorld } = viewport;\n            const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n            const { data } = annotation;\n            const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n            const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n            const radius = Math.sqrt(dX * dX + dY * dY);\n            const bottomCanvas = [\n                centerCanvas[0],\n                centerCanvas[1] + radius,\n            ];\n            const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n            const leftCanvas = [\n                centerCanvas[0] - radius,\n                centerCanvas[1],\n            ];\n            const rightCanvas = [\n                centerCanvas[0] + radius,\n                centerCanvas[1],\n            ];\n            data.handles.points = [\n                canvasToWorld(bottomCanvas),\n                canvasToWorld(topCanvas),\n                canvasToWorld(leftCanvas),\n                canvasToWorld(rightCanvas),\n            ];\n            annotation.invalidated = true;\n            this.editData.hasMoved = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, newAnnotation, hasMoved, segmentIndex, segmentsLocked, } = this.editData;\n            const { data } = annotation;\n            const { viewPlaneNormal, viewUp } = annotation.metadata;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const operationData = {\n                ...this.editData,\n                points: data.handles.points,\n                segmentIndex,\n                segmentsLocked,\n                viewPlaneNormal,\n                viewUp,\n                createMemo: this.createMemo.bind(this),\n            };\n            this.editData = null;\n            this.isDrawing = false;\n            this.applyActiveStrategy(enabledElement, operationData);\n            this.doneEditMemo();\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            if (!this.editData) {\n                return renderStatus;\n            }\n            const { viewport } = enabledElement;\n            const { viewportIdsToRender } = this.editData;\n            if (!viewportIdsToRender.includes(viewport.id)) {\n                return renderStatus;\n            }\n            const { annotation } = this.editData;\n            const toolMetadata = annotation.metadata;\n            const annotationUID = annotation.annotationUID;\n            const data = annotation.data;\n            const { points } = data.handles;\n            const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n            const bottom = canvasCoordinates[0];\n            const top = canvasCoordinates[1];\n            const center = [\n                Math.floor((bottom[0] + top[0]) / 2),\n                Math.floor((bottom[1] + top[1]) / 2),\n            ];\n            const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n            const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n            if (!viewport.getRenderingEngine()) {\n                console.warn('Rendering Engine has been destroyed');\n                return renderStatus;\n            }\n            const circleUID = '0';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                color,\n            });\n            renderStatus = true;\n            return renderStatus;\n        };\n    }\n}\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import { StackViewport, cache, getEnabledElement, utilities as csUtils, utilities as coreUtils, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { addAnnotation, removeAnnotation, getAnnotations, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawCircle as drawCircleSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport throttle from '../../utilities/throttle';\nimport debounce from '../../utilities/debounce';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor, resetElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport CircleROITool from '../annotation/CircleROITool';\nimport { getCanvasCircleCorners, getCanvasCircleRadius, } from '../../utilities/math/circle';\nimport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, } from '../../utilities/getCalibratedUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport { filterAnnotationsWithinSamePlane } from '../../utilities/planar';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { transformWorldToIndex } = csUtils;\nclass CircleROIStartEndThresholdTool extends CircleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            numSlicesToPropagate: 10,\n            calculatePointsInsideVolume: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n            showTextBox: false,\n            throttleTimeout: 100,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isHandleOutsideImage = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = csUtils.getVolumeId(targetId);\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const startCoord = this._getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const endCoord = this._getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    volumeId,\n                    spacingInNormal,\n                    enabledElement,\n                },\n                data: {\n                    label: '',\n                    startCoordinate: startCoord,\n                    endCoordinate: endCoord,\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        points: [[...worldPos], [...worldPos]],\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {\n                        pointsInVolume: [],\n                        projectionPoints: [],\n                        statistics: [],\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            annotation.highlighted = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            const targetId = this.getTargetId(enabledElement.viewport);\n            const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n            this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            else {\n                triggerAnnotationModified(annotation, element);\n            }\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            let annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = filterAnnotationsWithinSamePlane(annotations, viewport.getCamera());\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data, metadata } = annotation;\n                const { startCoordinate, endCoordinate } = data;\n                const { points, activeHandleIndex } = data.handles;\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const center = canvasCoordinates[0];\n                const radius = getCanvasCircleRadius(canvasCoordinates);\n                const { centerPointRadius } = this.configuration;\n                const canvasCorners = getCanvasCircleCorners(canvasCoordinates);\n                const focalPoint = viewport.getCamera().focalPoint;\n                const viewplaneNormal = viewport.getCamera().viewPlaneNormal;\n                let tempStartCoordinate = startCoordinate;\n                let tempEndCoordinate = endCoordinate;\n                if (Array.isArray(startCoordinate)) {\n                    tempStartCoordinate = this._getCoordinateForViewplaneNormal(tempStartCoordinate, viewplaneNormal);\n                    data.startCoordinate = tempStartCoordinate;\n                }\n                if (Array.isArray(endCoordinate)) {\n                    tempEndCoordinate = this._getCoordinateForViewplaneNormal(tempEndCoordinate, viewplaneNormal);\n                    data.endCoordinate = tempEndCoordinate;\n                }\n                const roundedStartCoordinate = coreUtils.roundToPrecision(data.startCoordinate);\n                const roundedEndCoordinate = coreUtils.roundToPrecision(data.endCoordinate);\n                const cameraCoordinate = this._getCoordinateForViewplaneNormal(focalPoint, viewplaneNormal);\n                const roundedCameraCoordinate = coreUtils.roundToPrecision(cameraCoordinate);\n                if (roundedCameraCoordinate <\n                    Math.min(roundedStartCoordinate, roundedEndCoordinate) ||\n                    roundedCameraCoordinate >\n                        Math.max(roundedStartCoordinate, roundedEndCoordinate)) {\n                    continue;\n                }\n                const middleCoordinate = coreUtils.roundToPrecision((data.startCoordinate + data.endCoordinate) / 2);\n                let isMiddleSlice = false;\n                if (roundedCameraCoordinate === middleCoordinate) {\n                    isMiddleSlice = true;\n                }\n                data.handles.points[0][this._getIndexOfCoordinatesForViewplaneNormal(viewplaneNormal)] = middleCoordinate;\n                if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    isMiddleSlice) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineWidthToUse = lineWidth;\n                let lineDashToUse = lineDash;\n                if (isMiddleSlice) {\n                    lineWidthToUse = lineWidth;\n                    lineDashToUse = [];\n                }\n                else {\n                    lineDashToUse = [5, 5];\n                }\n                const circleUID = '0';\n                drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth: lineWidthToUse,\n                });\n                if (centerPointRadius > 0) {\n                    if (radius > 3 * centerPointRadius) {\n                        drawCircleSvg(svgDrawingHelper, annotationUID, `${circleUID}-center`, center, centerPointRadius, {\n                            color,\n                            lineDash,\n                            lineWidth,\n                        });\n                    }\n                }\n                renderStatus = true;\n                if (this.configuration.showTextBox) {\n                    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                    if (!options.visibility) {\n                        data.handles.textBox = {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        };\n                        continue;\n                    }\n                    const textLines = this.configuration.getTextLines(data, { metadata });\n                    if (!textLines || textLines.length === 0) {\n                        continue;\n                    }\n                    let canvasTextBoxCoords;\n                    if (!data.handles.textBox.hasMoved) {\n                        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n                        data.handles.textBox.worldPosition =\n                            viewport.canvasToWorld(canvasTextBoxCoords);\n                    }\n                    const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                    const textBoxUID = '1';\n                    const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                    const { x: left, y: top, width, height } = boundingBox;\n                    data.handles.textBox.worldBoundingBox = {\n                        topLeft: viewport.canvasToWorld([left, top]),\n                        topRight: viewport.canvasToWorld([left + width, top]),\n                        bottomLeft: viewport.canvasToWorld([left, top + height]),\n                        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                    };\n                }\n            }\n            return renderStatus;\n        };\n        if (this.configuration.calculatePointsInsideVolume) {\n            this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, this.configuration.throttleTimeout, { trailing: true });\n        }\n        else {\n            this._throttledCalculateCachedStats = debounce(this._calculateCachedStatsTool, this.configuration.throttleTimeout);\n        }\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { imageData } = imageVolume;\n        const { startCoordinate, endCoordinate } = data;\n        const { points } = data.handles;\n        const startIJK = transformWorldToIndex(imageData, points[0]);\n        const endIJK = transformWorldToIndex(imageData, points[0]);\n        const handlesToStart = csUtils.deepClone(points);\n        const startWorld = vec3.create();\n        imageData.indexToWorldVec3(startIJK, startWorld);\n        const endWorld = vec3.create();\n        imageData.indexToWorldVec3(endIJK, endWorld);\n        const projectionAxisIndex = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        if (projectionAxisIndex == 2) {\n            startWorld[2] = startCoordinate;\n            endWorld[2] = endCoordinate;\n            handlesToStart[0][2] = startCoordinate;\n            handlesToStart[1][2] = startCoordinate;\n        }\n        else if (projectionAxisIndex == 0) {\n            startWorld[0] = startCoordinate;\n            endWorld[0] = endCoordinate;\n            handlesToStart[0][0] = startCoordinate;\n            handlesToStart[1][0] = startCoordinate;\n        }\n        else if (projectionAxisIndex == 1) {\n            startWorld[1] = startCoordinate;\n            endWorld[1] = endCoordinate;\n            handlesToStart[0][1] = startCoordinate;\n            handlesToStart[1][1] = startCoordinate;\n        }\n        const direction = vec3.create();\n        vec3.subtract(direction, endWorld, startWorld);\n        const distance = vec3.length(direction);\n        vec3.normalize(direction, direction);\n        const newProjectionPoints = [];\n        const basePoints = points;\n        for (let dist = 0; dist < distance; dist += spacingInNormal) {\n            newProjectionPoints.push(basePoints.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, direction, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n    }\n    _computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, viewUp } = metadata;\n        const { viewport } = enabledElement;\n        const projectionPoints = data.cachedStats.projectionPoints;\n        const pointsInsideVolume = [[]];\n        const image = this.getTargetImageData(targetId);\n        const canvasCoordinates = data.handles.points.map((p) => viewport.worldToCanvas(p));\n        const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners(canvasCoordinates));\n        const pos1 = viewport.canvasToWorld(topLeftCanvas);\n        const pos2 = viewport.canvasToWorld(bottomRightCanvas);\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, pos1, pos2);\n        const measureInfo = getCalibratedLengthUnitsAndScale(image, data.handles);\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(Math.PI *\n            (worldWidth / measureInfo.scale / 2) *\n            (worldHeight / aspect / measureInfo.scale / 2));\n        const modalityUnitOptions = {\n            isPreScaled: isViewportPreScaled(viewport, targetId),\n            isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n        };\n        const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n        for (let i = 0; i < projectionPoints.length; i++) {\n            if (!imageVolume) {\n                continue;\n            }\n            const centerWorld = projectionPoints[i][0];\n            const canvasCoordinates = projectionPoints[i].map((p) => viewport.worldToCanvas(p));\n            const [topLeftCanvas, bottomRightCanvas] = (getCanvasCircleCorners(canvasCoordinates));\n            const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n            const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n            const worldPos1 = topLeftWorld;\n            const worldPos2 = bottomRightWorld;\n            const { dimensions, imageData, voxelManager } = imageVolume;\n            const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n            const worldProjectionPointIndex = transformWorldToIndex(imageData, centerWorld);\n            const indexOfProjection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n            worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n            worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n            worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n            worldPos1Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n            worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n            worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n            worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n            worldPos2Index[indexOfProjection] =\n                worldProjectionPointIndex[indexOfProjection];\n            if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                const boundsIJK = [\n                    [iMin, iMax],\n                    [jMin, jMax],\n                    [kMin, kMax],\n                ];\n                const center = centerWorld;\n                const ellipseObj = {\n                    center,\n                    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n                    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n                    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n                };\n                const pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                    isInObject: (pointLPS) => pointInEllipse(ellipseObj, pointLPS),\n                    boundsIJK,\n                    imageData,\n                    returnPoints: this.configuration.storePointData,\n                });\n                pointsInsideVolume.push(pointsInShape);\n            }\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        data.cachedStats.pointsInVolume = pointsInsideVolume;\n        data.cachedStats.statistics = {\n            Modality: metadata.Modality,\n            area,\n            mean: stats.mean?.value,\n            stdDev: stats.stdDev?.value,\n            max: stats.max?.value,\n            statsArray: stats.array,\n            areaUnit: measureInfo.areaUnit,\n            modalityUnit,\n        };\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewport } = enabledElement;\n        const { cachedStats } = data;\n        const targetId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(targetId.split(/volumeId:|\\?/)[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        this._computePointsInsideVolume(annotation, imageVolume, targetId, enabledElement);\n        annotation.invalidated = false;\n        triggerAnnotationModified(annotation, viewport.element);\n        return cachedStats;\n    }\n    _getStartCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateFromStart = Math.round(numSlicesToPropagate / 2);\n        const startPos = vec3.create();\n        vec3.scaleAndAdd(startPos, worldPos, viewPlaneNormal, numSlicesToPropagateFromStart * -spacingInNormal);\n        const startCoord = this._getCoordinateForViewplaneNormal(startPos, viewPlaneNormal);\n        return startCoord;\n    }\n    _getEndCoordinate(worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const numSlicesToPropagateToEnd = numSlicesToPropagate - Math.round(numSlicesToPropagate / 2);\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagateToEnd * spacingInNormal);\n        const endCoord = this._getCoordinateForViewplaneNormal(endPos, viewPlaneNormal);\n        return endCoord;\n    }\n    _getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal) {\n        const viewplaneNormalAbs = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const indexOfDirection = viewplaneNormalAbs.indexOf(Math.max(...viewplaneNormalAbs));\n        return indexOfDirection;\n    }\n    _getCoordinateForViewplaneNormal(pos, viewPlaneNormal) {\n        const indexOfDirection = this._getIndexOfCoordinatesForViewplaneNormal(viewPlaneNormal);\n        return pos[indexOfDirection];\n    }\n}\nfunction defaultGetTextLines(data, _context = {}) {\n    const cachedVolumeStats = data.cachedStats.statistics;\n    const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n    if (mean === undefined) {\n        return;\n    }\n    const textLines = [];\n    textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    return textLines;\n}\nCircleROIStartEndThresholdTool.toolName = 'CircleROIStartEndThreshold';\nexport default CircleROIStartEndThresholdTool;\n","import { cache, getEnabledElement, utilities as csUtils, BaseVolumeViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { segmentLocking, activeSegmentation, segmentIndex as segmentIndexController, } from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getCurrentLabelmapImageIdForViewport, getSegmentation, } from '../../stateManagement/segmentation/segmentationState';\nconst { transformWorldToIndex, isEqual } = csUtils;\nclass PaintFillTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n    }) {\n        super(toolProps, defaultToolProps);\n        this.preMouseDownCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal } = camera;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentation(viewport.id);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using scissors tool');\n            }\n            const { segmentationId } = activeSegmentationRepresentation;\n            const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n            const segmentsLocked = segmentLocking.getLockedSegmentIndices(segmentationId);\n            const { representationData } = getSegmentation(segmentationId);\n            let dimensions;\n            let direction;\n            let index;\n            let voxelManager;\n            this.doneEditMemo();\n            if (viewport instanceof BaseVolumeViewport) {\n                const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n                const segmentation = cache.getVolume(volumeId);\n                ({ dimensions, direction } = segmentation);\n                voxelManager = segmentation.voxelManager;\n                index = transformWorldToIndex(segmentation.imageData, worldPos);\n            }\n            else {\n                const currentSegmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n                if (!currentSegmentationImageId) {\n                    throw new Error('No active segmentation imageId detected, create one before using scissors tool');\n                }\n                const { imageData } = viewport.getImageData();\n                dimensions = imageData.getDimensions();\n                direction = imageData.getDirection();\n                const image = cache.getImage(currentSegmentationImageId);\n                voxelManager = image.voxelManager;\n                index = transformWorldToIndex(imageData, worldPos);\n            }\n            const fixedDimension = this.getFixedDimension(viewPlaneNormal, direction);\n            if (fixedDimension === undefined) {\n                console.warn('Oblique paint fill not yet supported');\n                return;\n            }\n            const { floodFillGetter, getLabelValue, getScalarDataPositionFromPlane, inPlaneSeedPoint, fixedDimensionValue, } = this.generateHelpers(voxelManager, dimensions, index, fixedDimension);\n            if (index[0] < 0 ||\n                index[0] >= dimensions[0] ||\n                index[1] < 0 ||\n                index[1] >= dimensions[1] ||\n                index[2] < 0 ||\n                index[2] >= dimensions[2]) {\n                return;\n            }\n            const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n            if (segmentsLocked.includes(clickedLabelValue)) {\n                return;\n            }\n            const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n            const { flooded } = floodFillResult;\n            flooded.forEach((index) => {\n                const scalarDataIndex = getScalarDataPositionFromPlane(index[0], index[1]);\n                voxelManager.setAtIndex(scalarDataIndex, segmentIndex);\n            });\n            const framesModified = this.getFramesModified(fixedDimension, fixedDimensionValue, floodFillResult);\n            triggerSegmentationDataModified(segmentationId, framesModified);\n            return true;\n        };\n        this.getFramesModified = (fixedDimension, fixedDimensionValue, floodFillResult) => {\n            const { flooded: boundaries } = floodFillResult;\n            if (fixedDimension === 2) {\n                return [fixedDimensionValue];\n            }\n            let minJ = Infinity;\n            let maxJ = -Infinity;\n            for (let b = 0; b < boundaries.length; b++) {\n                const j = boundaries[b][1];\n                if (j < minJ) {\n                    minJ = j;\n                }\n                if (j > maxJ) {\n                    maxJ = j;\n                }\n            }\n            const framesModified = [];\n            for (let frame = minJ; frame <= maxJ; frame++) {\n                framesModified.push(frame);\n            }\n            return framesModified;\n        };\n        this.generateHelpers = (voxelManager, dimensions, seedIndex3D, fixedDimension = 2) => {\n            let fixedDimensionValue;\n            let inPlaneSeedPoint;\n            switch (fixedDimension) {\n                case 0:\n                    fixedDimensionValue = seedIndex3D[0];\n                    inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]];\n                    break;\n                case 1:\n                    fixedDimensionValue = seedIndex3D[1];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]];\n                    break;\n                case 2:\n                    fixedDimensionValue = seedIndex3D[2];\n                    inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]];\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            const getScalarDataPosition = (x, y, z) => {\n                return voxelManager.toIndex([x, y, z]);\n            };\n            const getLabelValue = (x, y, z) => {\n                return voxelManager.getAtIJK(x, y, z);\n            };\n            const floodFillGetter = this.generateFloodFillGetter(dimensions, fixedDimension, fixedDimensionValue, getLabelValue);\n            const getScalarDataPositionFromPlane = this.generateGetScalarDataPositionFromPlane(getScalarDataPosition, fixedDimension, fixedDimensionValue);\n            return {\n                getScalarDataPositionFromPlane,\n                getLabelValue,\n                floodFillGetter,\n                inPlaneSeedPoint,\n                fixedDimensionValue,\n            };\n        };\n        this.generateFloodFillGetter = (dimensions, fixedDimension, fixedDimensionValue, getLabelValue) => {\n            let floodFillGetter;\n            switch (fixedDimension) {\n                case 0:\n                    floodFillGetter = (y, z) => {\n                        if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    floodFillGetter = (x, z) => {\n                        if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    floodFillGetter = (x, y) => {\n                        if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n                            return;\n                        }\n                        return getLabelValue(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return floodFillGetter;\n        };\n        this.generateGetScalarDataPositionFromPlane = (getScalarDataPosition, fixedDimension, fixedDimensionValue) => {\n            let getScalarDataPositionFromPlane;\n            switch (fixedDimension) {\n                case 0:\n                    getScalarDataPositionFromPlane = (y, z) => {\n                        return getScalarDataPosition(fixedDimensionValue, y, z);\n                    };\n                    break;\n                case 1:\n                    getScalarDataPositionFromPlane = (x, z) => {\n                        return getScalarDataPosition(x, fixedDimensionValue, z);\n                    };\n                    break;\n                case 2:\n                    getScalarDataPositionFromPlane = (x, y) => {\n                        return getScalarDataPosition(x, y, fixedDimensionValue);\n                    };\n                    break;\n                default:\n                    throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n            }\n            return getScalarDataPositionFromPlane;\n        };\n    }\n    getFixedDimension(viewPlaneNormal, direction) {\n        const xDirection = direction.slice(0, 3);\n        const yDirection = direction.slice(3, 6);\n        const zDirection = direction.slice(6, 9);\n        const absoluteOfViewPlaneNormal = [\n            Math.abs(viewPlaneNormal[0]),\n            Math.abs(viewPlaneNormal[1]),\n            Math.abs(viewPlaneNormal[2]),\n        ];\n        const absoluteOfXDirection = [\n            Math.abs(xDirection[0]),\n            Math.abs(xDirection[1]),\n            Math.abs(xDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n            return 0;\n        }\n        const absoluteOfYDirection = [\n            Math.abs(yDirection[0]),\n            Math.abs(yDirection[1]),\n            Math.abs(yDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n            return 1;\n        }\n        const absoluteOfZDirection = [\n            Math.abs(zDirection[0]),\n            Math.abs(zDirection[1]),\n            Math.abs(zDirection[2]),\n        ];\n        if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n            return 2;\n        }\n    }\n}\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';\nimport vtkAnnotatedCubeActor from '@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor';\nimport vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport { BaseTool } from './base';\nimport { Enums, eventTarget, getEnabledElementByIds, getRenderingEngines, } from '@cornerstonejs/core';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport { Events } from '../enums';\nvar OverlayMarkerType;\n(function (OverlayMarkerType) {\n    OverlayMarkerType[OverlayMarkerType[\"ANNOTATED_CUBE\"] = 1] = \"ANNOTATED_CUBE\";\n    OverlayMarkerType[OverlayMarkerType[\"AXES\"] = 2] = \"AXES\";\n    OverlayMarkerType[OverlayMarkerType[\"CUSTOM\"] = 3] = \"CUSTOM\";\n})(OverlayMarkerType || (OverlayMarkerType = {}));\nclass OrientationMarkerTool extends BaseTool {\n    static { this.CUBE = 1; }\n    static { this.AXIS = 2; }\n    static { this.VTPFILE = 3; }\n    static { this.OVERLAY_MARKER_TYPES = OverlayMarkerType; }\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            orientationWidget: {\n                enabled: true,\n                viewportCorner: vtkOrientationMarkerWidget.Corners.BOTTOM_RIGHT,\n                viewportSize: 0.15,\n                minPixelSize: 100,\n                maxPixelSize: 300,\n            },\n            overlayMarkerType: OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE,\n            overlayConfiguration: {\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE]: {\n                    faceProperties: {\n                        xPlus: { text: 'L', faceColor: '#ffff00', faceRotation: 90 },\n                        xMinus: { text: 'R', faceColor: '#ffff00', faceRotation: 270 },\n                        yPlus: {\n                            text: 'P',\n                            faceColor: '#00ffff',\n                            fontColor: 'white',\n                            faceRotation: 180,\n                        },\n                        yMinus: { text: 'A', faceColor: '#00ffff', fontColor: 'white' },\n                        zPlus: { text: 'S' },\n                        zMinus: { text: 'I' },\n                    },\n                    defaultStyle: {\n                        fontStyle: 'bold',\n                        fontFamily: 'Arial',\n                        fontColor: 'black',\n                        fontSizeScale: (res) => res / 2,\n                        faceColor: '#0000ff',\n                        edgeThickness: 0.1,\n                        edgeColor: 'black',\n                        resolution: 400,\n                    },\n                },\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.AXES]: {},\n                [OrientationMarkerTool.OVERLAY_MARKER_TYPES.CUSTOM]: {\n                    polyDataURL: 'https://raw.githubusercontent.com/Slicer/Slicer/80ad0a04dacf134754459557bf2638c63f3d1d1b/Base/Logic/Resources/OrientationMarkers/Human.vtp',\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this._resizeObservers = new Map();\n        this.onSetToolEnabled = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolActive = () => {\n            this.initViewports();\n            this._subscribeToViewportEvents();\n        };\n        this.onSetToolDisabled = () => {\n            this.cleanUpData();\n            this._unsubscribeToViewportNewVolumeSet();\n        };\n        this._getViewportsInfo = () => {\n            const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n            return viewports;\n        };\n        this.resize = (viewportId) => {\n            const orientationMarker = this.orientationMarkers[viewportId];\n            if (!orientationMarker) {\n                return;\n            }\n            const { orientationWidget } = orientationMarker;\n            orientationWidget.updateViewport();\n        };\n        this.orientationMarkers = {};\n        this.updatingOrientationMarker = {};\n    }\n    _unsubscribeToViewportNewVolumeSet() {\n        const unsubscribe = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                element.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = this._resizeObservers.get(viewportId);\n                resizeObserver.unobserve(element);\n            });\n        };\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            unsubscribe();\n            this.initViewports();\n        });\n    }\n    _subscribeToViewportEvents() {\n        const subscribeToElementResize = () => {\n            const viewportsInfo = this._getViewportsInfo();\n            viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n                const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n                const { element } = viewport;\n                this.initViewports();\n                element.addEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, this.initViewports.bind(this));\n                const resizeObserver = new ResizeObserver(() => {\n                    setTimeout(() => {\n                        const element = getEnabledElementByIds(viewportId, renderingEngineId);\n                        if (!element) {\n                            return;\n                        }\n                        const { viewport } = element;\n                        this.resize(viewportId);\n                        viewport.render();\n                    }, 100);\n                });\n                resizeObserver.observe(element);\n                this._resizeObservers.set(viewportId, resizeObserver);\n            });\n        };\n        subscribeToElementResize();\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, (evt) => {\n            if (evt.detail.toolGroupId !== this.toolGroupId) {\n                return;\n            }\n            subscribeToElementResize();\n            this.initViewports();\n        });\n    }\n    cleanUpData() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        const viewports = renderingEngine.getViewports();\n        viewports.forEach((viewport) => {\n            const orientationMarker = this.orientationMarkers[viewport.id];\n            if (!orientationMarker) {\n                return;\n            }\n            const { actor, orientationWidget } = orientationMarker;\n            orientationWidget?.setEnabled(false);\n            orientationWidget?.delete();\n            actor?.delete();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .offscreenMultiRenderWindow.getRenderWindow();\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            delete this.orientationMarkers[viewport.id];\n        });\n    }\n    initViewports() {\n        const renderingEngines = getRenderingEngines();\n        const renderingEngine = renderingEngines[0];\n        if (!renderingEngine) {\n            return;\n        }\n        let viewports = renderingEngine.getViewports();\n        viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n        viewports.forEach((viewport) => {\n            const widget = viewport.getWidget(this.getToolName());\n            if (!widget || widget.isDeleted()) {\n                this.addAxisActorInViewport(viewport);\n            }\n        });\n    }\n    async addAxisActorInViewport(viewport) {\n        const viewportId = viewport.id;\n        if (!this.updatingOrientationMarker[viewportId]) {\n            this.updatingOrientationMarker[viewportId] = true;\n            const type = this.configuration.overlayMarkerType;\n            const overlayConfiguration = this.configuration.overlayConfiguration[type];\n            if (this.orientationMarkers[viewportId]) {\n                const { actor, orientationWidget } = this.orientationMarkers[viewportId];\n                viewport.getRenderer().removeActor(actor);\n                orientationWidget.setEnabled(false);\n            }\n            let actor;\n            if (type === 1) {\n                actor = this.createAnnotationCube(overlayConfiguration);\n            }\n            else if (type === 2) {\n                actor = vtkAxesActor.newInstance();\n            }\n            else if (type === 3) {\n                actor = await this.createCustomActor();\n            }\n            const renderer = viewport.getRenderer();\n            const renderWindow = viewport\n                .getRenderingEngine()\n                .offscreenMultiRenderWindow.getRenderWindow();\n            const { enabled, viewportCorner, viewportSize, minPixelSize, maxPixelSize, } = this.configuration.orientationWidget;\n            const orientationWidget = vtkOrientationMarkerWidget.newInstance({\n                actor,\n                interactor: renderWindow.getInteractor(),\n                parentRenderer: renderer,\n            });\n            orientationWidget.setEnabled(enabled);\n            orientationWidget.setViewportCorner(viewportCorner);\n            orientationWidget.setViewportSize(viewportSize);\n            orientationWidget.setMinPixelSize(minPixelSize);\n            orientationWidget.setMaxPixelSize(maxPixelSize);\n            orientationWidget.updateMarkerOrientation();\n            this.orientationMarkers[viewportId] = {\n                orientationWidget,\n                actor,\n            };\n            viewport.addWidget(this.getToolName(), orientationWidget);\n            renderWindow.render();\n            viewport.getRenderingEngine().render();\n            this.updatingOrientationMarker[viewportId] = false;\n        }\n    }\n    async createCustomActor() {\n        const url = this.configuration.overlayConfiguration[OverlayMarkerType.CUSTOM]\n            .polyDataURL;\n        const response = await fetch(url);\n        const arrayBuffer = await response.arrayBuffer();\n        const vtpReader = vtkXMLPolyDataReader.newInstance();\n        vtpReader.parseAsArrayBuffer(arrayBuffer);\n        vtpReader.update();\n        const polyData = vtkPolyData.newInstance();\n        polyData.shallowCopy(vtpReader.getOutputData());\n        polyData.getPointData().setActiveScalars('Color');\n        const mapper = vtkMapper.newInstance();\n        mapper.setInputData(polyData);\n        mapper.setColorModeToDirectScalars();\n        const actor = vtkActor.newInstance();\n        actor.setMapper(mapper);\n        actor.rotateZ(180);\n        return actor;\n    }\n    createAnnotationCube(overlayConfiguration) {\n        const actor = vtkAnnotatedCubeActor.newInstance();\n        actor.setDefaultStyle({ ...overlayConfiguration.defaultStyle });\n        actor.setXPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.xPlus,\n        });\n        actor.setXMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.xMinus,\n        });\n        actor.setYPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.yPlus,\n        });\n        actor.setYMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.yMinus,\n        });\n        actor.setZPlusFaceProperty({\n            ...overlayConfiguration.faceProperties.zPlus,\n        });\n        actor.setZMinusFaceProperty({\n            ...overlayConfiguration.faceProperties.zMinus,\n        });\n        return actor;\n    }\n    async createAnnotatedCubeActor() {\n        const axes = vtkAnnotatedCubeActor.newInstance();\n        const { faceProperties, defaultStyle } = this.configuration.annotatedCube;\n        axes.setDefaultStyle(defaultStyle);\n        Object.keys(faceProperties).forEach((key) => {\n            const methodName = `set${key.charAt(0).toUpperCase() + key.slice(1)}FaceProperty`;\n            axes[methodName](faceProperties[key]);\n        });\n        return axes;\n    }\n}\nOrientationMarkerTool.toolName = 'OrientationMarker';\nexport default OrientationMarkerTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { setActiveSegmentIndex } from '../../stateManagement/segmentation/segmentIndex';\nimport { getHoveredContourSegmentationAnnotation, getSegmentIndexAtLabelmapBorder, getSegmentIndexAtWorldPoint, } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { ToolModes } from '../../enums';\nclass SegmentSelectTool extends BaseTool {\n    static { this.SelectMode = {\n        Inside: 'Inside',\n        Border: 'Border',\n    }; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            mode: SegmentSelectTool.SelectMode.Border,\n            searchRadius: 6,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode !== ToolModes.Active) {\n                return;\n            }\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setActiveSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.hoverTimer = null;\n    }\n    _setActiveSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setActiveSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setActiveSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId, representationData } = activeSegmentation;\n        let hoveredSegmentIndex;\n        if (this.configuration.mode === SegmentSelectTool.SelectMode.Inside) {\n            hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n                viewport,\n            });\n        }\n        else {\n            if (representationData.Labelmap) {\n                hoveredSegmentIndex = getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, {\n                    viewport,\n                    searchRadius: this.configuration.searchRadius,\n                });\n            }\n            else if (representationData.Contour) {\n                hoveredSegmentIndex =\n                    getHoveredContourSegmentationAnnotation(segmentationId);\n            }\n            else if (representationData.Surface) {\n            }\n        }\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        setActiveSegmentIndex(segmentationId, hoveredSegmentIndex);\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n}\nSegmentSelectTool.toolName = 'SegmentSelectTool';\nexport default SegmentSelectTool;\n","import { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { addAnnotation, getAllAnnotations, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport BidirectionalTool from '../annotation/BidirectionalTool';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nclass SegmentBidirectionalTool extends BidirectionalTool {\n    static { this.toolName = 'SegmentBidirectional'; }\n    constructor(toolProps = {}) {\n        super(toolProps);\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const viewportId = viewport.id;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { segmentIndex, segmentationId } = annotation.metadata;\n                const { lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const colorArray = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n                const color = `rgb(${colorArray.slice(0, 3).join(',')})`;\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineWidth,\n                    lineDash,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                options.color = color;\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const existingAnnotations = getAllAnnotations();\n        const toolAnnotations = existingAnnotations.filter((annotation) => annotation.metadata.toolName === 'SegmentBidirectional');\n        const existingAnnotation = toolAnnotations.find((annotation) => {\n            const { metadata } = annotation;\n            if (metadata.segmentIndex === options?.segmentIndex &&\n                metadata.segmentationId === options?.segmentationId) {\n                return true;\n            }\n            return false;\n        });\n        if (existingAnnotation) {\n            removeAnnotation(existingAnnotation.annotationUID);\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, } = this.hydrateBase(SegmentBidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                segmentIndex: options?.segmentIndex,\n                segmentationId: options?.segmentationId,\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n}\nexport default SegmentBidirectionalTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { triggerSegmentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/activeSegmentation';\nimport { getSegmentIndexAtWorldPoint } from '../../utilities/segmentation';\nimport { state } from '../../store/state';\nimport { drawLinkedTextBox as drawLinkedTextBoxSvg } from '../../drawingSvg';\nclass SegmentLabelTool extends BaseTool {\n    constructor(toolProps = {\n        data: {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        },\n    }, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            hoverTimeout: 100,\n            searchRadius: 6,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.mouseMoveCallback = (evt) => {\n            if (this.hoverTimer) {\n                clearTimeout(this.hoverTimer);\n            }\n            this.hoverTimer = setTimeout(() => {\n                this._setHoveredSegment(evt);\n                this.hoverTimer = null;\n            }, this.configuration.hoverTimeout);\n            return true;\n        };\n        this.onSetToolEnabled = () => {\n            this.onSetToolActive();\n        };\n        this.onSetToolActive = () => {\n            this.hoverTimer = null;\n        };\n        this.onSetToolDisabled = () => {\n            this.hoverTimer = null;\n        };\n        this.data = toolProps.data ?? {\n            handles: {\n                textBox: {\n                    worldPosition: [0, 0, 0],\n                    worldBoundingBox: {\n                        topLeft: [0, 0, 0],\n                        topRight: [0, 0, 0],\n                        bottomLeft: [0, 0, 0],\n                        bottomRight: [0, 0, 0],\n                    },\n                },\n            },\n        };\n        this.hoverTimer = null;\n    }\n    _setHoveredSegment(evt = {}) {\n        if (state.isInteractingWithTool) {\n            return;\n        }\n        const { element, currentPoints } = evt.detail;\n        const worldPoint = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            return;\n        }\n        this._setHoveredSegmentForType(activeSegmentation, worldPoint, viewport);\n    }\n    _setHoveredSegmentForType(activeSegmentation, worldPoint, viewport) {\n        const imageDataInfo = viewport.getImageData();\n        if (!imageDataInfo) {\n            return;\n        }\n        const { segmentationId } = activeSegmentation;\n        const hoveredSegmentIndex = getSegmentIndexAtWorldPoint(segmentationId, worldPoint, {\n            viewport,\n        });\n        const segment = activeSegmentation.segments[hoveredSegmentIndex];\n        const label = segment?.label;\n        const canvasCoordinates = viewport.worldToCanvas(worldPoint);\n        this._editData = {\n            hoveredSegmentIndex,\n            hoveredSegmentLabel: label,\n            canvasCoordinates,\n            worldPoint,\n        };\n        if (!hoveredSegmentIndex || hoveredSegmentIndex === 0) {\n            return;\n        }\n        const renderingEngine = viewport.getRenderingEngine();\n        const viewportIds = renderingEngine.getViewports().map((v) => v.id);\n        triggerSegmentationModified(segmentationId);\n        triggerAnnotationRenderForViewportIds(viewportIds);\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._editData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const { hoveredSegmentIndex, hoveredSegmentLabel, canvasCoordinates, worldPoint, } = this._editData;\n        if (!hoveredSegmentIndex) {\n            return;\n        }\n        const textBoxPosition = viewport.worldToCanvas(worldPoint);\n        const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, 'segmentSelectLabelAnnotation', 'segmentSelectLabelTextBox', [hoveredSegmentLabel ? hoveredSegmentLabel : '(unnamed segment)'], textBoxPosition, [canvasCoordinates], {}, {});\n        const left = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const { width, height } = boundingBox;\n        this.data.handles.textBox.worldBoundingBox = {\n            topLeft: viewport.canvasToWorld([left, top]),\n            topRight: viewport.canvasToWorld([left + width, top]),\n            bottomLeft: viewport.canvasToWorld([left, top + height]),\n            bottomRight: viewport.canvasToWorld([left + width, top + height]),\n        };\n    }\n}\nSegmentLabelTool.toolName = 'SegmentLabelTool';\nexport default SegmentLabelTool;\n","import { Events, SegmentationRepresentations } from '../../enums';\nimport { eventTarget, utilities, getRenderingEngine, } from '@cornerstonejs/core';\nimport PlanarFreehandContourSegmentationTool from '../annotation/PlanarFreehandContourSegmentationTool';\nimport BrushTool from './BrushTool';\nimport * as segmentation from '../../stateManagement/segmentation';\nimport { getSegmentationRepresentationsBySegmentationId } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nclass LabelMapEditWithContourTool extends PlanarFreehandContourSegmentationTool {\n    static { this.toolName = 'LabelMapEditWithContour'; }\n    static { this.annotationsToViewportMap = new Map(); }\n    static { this.viewportIdsChecked = []; }\n    constructor(toolProps = {}) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n                allowOpenContours: false,\n            },\n        }, toolProps);\n        super(initialProps);\n        this.onViewportAddedToToolGroupBinded =\n            this.onViewportAddedToToolGroup.bind(this);\n        this.onSegmentationModifiedBinded = this.onSegmentationModified.bind(this);\n    }\n    initializeListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.addEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.addEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.addEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroupBinded);\n        eventTarget.addEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModifiedBinded);\n    }\n    cleanUpListeners() {\n        LabelMapEditWithContourTool.annotationsToViewportMap.clear();\n        LabelMapEditWithContourTool.viewportIdsChecked = [];\n        eventTarget.removeEventListener(Events.ANNOTATION_MODIFIED, this.annotationModified);\n        eventTarget.removeEventListener(Events.ANNOTATION_COMPLETED, this.annotationCompleted);\n        eventTarget.removeEventListener(Events.TOOLGROUP_VIEWPORT_ADDED, this.onViewportAddedToToolGroup.bind(this));\n        eventTarget.removeEventListener(Events.SEGMENTATION_MODIFIED, this.onSegmentationModified.bind(this));\n    }\n    async checkContourSegmentation(viewportId) {\n        if (LabelMapEditWithContourTool.viewportIdsChecked.includes(viewportId)) {\n            return;\n        }\n        const activeSeg = segmentation.getActiveSegmentation(viewportId);\n        if (!activeSeg) {\n            console.log('No active segmentation detected');\n            return false;\n        }\n        const segmentationId = activeSeg.segmentationId;\n        if (!activeSeg.representationData.Contour) {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n            await segmentation.addContourRepresentationToViewport(viewportId, [\n                {\n                    segmentationId,\n                    type: SegmentationRepresentations.Contour,\n                },\n            ]);\n            segmentation.addRepresentationData({\n                segmentationId,\n                type: SegmentationRepresentations.Contour,\n                data: {},\n            });\n        }\n        else {\n            LabelMapEditWithContourTool.viewportIdsChecked.push(viewportId);\n        }\n        return true;\n    }\n    onViewportAddedToToolGroup(evt) {\n        const { toolGroupId, viewportId } = evt.detail;\n        if (toolGroupId !== this.toolGroupId) {\n            return;\n        }\n        this.checkContourSegmentation(viewportId);\n    }\n    onSegmentationModified(evt) {\n        const { segmentationId } = evt.detail || {};\n        if (!segmentationId) {\n            return;\n        }\n        const representations = getSegmentationRepresentationsBySegmentationId(segmentationId);\n        if (!representations) {\n            return;\n        }\n        representations.forEach(async ({ viewportId }) => await this.checkContourSegmentation(viewportId));\n    }\n    onSetToolEnabled() {\n        this.initializeListeners();\n    }\n    onSetToolActive() {\n        this.initializeListeners();\n    }\n    onSetToolDisabled() {\n        this.cleanUpListeners();\n    }\n    annotationModified(evt) {\n        const { annotation, renderingEngineId, viewportId } = evt.detail;\n        const viewport = getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n        if (!viewport) {\n            return;\n        }\n        LabelMapEditWithContourTool.annotationsToViewportMap.set(annotation.annotationUID, viewport);\n    }\n    annotationCompleted(evt) {\n        const { annotation } = evt.detail;\n        const { polyline } = annotation.data?.contour || {};\n        if (annotation?.metadata?.toolName !== LabelMapEditWithContourTool.toolName) {\n            return;\n        }\n        if (!polyline) {\n            return;\n        }\n        if (LabelMapEditWithContourTool.annotationsToViewportMap.has(annotation.annotationUID)) {\n            const viewport = LabelMapEditWithContourTool.annotationsToViewportMap.get(annotation.annotationUID);\n            if (polyline.length > 3) {\n                BrushTool.viewportContoursToLabelmap(viewport);\n            }\n        }\n    }\n}\nexport default LabelMapEditWithContourTool;\n","import { vec3, vec2 } from 'gl-matrix';\nimport { getEnabledElement, triggerEvent, eventTarget, utilities as csUtils, cache, } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { drawHandles as drawHandlesSvg, drawRedactionRect as drawRedactionRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nclass VideoRedactionTool extends AnnotationTool {\n    static { this.toolName = 'VideoRedaction'; }\n    constructor(toolConfiguration = {}) {\n        super(toolConfiguration, {\n            supportedInteractionTypes: ['Mouse', 'Touch'],\n            configuration: { shadow: true, preventHandleOutsideImage: false },\n        });\n        this.addNewAnnotation = (evt) => {\n            const eventData = evt.detail;\n            const { currentPoints, element } = eventData;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                    },\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            return annotation;\n        };\n        this.getHandleNearImagePoint = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            for (let i = 0; i < points.length; i++) {\n                const point = points[i];\n                const toolDataCanvasCoordinate = viewport.worldToCanvas(point);\n                const near = vec2.distance(canvasCoords, toolDataCanvasCoordinate) < proximity;\n                if (near === true) {\n                    data.handles.activeHandleIndex = i;\n                    return point;\n                }\n            }\n            data.handles.activeHandleIndex = null;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n        };\n        this.toolSelectedCallback = (evt, annotation, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle, interactionType = 'mouse') => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { data } = annotation;\n            data.active = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportUIDsToRender = getViewportIdsWithToolToRender(element, this.getToolName(), false);\n            this.editData = {\n                annotation,\n                viewportUIDsToRender,\n                handleIndex,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.active = false;\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { annotation, viewportUIDsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (handleIndex === undefined) {\n                const { deltaPoints } = eventData;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                data.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventData;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                data.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            const renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID } = annotation;\n                const data = annotation.data;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return;\n                }\n                let activeHandleCanvasCoords;\n                if (!this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRedactionRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color: 'black',\n                    lineDash,\n                    lineWidth,\n                });\n            }\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { viewportUID, renderingEngineUID, sceneUID } = enabledElement;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetUIDs = Object.keys(cachedStats);\n            for (let i = 0; i < targetUIDs.length; i++) {\n                const targetUID = targetUIDs[i];\n                const { imageVolume } = this._getImageVolumeFromTargetUID(targetUID, renderingEngine);\n                const { dimensions, scalarData, vtkImageData: imageData, metadata, } = imageVolume;\n                const worldPos1Index = vec3.fromValues(0, 0, 0);\n                const worldPos2Index = vec3.fromValues(0, 0, 0);\n                imageData.worldToIndexVec3(worldPos1, worldPos1Index);\n                worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n                worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n                worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n                imageData.worldToIndexVec3(worldPos2, worldPos2Index);\n                worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n                worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n                worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n                if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                    const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                    const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                    const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                    const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                    const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const area = worldWidth * worldHeight;\n                    let count = 0;\n                    let mean = 0;\n                    let stdDev = 0;\n                    const yMultiple = dimensions[0];\n                    const zMultiple = dimensions[0] * dimensions[1];\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                count++;\n                                mean += value;\n                            }\n                        }\n                    }\n                    mean /= count;\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                const valueMinusMean = value - mean;\n                                stdDev += valueMinusMean * valueMinusMean;\n                            }\n                        }\n                    }\n                    stdDev /= count;\n                    stdDev = Math.sqrt(stdDev);\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean,\n                        stdDev,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetUID] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                const eventType = Events.ANNOTATION_MODIFIED;\n                const eventDetail = {\n                    annotation,\n                    viewportUID,\n                    renderingEngineUID,\n                    sceneUID: sceneUID,\n                    changeType: ChangeTypes.StatsUpdated,\n                };\n                triggerEvent(eventTarget, eventType, eventDetail);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._getTargetVolumeUID = (scene) => {\n            if (this.configuration.volumeUID) {\n                return this.configuration.volumeUID;\n            }\n            const volumeActors = scene.getVolumeActors();\n            if (!volumeActors && !volumeActors.length) {\n                return;\n            }\n            return volumeActors[0].uid;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    cancel(element) {\n        if (!this.isDrawing) {\n            return;\n        }\n        this.isDrawing = false;\n        this._deactivateDraw(element);\n        this._deactivateModify(element);\n        resetElementCursor(element);\n        const { annotation, viewportUIDsToRender } = this.editData;\n        const { data } = annotation;\n        data.active = false;\n        data.handles.activeHandleIndex = null;\n        triggerAnnotationRenderForViewportIds(viewportUIDsToRender);\n        this.editData = null;\n        return annotation.metadata.annotationUID;\n    }\n    _getImageVolumeFromTargetUID(targetUID, renderingEngine) {\n        let imageVolume, viewport;\n        if (targetUID.startsWith('stackTarget')) {\n            const coloneIndex = targetUID.indexOf(':');\n            const viewportUID = targetUID.substring(coloneIndex + 1);\n            const viewport = renderingEngine.getViewport(viewportUID);\n            imageVolume = viewport.getImageData();\n        }\n        else {\n            imageVolume = cache.getVolume(targetUID);\n        }\n        return { imageVolume, viewport };\n    }\n    _getTargetStackUID(viewport) {\n        return `stackTarget:${viewport.uid}`;\n    }\n}\nexport default VideoRedactionTool;\n","import { m as macro } from '../../macros2.js';\nimport vtkPolyData from '../../Common/DataModel/PolyData.js';\n\nconst Dir = {\n  Forward: 1,\n  Backward: -1\n};\nconst visited = new Set();\nfunction vtkContourLoopExtraction(publicAPI, model) {\n  publicAPI.requestData = (inData, outData) => {\n    const [input] = inData;\n    if (!outData[0]) {\n      outData[0] = vtkPolyData.newInstance();\n    }\n    const [output] = outData;\n    publicAPI.extractContours(input, output);\n    output.modified();\n  };\n  publicAPI.traverseLoop = (pd, dir, startLineId, startPtId, loopPoints) => {\n    let lineId = startLineId;\n    let lastPtId = startPtId;\n    let terminated = false;\n    let numInserted = 0;\n    while (!terminated) {\n      const {\n        cellPointIds\n      } = pd.getCellPoints(lineId);\n      if (!cellPointIds) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      lastPtId = cellPointIds[0] !== lastPtId ? cellPointIds[0] : cellPointIds[1];\n      numInserted++;\n\n      // parametric point value\n      const t = dir * numInserted;\n      loopPoints.push({\n        t,\n        ptId: lastPtId\n      });\n      const lineCell = pd.getPointCells(lastPtId);\n      if (lineCell.length !== 2 || lastPtId === startPtId) {\n        // looped\n        return lastPtId;\n      }\n      if (lineCell.length === 2) {\n        // continue along loop\n        lineId = lineCell[0] !== lineId ? lineCell[0] : lineCell[1];\n        visited.add(lineId);\n      } else {\n        // empty or invalid cell\n        terminated = true;\n      }\n    }\n    return lastPtId;\n  };\n  publicAPI.extractContours = (input, output) => {\n    const loops = [];\n    visited.clear();\n    const inLines = input.getLines();\n    output.getPoints().setData(Float32Array.from(input.getPoints().getData()));\n\n    // TODO skip if cached input mtime hasn't changed.\n    // iterate over input lines\n    for (let li = 0; li < inLines.getNumberOfCells(); li++) {\n      if (visited.has(li)) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      const {\n        cellPointIds\n      } = input.getCellPoints(li);\n      if (!cellPointIds) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      visited.add(li);\n      const startPtId = cellPointIds[0];\n      const loopPoints = [];\n      loopPoints.push({\n        t: 0,\n        ptId: startPtId\n      });\n      const endPtId = publicAPI.traverseLoop(input, Dir.Forward, li, startPtId, loopPoints);\n      if (startPtId !== endPtId) {\n        // didn't find a loop. Go other direction to see where we end up\n        publicAPI.traverseLoop(input, Dir.Backward, li, startPtId, loopPoints);\n        loopPoints.sort((a, b) => a.t < b.t ? -1 : 1);\n        // make closed contour\n        if (loopPoints.length && loopPoints[0].ptId !== loopPoints[loopPoints.length - 1]?.ptId) {\n          loopPoints.push({\n            ...loopPoints[loopPoints.length - 1]\n          });\n        }\n      }\n      if (loopPoints.length) {\n        loops.push(loopPoints);\n      }\n    }\n\n    // clear output lines\n    const outLines = output.getLines();\n    outLines.resize(0);\n    loops.forEach(loop => {\n      outLines.insertNextCell(loop.map(pt => pt.ptId));\n    });\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n  macro.obj(publicAPI, model);\n  macro.algo(publicAPI, model, 1, 1);\n  vtkContourLoopExtraction(publicAPI);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkContourLoopExtraction');\n\n// ----------------------------------------------------------------------------\n\nvar index = {\n  newInstance,\n  extend\n};\n\nexport { index as default, extend, newInstance };\n","import { expose } from 'comlink';\nimport { utilities } from '@cornerstonejs/core';\nimport { utilities as ToolsUtilities } from '@cornerstonejs/tools';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkPlane from '@kitware/vtk.js/Common/DataModel/Plane';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkContourLoopExtraction from '@kitware/vtk.js/Filters/General/ContourLoopExtraction';\nimport vtkCutter from '@kitware/vtk.js/Filters/Core/Cutter';\nconst { math: { polyline: { containsPoint, getAABB, projectTo2D }, }, geometricSurfaceUtils: { checkStandardBasis, rotatePoints }, boundingBox: { getBoundingBoxAroundShapeWorld }, planar: { isPlaneIntersectingAABB }, } = ToolsUtilities;\nasync function peerImport(moduleId) {\n    try {\n        if (moduleId === '@icr/polyseg-wasm') {\n            return import('@icr/polyseg-wasm');\n        }\n    }\n    catch (error) {\n        console.warn('Error importing module:', error);\n        return null;\n    }\n}\nconst polySegConverters = {\n    polySeg: null,\n    polySegInitializing: false,\n    polySegInitializingPromise: null,\n    async initializePolySeg(progressCallback) {\n        let ICRPolySeg;\n        try {\n            ICRPolySeg = (await peerImport('@icr/polyseg-wasm')).default;\n        }\n        catch (error) {\n            console.error(error);\n            console.debug(\"Warning: '@icr/polyseg-wasm' module not found. Please install it separately.\");\n            return;\n        }\n        if (this.polySegInitializing) {\n            await this.polySegInitializingPromise;\n            return;\n        }\n        if (this.polySeg?.instance) {\n            return;\n        }\n        this.polySegInitializing = true;\n        this.polySegInitializingPromise = new Promise((resolve) => {\n            this.polySeg = new ICRPolySeg();\n            this.polySeg\n                .initialize({\n                updateProgress: progressCallback,\n            })\n                .then(() => {\n                this.polySegInitializing = false;\n                resolve();\n            });\n        });\n        await this.polySegInitializingPromise;\n    },\n    async convertContourToSurface(args, ...callbacks) {\n        const { polylines, numPointsArray } = args;\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = await this.polySeg.instance.convertContourRoiToSurface(polylines, numPointsArray);\n        return results;\n    },\n    async convertLabelmapToSurface(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = this.polySeg.instance.convertLabelmapToSurface(args.scalarData, args.dimensions, args.spacing, args.direction, args.origin, [args.segmentIndex]);\n        const rotationInfo = checkStandardBasis(args.direction);\n        if (!rotationInfo.isStandard) {\n            const rotatedPoints = rotatePoints(rotationInfo.rotationMatrix, args.origin, results.points);\n            results.points = [...rotatedPoints];\n        }\n        return results;\n    },\n    async convertContourToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentIndices, scalarData, annotationUIDsInSegmentMap, dimensions, origin, direction, spacing, } = args;\n        const segmentationVoxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData,\n        });\n        const imageData = vtkImageData.newInstance();\n        imageData.setDimensions(dimensions);\n        imageData.setOrigin(origin);\n        imageData.setDirection(direction);\n        imageData.setSpacing(spacing);\n        const scalarArray = vtkDataArray.newInstance({\n            name: 'Pixels',\n            numberOfComponents: 1,\n            values: scalarData,\n        });\n        imageData.getPointData().setScalars(scalarArray);\n        imageData.modified();\n        for (const index of segmentIndices) {\n            const annotations = annotationUIDsInSegmentMap.get(index);\n            for (const annotation of annotations) {\n                if (!annotation.polyline) {\n                    continue;\n                }\n                const { polyline, holesPolyline } = annotation;\n                const bounds = getBoundingBoxAroundShapeWorld(polyline);\n                const [iMin, jMin, kMin] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][0],\n                    bounds[1][0],\n                    bounds[2][0],\n                ]);\n                const [iMax, jMax, kMax] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][1],\n                    bounds[1][1],\n                    bounds[2][1],\n                ]);\n                const { projectedPolyline, sharedDimensionIndex } = projectTo2D(polyline);\n                const holes = holesPolyline?.map((hole) => {\n                    const { projectedPolyline: projectedHole } = projectTo2D(hole);\n                    return projectedHole;\n                });\n                const firstDim = (sharedDimensionIndex + 1) % 3;\n                const secondDim = (sharedDimensionIndex + 2) % 3;\n                const voxels = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                    dimensions,\n                    scalarData,\n                });\n                voxels.forEach(({ pointIJK }) => {\n                    segmentationVoxelManager.setAtIJKPoint(pointIJK, index);\n                }, {\n                    imageData,\n                    isInObject: (pointLPS) => {\n                        const point2D = [pointLPS[firstDim], pointLPS[secondDim]];\n                        const isInside = containsPoint(projectedPolyline, point2D, {\n                            holes,\n                        });\n                        return isInside;\n                    },\n                    boundsIJK: [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ],\n                });\n            }\n        }\n        return segmentationVoxelManager.scalarData;\n    },\n    async convertContourToStackLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentationsInfo, annotationUIDsInSegmentMap, segmentIndices } = args;\n        const segmentationVoxelManagers = new Map();\n        segmentationsInfo.forEach((segmentationInfo, referencedImageId) => {\n            const { dimensions, scalarData, direction, spacing, origin } = segmentationInfo;\n            const manager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                dimensions,\n                scalarData,\n            });\n            const imageData = vtkImageData.newInstance();\n            imageData.setDimensions(dimensions);\n            imageData.setOrigin(origin);\n            imageData.setDirection(direction);\n            imageData.setSpacing(spacing);\n            const scalarArray = vtkDataArray.newInstance({\n                name: 'Pixels',\n                numberOfComponents: 1,\n                values: scalarData,\n            });\n            imageData.getPointData().setScalars(scalarArray);\n            imageData.modified();\n            segmentationVoxelManagers.set(referencedImageId, { manager, imageData });\n        });\n        for (const index of segmentIndices) {\n            const annotations = annotationUIDsInSegmentMap.get(index);\n            for (const annotation of annotations) {\n                if (!annotation.polyline) {\n                    continue;\n                }\n                const { polyline, holesPolyline, referencedImageId } = annotation;\n                const bounds = getBoundingBoxAroundShapeWorld(polyline);\n                const { manager: segmentationVoxelManager, imageData } = segmentationVoxelManagers.get(referencedImageId);\n                const [iMin, jMin, kMin] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][0],\n                    bounds[1][0],\n                    bounds[2][0],\n                ]);\n                const [iMax, jMax, kMax] = utilities.transformWorldToIndex(imageData, [\n                    bounds[0][1],\n                    bounds[1][1],\n                    bounds[2][1],\n                ]);\n                const { projectedPolyline, sharedDimensionIndex } = projectTo2D(polyline);\n                const holes = holesPolyline?.map((hole) => {\n                    const { projectedPolyline: projectedHole } = projectTo2D(hole);\n                    return projectedHole;\n                });\n                const firstDim = (sharedDimensionIndex + 1) % 3;\n                const secondDim = (sharedDimensionIndex + 2) % 3;\n                const voxels = utilities.VoxelManager.createImageVoxelManager({\n                    width: imageData.getDimensions()[0],\n                    height: imageData.getDimensions()[1],\n                    scalarData: imageData.getPointData().getScalars().getData(),\n                });\n                voxels.forEach(({ pointIJK }) => {\n                    segmentationVoxelManager.setAtIJKPoint(pointIJK, index);\n                }, {\n                    imageData,\n                    isInObject: (pointLPS) => {\n                        const point2D = [pointLPS[firstDim], pointLPS[secondDim]];\n                        const isInside = containsPoint(projectedPolyline, point2D, {\n                            holes,\n                        });\n                        return isInside;\n                    },\n                    boundsIJK: [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ],\n                });\n            }\n        }\n        segmentationsInfo.forEach((segmentationInfo, referencedImageId) => {\n            const { manager: segmentationVoxelManager } = segmentationVoxelManagers.get(referencedImageId);\n            segmentationInfo.scalarData = segmentationVoxelManager.scalarData;\n        });\n        return segmentationsInfo;\n    },\n    async convertSurfaceToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const results = this.polySeg.instance.convertSurfaceToLabelmap(args.points, args.polys, args.dimensions, args.spacing, args.direction, args.origin);\n        return results;\n    },\n    async convertSurfacesToVolumeLabelmap(args, ...callbacks) {\n        const [progressCallback] = callbacks;\n        await this.initializePolySeg(progressCallback);\n        const { segmentsInfo } = args;\n        const promises = Array.from(segmentsInfo.keys()).map((segmentIndex) => {\n            const { points, polys } = segmentsInfo.get(segmentIndex);\n            const result = this.polySeg.instance.convertSurfaceToLabelmap(points, polys, args.dimensions, args.spacing, args.direction, args.origin);\n            return {\n                ...result,\n                segmentIndex,\n            };\n        });\n        const results = await Promise.all(promises);\n        const targetImageData = vtkImageData.newInstance();\n        targetImageData.setDimensions(args.dimensions);\n        targetImageData.setOrigin(args.origin);\n        targetImageData.setSpacing(args.spacing);\n        targetImageData.setDirection(args.direction);\n        const totalSize = args.dimensions[0] * args.dimensions[1] * args.dimensions[2];\n        const scalarArray = vtkDataArray.newInstance({\n            name: 'Pixels',\n            numberOfComponents: 1,\n            values: new Uint8Array(totalSize),\n        });\n        targetImageData.getPointData().setScalars(scalarArray);\n        targetImageData.modified();\n        const { dimensions } = args;\n        const scalarData = targetImageData.getPointData().getScalars().getData();\n        const segmentationVoxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData,\n        });\n        const outputVolumesInfo = results.map((result) => {\n            const { data, dimensions, direction, origin, spacing } = result;\n            const volume = vtkImageData.newInstance();\n            volume.setDimensions(dimensions);\n            volume.setOrigin(origin);\n            volume.setSpacing(spacing);\n            volume.setDirection(direction);\n            const scalarArray = vtkDataArray.newInstance({\n                name: 'Pixels',\n                numberOfComponents: 1,\n                values: data,\n            });\n            volume.getPointData().setScalars(scalarArray);\n            volume.modified();\n            const voxelManager = utilities.VoxelManager.createScalarVolumeVoxelManager({\n                dimensions,\n                scalarData: data,\n            });\n            const extent = volume.getExtent();\n            return {\n                volume,\n                voxelManager,\n                extent,\n                scalarData: data,\n                segmentIndex: result.segmentIndex,\n            };\n        });\n        const voxels = utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions: targetImageData.getDimensions(),\n            scalarData: targetImageData.getPointData().getScalars().getData(),\n        });\n        voxels.forEach(({ pointIJK, pointLPS }) => {\n            try {\n                for (const volumeInfo of outputVolumesInfo) {\n                    const { volume, extent, voxelManager, segmentIndex } = volumeInfo;\n                    const index = volume.worldToIndex(pointLPS);\n                    if (index[0] < extent[0] ||\n                        index[0] > extent[1] ||\n                        index[1] < extent[2] ||\n                        index[1] > extent[3] ||\n                        index[2] < extent[4] ||\n                        index[2] > extent[5]) {\n                        continue;\n                    }\n                    const roundedIndex = index.map(Math.round);\n                    const value = voxelManager.getAtIJK(...roundedIndex);\n                    if (value > 0) {\n                        segmentationVoxelManager.setAtIJKPoint(pointIJK, segmentIndex);\n                        break;\n                    }\n                }\n            }\n            catch (error) {\n            }\n        }, { imageData: targetImageData });\n        return segmentationVoxelManager.scalarData;\n    },\n    getSurfacesAABBs({ surfacesInfo }) {\n        const aabbs = new Map();\n        for (const { points, id } of surfacesInfo) {\n            const aabb = getAABB(points, { numDimensions: 3 });\n            aabbs.set(id, aabb);\n        }\n        return aabbs;\n    },\n    cutSurfacesIntoPlanes({ planesInfo, surfacesInfo, surfacesAABB = new Map() }, progressCallback, updateCacheCallback) {\n        const numberOfPlanes = planesInfo.length;\n        const cutter = vtkCutter.newInstance();\n        const plane1 = vtkPlane.newInstance();\n        cutter.setCutFunction(plane1);\n        const surfacePolyData = vtkPolyData.newInstance();\n        try {\n            for (const [index, planeInfo] of planesInfo.entries()) {\n                const { sliceIndex, planes } = planeInfo;\n                const polyDataResults = new Map();\n                for (const polyDataInfo of surfacesInfo) {\n                    const { points, polys, id, segmentIndex } = polyDataInfo;\n                    const aabb3 = surfacesAABB.get(id) || getAABB(points, { numDimensions: 3 });\n                    if (!surfacesAABB.has(id)) {\n                        surfacesAABB.set(id, aabb3);\n                    }\n                    const { minX, minY, minZ, maxX, maxY, maxZ } = aabb3;\n                    const { origin, normal } = planes[0];\n                    if (!isPlaneIntersectingAABB(origin, normal, minX, minY, minZ, maxX, maxY, maxZ)) {\n                        continue;\n                    }\n                    surfacePolyData.getPoints().setData(points, 3);\n                    surfacePolyData.getPolys().setData(polys);\n                    surfacePolyData.modified();\n                    cutter.setInputData(surfacePolyData);\n                    plane1.setOrigin(origin);\n                    plane1.setNormal(normal);\n                    try {\n                        cutter.update();\n                    }\n                    catch (e) {\n                        console.warn('Error during clipping', e);\n                        continue;\n                    }\n                    const polyData = cutter.getOutputData();\n                    if (!polyData ||\n                        !polyData.getPoints() ||\n                        polyData.getPoints().getNumberOfPoints() === 0) {\n                        continue;\n                    }\n                    const cutterOutput = polyData;\n                    cutterOutput.buildLinks();\n                    const loopExtraction = vtkContourLoopExtraction.newInstance();\n                    loopExtraction.setInputData(cutterOutput);\n                    try {\n                        loopExtraction.update();\n                        const loopOutput = loopExtraction.getOutputData();\n                        if (loopOutput &&\n                            loopOutput.getPoints() &&\n                            loopOutput.getLines() &&\n                            loopOutput.getPoints().getNumberOfPoints() > 0 &&\n                            loopOutput.getLines().getNumberOfCells() > 0) {\n                            polyDataResults.set(segmentIndex, {\n                                points: loopOutput.getPoints().getData(),\n                                lines: loopOutput.getLines().getData(),\n                                numberOfCells: loopOutput.getLines().getNumberOfCells(),\n                                segmentIndex,\n                            });\n                        }\n                    }\n                    catch (loopError) {\n                        console.warn('Error during loop extraction:', loopError);\n                        continue;\n                    }\n                }\n                progressCallback({ progress: (index + 1) / numberOfPlanes });\n                updateCacheCallback({ sliceIndex, polyDataResults });\n            }\n        }\n        catch (e) {\n            console.warn('Error during processing', e);\n        }\n        finally {\n            surfacesInfo = null;\n            plane1.delete();\n        }\n    },\n};\nexpose(polySegConverters);\n","const CORNERSTONE_COLOR_LUT = [\n    [0, 0, 0, 0],\n    [221, 84, 84, 255],\n    [77, 228, 121, 255],\n    [166, 70, 235, 255],\n    [189, 180, 116, 255],\n    [109, 182, 196, 255],\n    [204, 101, 157, 255],\n    [123, 211, 94, 255],\n    [93, 87, 218, 255],\n    [225, 128, 80, 255],\n    [73, 232, 172, 255],\n    [181, 119, 186, 255],\n    [176, 193, 112, 255],\n    [105, 153, 200, 255],\n    [208, 97, 120, 255],\n    [90, 215, 101, 255],\n    [135, 83, 222, 255],\n    [229, 178, 76, 255],\n    [122, 183, 181, 255],\n    [190, 115, 171, 255],\n    [149, 197, 108, 255],\n    [100, 118, 205, 255],\n    [212, 108, 93, 255],\n    [86, 219, 141, 255],\n    [183, 79, 226, 255],\n    [233, 233, 72, 255],\n    [118, 167, 187, 255],\n    [194, 111, 146, 255],\n    [116, 201, 104, 255],\n    [115, 96, 209, 255],\n    [216, 147, 89, 255],\n    [82, 223, 188, 255],\n    [230, 75, 224, 255],\n    [163, 184, 121, 255],\n    [114, 143, 191, 255],\n    [198, 107, 114, 255],\n    [99, 206, 122, 255],\n    [153, 92, 213, 255],\n    [220, 192, 85, 255],\n    [78, 215, 227, 255],\n    [234, 71, 173, 255],\n    [141, 188, 117, 255],\n    [110, 113, 195, 255],\n    [202, 128, 103, 255],\n    [95, 210, 157, 255],\n    [195, 88, 217, 255],\n    [206, 224, 81, 255],\n    [74, 166, 231, 255],\n    [185, 120, 139, 255],\n    [113, 192, 113, 255],\n    [133, 106, 199, 255],\n    [207, 162, 98, 255],\n    [91, 214, 198, 255],\n    [221, 84, 198, 255],\n    [159, 228, 77, 255],\n    [70, 111, 235, 255],\n    [189, 119, 116, 255],\n    [109, 196, 138, 255],\n    [165, 101, 204, 255],\n    [211, 201, 94, 255],\n    [87, 191, 218, 255],\n    [225, 80, 153, 255],\n    [106, 232, 73, 255],\n    [124, 119, 186, 255],\n    [193, 142, 112, 255],\n    [105, 200, 168, 255],\n    [203, 97, 208, 255],\n    [184, 215, 90, 255],\n    [83, 147, 222, 255],\n    [229, 76, 101, 255],\n    [122, 183, 130, 255],\n    [146, 115, 190, 255],\n    [197, 171, 108, 255],\n    [100, 205, 205, 255],\n    [212, 93, 177, 255],\n    [141, 219, 86, 255],\n    [79, 97, 226, 255],\n    [233, 99, 72, 255],\n    [118, 187, 150, 255],\n    [173, 111, 194, 255],\n    [197, 201, 104, 255],\n    [96, 171, 209, 255],\n    [216, 89, 137, 255],\n    [94, 223, 82, 255],\n    [107, 75, 230, 255],\n    [184, 153, 121, 255],\n    [114, 191, 175, 255],\n    [198, 107, 191, 255],\n    [166, 206, 99, 255],\n    [92, 132, 213, 255],\n    [220, 85, 91, 255],\n    [78, 227, 115, 255],\n    [159, 71, 234, 255],\n    [188, 176, 117, 255],\n    [110, 185, 195, 255],\n    [202, 103, 161, 255],\n    [129, 210, 95, 255],\n    [88, 88, 217, 255],\n    [224, 123, 81, 255],\n    [74, 231, 166, 255],\n    [177, 120, 185, 255],\n    [179, 192, 113, 255],\n    [106, 156, 199, 255],\n    [207, 98, 125, 255],\n    [91, 214, 96, 255],\n    [130, 84, 221, 255],\n    [228, 171, 77, 255],\n    [70, 235, 221, 255],\n    [189, 116, 174, 255],\n    [153, 196, 109, 255],\n    [101, 123, 204, 255],\n    [211, 104, 94, 255],\n    [87, 218, 136, 255],\n    [177, 80, 225, 255],\n    [232, 225, 73, 255],\n    [119, 169, 186, 255],\n    [193, 112, 149, 255],\n    [121, 200, 105, 255],\n    [111, 97, 208, 255],\n    [215, 142, 90, 255],\n    [83, 222, 181, 255],\n    [229, 76, 229, 255],\n    [165, 183, 122, 255],\n    [115, 146, 190, 255],\n    [197, 108, 119, 255],\n    [100, 205, 118, 255],\n    [148, 93, 212, 255],\n    [219, 186, 86, 255],\n    [79, 220, 226, 255],\n    [233, 72, 179, 255],\n    [144, 187, 118, 255],\n    [111, 118, 194, 255],\n    [201, 124, 104, 255],\n    [96, 209, 153, 255],\n    [189, 89, 216, 255],\n    [211, 223, 82, 255],\n    [75, 172, 230, 255],\n    [184, 121, 142, 255],\n    [117, 191, 114, 255],\n    [130, 107, 198, 255],\n    [206, 157, 99, 255],\n    [92, 213, 193, 255],\n    [220, 85, 203, 255],\n    [165, 227, 78, 255],\n    [71, 118, 234, 255],\n    [188, 117, 117, 255],\n    [110, 195, 135, 255],\n    [161, 103, 202, 255],\n    [210, 195, 95, 255],\n    [88, 195, 217, 255],\n    [224, 81, 158, 255],\n    [113, 231, 74, 255],\n    [123, 120, 185, 255],\n    [192, 139, 113, 255],\n    [106, 199, 164, 255],\n    [198, 98, 207, 255],\n    [188, 214, 91, 255],\n    [84, 153, 221, 255],\n    [228, 77, 108, 255],\n    [70, 235, 84, 255],\n    [143, 116, 189, 255],\n    [196, 167, 109, 255],\n    [101, 204, 199, 255],\n    [211, 94, 182, 255],\n    [147, 218, 87, 255],\n    [80, 104, 225, 255],\n    [232, 93, 73, 255],\n    [119, 186, 147, 255],\n    [170, 112, 193, 255],\n    [200, 200, 105, 255],\n    [97, 175, 208, 255],\n    [215, 90, 142, 255],\n    [100, 222, 83, 255],\n    [101, 76, 229, 255],\n    [183, 150, 122, 255],\n    [115, 190, 171, 255],\n    [197, 108, 194, 255],\n    [170, 205, 100, 255],\n    [93, 138, 212, 255],\n    [219, 86, 97, 255],\n    [79, 226, 110, 255],\n    [153, 72, 233, 255],\n    [187, 173, 118, 255],\n    [111, 187, 194, 255],\n    [201, 104, 165, 255],\n    [134, 209, 96, 255],\n    [89, 95, 216, 255],\n    [223, 117, 82, 255],\n    [75, 230, 159, 255],\n    [174, 121, 184, 255],\n    [182, 191, 114, 255],\n    [107, 160, 198, 255],\n    [206, 99, 130, 255],\n    [92, 213, 92, 255],\n    [124, 85, 220, 255],\n    [227, 165, 78, 255],\n    [71, 234, 214, 255],\n    [188, 117, 176, 255],\n    [156, 195, 110, 255],\n    [103, 128, 202, 255],\n    [210, 100, 95, 255],\n    [88, 217, 131, 255],\n    [170, 81, 224, 255],\n    [231, 218, 74, 255],\n    [120, 172, 185, 255],\n    [192, 113, 153, 255],\n    [125, 199, 106, 255],\n    [107, 98, 207, 255],\n    [214, 137, 91, 255],\n    [84, 221, 175, 255],\n    [222, 77, 228, 255],\n    [194, 235, 70, 255],\n    [116, 149, 189, 255],\n    [196, 109, 123, 255],\n    [101, 204, 114, 255],\n    [143, 94, 211, 255],\n    [218, 180, 87, 255],\n    [80, 225, 225, 255],\n    [232, 73, 186, 255],\n    [147, 186, 119, 255],\n    [112, 122, 193, 255],\n    [200, 121, 105, 255],\n    [97, 208, 148, 255],\n    [184, 90, 215, 255],\n    [216, 222, 83, 255],\n    [76, 178, 229, 255],\n    [183, 122, 145, 255],\n    [121, 190, 115, 255],\n    [126, 108, 197, 255],\n    [205, 153, 100, 255],\n    [93, 212, 187, 255],\n    [219, 86, 208, 255],\n    [171, 226, 79, 255],\n    [72, 126, 233, 255],\n    [187, 118, 121, 255],\n    [111, 194, 132, 255],\n    [157, 104, 201, 255],\n    [209, 190, 96, 255],\n    [89, 200, 216, 255],\n    [223, 82, 164, 255],\n    [120, 230, 75, 255],\n    [121, 121, 184, 255],\n    [191, 136, 114, 255],\n    [107, 198, 160, 255],\n    [192, 99, 206, 255],\n    [193, 213, 92, 255],\n    [85, 158, 220, 255],\n    [227, 78, 115, 255],\n    [71, 234, 78, 255],\n    [141, 117, 188, 255],\n    [195, 163, 110, 255],\n    [103, 202, 194, 255],\n    [210, 95, 186, 255],\n    [153, 217, 88, 255],\n    [81, 111, 224, 255],\n];\nexport default CORNERSTONE_COLOR_LUT;\n","import { state } from '../store/state';\nimport { getEnabledElement } from '@cornerstonejs/core';\nconst VIEWPORT_ELEMENT = 'viewport-element';\nfunction getSvgDrawingHelper(element) {\n    const enabledElement = getEnabledElement(element);\n    const { viewportId, renderingEngineId } = enabledElement;\n    const canvasHash = `${viewportId}:${renderingEngineId}`;\n    const svgLayerElement = _getSvgLayer(element);\n    Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n        state.svgNodeCache[canvasHash][cacheKey].touched = false;\n    });\n    return {\n        svgLayerElement: svgLayerElement,\n        svgNodeCacheForCanvas: state.svgNodeCache,\n        getSvgNode: getSvgNode.bind(this, canvasHash),\n        appendNode: appendNode.bind(this, svgLayerElement, canvasHash),\n        setNodeTouched: setNodeTouched.bind(this, canvasHash),\n        clearUntouched: clearUntouched.bind(this, svgLayerElement, canvasHash),\n    };\n}\nfunction _getSvgLayer(element) {\n    const viewportElement = `.${VIEWPORT_ELEMENT}`;\n    const internalDivElement = element.querySelector(viewportElement);\n    const svgLayer = internalDivElement?.querySelector(':scope > .svg-layer');\n    return svgLayer;\n}\nfunction getSvgNode(canvasHash, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    if (state.svgNodeCache[canvasHash][cacheKey]) {\n        return state.svgNodeCache[canvasHash][cacheKey].domRef;\n    }\n}\nfunction appendNode(svgLayerElement, canvasHash, svgNode, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return null;\n    }\n    state.svgNodeCache[canvasHash][cacheKey] = {\n        touched: true,\n        domRef: svgNode,\n    };\n    svgLayerElement.appendChild(svgNode);\n}\nfunction setNodeTouched(canvasHash, cacheKey) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    if (state.svgNodeCache[canvasHash][cacheKey]) {\n        state.svgNodeCache[canvasHash][cacheKey].touched = true;\n    }\n}\nfunction clearUntouched(svgLayerElement, canvasHash) {\n    if (!state.svgNodeCache[canvasHash]) {\n        return;\n    }\n    Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n        const cacheEntry = state.svgNodeCache[canvasHash][cacheKey];\n        if (!cacheEntry.touched && cacheEntry.domRef) {\n            svgLayerElement.removeChild(cacheEntry.domRef);\n            delete state.svgNodeCache[canvasHash][cacheKey];\n        }\n    });\n}\nexport default getSvgDrawingHelper;\n","import getSvgDrawingHelper from './getSvgDrawingHelper';\nfunction draw(element, fn) {\n    const svgDrawingHelper = getSvgDrawingHelper(element);\n    fn(svgDrawingHelper);\n    svgDrawingHelper.clearUntouched();\n}\nexport default draw;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawCircle(svgDrawingHelper, annotationUID, circleUID, center, radius, options = {}, dataId = '') {\n    const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        fill: 'transparent',\n        width: '2',\n        lineDash: undefined,\n        lineWidth: undefined,\n        strokeOpacity: 1,\n        fillOpacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'circle', circleUID);\n    const existingCircleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        r: `${radius}`,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'fill-opacity': fillOpacity,\n        'stroke-opacity': strokeOpacity,\n    };\n    if (existingCircleElement) {\n        setAttributesIfNecessary(attributes, existingCircleElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newCircleElement = document.createElementNS(svgns, 'circle');\n        if (dataId !== '') {\n            newCircleElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, newCircleElement);\n        svgDrawingHelper.appendNode(newCircleElement, svgNodeHash);\n    }\n}\nexport default drawCircle;\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawEllipseByCoordinates(svgDrawingHelper, annotationUID, ellipseUID, canvasCoordinates, options = {}, dataId = '') {\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n    const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const [bottom, top, left, right] = canvasCoordinates;\n    const w = Math.hypot(left[0] - right[0], left[1] - right[1]);\n    const h = Math.hypot(top[0] - bottom[0], top[1] - bottom[1]);\n    const angle = (Math.atan2(left[1] - right[1], left[0] - right[0]) * 180) / Math.PI;\n    const center = [(left[0] + right[0]) / 2, (top[1] + bottom[1]) / 2];\n    const radiusX = w / 2;\n    const radiusY = h / 2;\n    const attributes = {\n        cx: `${center[0]}`,\n        cy: `${center[1]}`,\n        rx: `${radiusX}`,\n        ry: `${radiusY}`,\n        stroke: color,\n        fill: 'transparent',\n        transform: `rotate(${angle} ${center[0]} ${center[1]})`,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingEllipse) {\n        setAttributesIfNecessary(attributes, existingEllipse);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n        if (dataId !== '') {\n            svgEllipseElement.setAttribute('data-id', dataId);\n        }\n        setNewAttributesIfValid(attributes, svgEllipseElement);\n        svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n    }\n}\nexport default drawEllipseByCoordinates;\n","import drawHandle from './drawHandle';\nfunction drawHandles(svgDrawingHelper, annotationUID, handleGroupUID, handlePoints, options = {}) {\n    handlePoints.forEach((handle, i) => {\n        drawHandle(svgDrawingHelper, annotationUID, handleGroupUID, handle, options, i);\n    });\n}\nexport default drawHandles;\n","import drawLine from './drawLine';\nimport findClosestPoint from '../utilities/math/vec2/findClosestPoint';\nfunction drawLink(svgDrawingHelper, annotationUID, linkUID, annotationAnchorPoints, refPoint, boundingBox, options = {}) {\n    const start = annotationAnchorPoints.length > 0\n        ? findClosestPoint(annotationAnchorPoints, refPoint)\n        : refPoint;\n    const boundingBoxPoints = _boundingBoxPoints(boundingBox);\n    const end = findClosestPoint(boundingBoxPoints, start);\n    const mergedOptions = Object.assign({\n        color: 'rgb(255, 255, 0)',\n        lineWidth: '1',\n        lineDash: '2,3',\n    }, options);\n    drawLine(svgDrawingHelper, annotationUID, `link-${linkUID}`, start, end, mergedOptions);\n}\nfunction _boundingBoxPoints(boundingBox) {\n    const { x: left, y: top, height, width } = boundingBox;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const topMiddle = [left + halfWidth, top];\n    const leftMiddle = [left, top + halfHeight];\n    const bottomMiddle = [left + halfWidth, top + height];\n    const rightMiddle = [left + width, top + halfHeight];\n    return [topMiddle, leftMiddle, bottomMiddle, rightMiddle];\n}\nexport default drawLink;\n","import drawTextBox from './drawTextBox';\nimport drawLink from './drawLink';\nfunction drawLinkedTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, annotationAnchorPoints, textBox, options = {}) {\n    const mergedOptions = Object.assign({\n        handleRadius: '6',\n        centering: {\n            x: false,\n            y: true,\n        },\n    }, options);\n    const canvasBoundingBox = drawTextBox(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, mergedOptions);\n    drawLink(svgDrawingHelper, annotationUID, textBoxUID, annotationAnchorPoints, textBoxPosition, canvasBoundingBox, mergedOptions);\n    return canvasBoundingBox;\n}\nexport default drawLinkedTextBox;\n","import _getHash from './_getHash';\nimport drawRectByCoordinates from './drawRectByCoordinates';\nexport default function drawRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}, dataId = '') {\n    const topLeft = [start[0], start[1]];\n    const topRight = [end[0], start[1]];\n    const bottomLeft = [start[0], end[1]];\n    const bottomRight = [end[0], end[1]];\n    drawRectByCoordinates(svgDrawingHelper, annotationUID, rectangleUID, [topLeft, topRight, bottomLeft, bottomRight], options, dataId);\n}\n","import drawLine from './drawLine';\nexport default function drawHeight(svgDrawingHelper, annotationUID, heightUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { color, width, lineWidth, lineDash } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const midX = end[0] + (start[0] - end[0]) / 2;\n    const endfirstLine = [midX, start[1]];\n    const endsecondLine = [midX, end[1]];\n    const firstLine = {\n        start: start,\n        end: endfirstLine,\n    };\n    const secondLine = {\n        start: endfirstLine,\n        end: endsecondLine,\n    };\n    const threeLine = {\n        start: endsecondLine,\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, '1', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', threeLine.start, threeLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nfunction drawFan(svgDrawingHelper, annotationUID, fanUID, center, innerRadius, outerRadius, startAngle, endAngle, options = {}, dataId = '', zIndex) {\n    const { color, fill, width, lineWidth, lineDash, fillOpacity, strokeOpacity, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        fill: 'transparent',\n        width: '2',\n        lineDash: undefined,\n        lineWidth: undefined,\n        strokeOpacity: 1,\n        fillOpacity: 1,\n    }, options);\n    const strokeWidth = lineWidth || width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'fan', fanUID);\n    const existingFanElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const startRad = (startAngle * Math.PI) / 180;\n    const endRad = (endAngle * Math.PI) / 180;\n    const centerX = center[0];\n    const centerY = center[1];\n    const outerStartX = centerX + outerRadius * Math.cos(startRad);\n    const outerStartY = centerY + outerRadius * Math.sin(startRad);\n    const outerEndX = centerX + outerRadius * Math.cos(endRad);\n    const outerEndY = centerY + outerRadius * Math.sin(endRad);\n    const innerStartX = centerX + innerRadius * Math.cos(startRad);\n    const innerStartY = centerY + innerRadius * Math.sin(startRad);\n    const innerEndX = centerX + innerRadius * Math.cos(endRad);\n    const innerEndY = centerY + innerRadius * Math.sin(endRad);\n    const largeArcFlag = endAngle - startAngle <= 180 ? 0 : 1;\n    let pathData = `M ${outerStartX} ${outerStartY}`;\n    pathData += ` A ${outerRadius} ${outerRadius} 0 ${largeArcFlag} 1 ${outerEndX} ${outerEndY}`;\n    pathData += ` L ${innerEndX} ${innerEndY}`;\n    pathData += ` A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${innerStartX} ${innerStartY}`;\n    pathData += ` Z`;\n    const attributes = {\n        d: pathData,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n        'fill-opacity': fillOpacity,\n        'stroke-opacity': strokeOpacity,\n        'mix-blend-mode': 'normal',\n    };\n    if (existingFanElement) {\n        setAttributesIfNecessary(attributes, existingFanElement);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const newFanElement = document.createElementNS(svgns, 'path');\n        if (dataId !== '') {\n            newFanElement.setAttribute('data-id', dataId);\n        }\n        if (zIndex !== undefined) {\n            newFanElement.style.zIndex = zIndex.toString();\n        }\n        setNewAttributesIfValid(attributes, newFanElement);\n        svgDrawingHelper.appendNode(newFanElement, svgNodeHash);\n    }\n}\nexport default drawFan;\n","import drawLine from './drawLine';\nconst svgns = 'http://www.w3.org/2000/svg';\nexport default function drawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n        return;\n    }\n    const { viaMarker = false, color = 'rgb(0, 255, 0)', markerSize = 10, } = options;\n    if (!viaMarker) {\n        legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n        return;\n    }\n    const layerId = svgDrawingHelper.svgLayerElement.id;\n    const markerBaseId = `arrow-${annotationUID}`;\n    const markerFullId = `${markerBaseId}-${layerId}`;\n    const defs = svgDrawingHelper.svgLayerElement.querySelector('defs');\n    let arrowMarker = defs.querySelector(`#${markerFullId}`);\n    if (!arrowMarker) {\n        arrowMarker = document.createElementNS(svgns, 'marker');\n        arrowMarker.setAttribute('id', markerFullId);\n        arrowMarker.setAttribute('viewBox', '0 0 10 10');\n        arrowMarker.setAttribute('refX', '8');\n        arrowMarker.setAttribute('refY', '5');\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        arrowMarker.setAttribute('orient', 'auto');\n        const arrowPath = document.createElementNS(svgns, 'path');\n        arrowPath.setAttribute('d', 'M 0 0 L 10 5 L 0 10 z');\n        arrowPath.setAttribute('fill', color);\n        arrowMarker.appendChild(arrowPath);\n        defs.appendChild(arrowMarker);\n    }\n    else {\n        arrowMarker.setAttribute('markerWidth', `${markerSize}`);\n        arrowMarker.setAttribute('markerHeight', `${markerSize}`);\n        const arrowPath = arrowMarker.querySelector('path');\n        if (arrowPath) {\n            arrowPath.setAttribute('fill', color);\n        }\n    }\n    options.markerEndId = markerFullId;\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, options);\n}\nfunction legacyDrawArrow(svgDrawingHelper, annotationUID, arrowUID, start, end, options = {}) {\n    const { color = 'rgb(0, 255, 0)', width = 2, lineWidth, lineDash } = options;\n    const headLength = 10;\n    const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n    const firstLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle - Math.PI / 7),\n            end[1] - headLength * Math.sin(angle - Math.PI / 7),\n        ],\n        end: end,\n    };\n    const secondLine = {\n        start: [\n            end[0] - headLength * Math.cos(angle + Math.PI / 7),\n            end[1] - headLength * Math.sin(angle + Math.PI / 7),\n        ],\n        end: end,\n    };\n    drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '2', firstLine.start, firstLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n    drawLine(svgDrawingHelper, annotationUID, '3', secondLine.start, secondLine.end, {\n        color,\n        width,\n        lineWidth,\n        lineDash,\n    });\n}\n","import _getHash from './_getHash';\nimport _setAttributesIfNecessary from './setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './setNewAttributesIfValid';\nexport default function drawRedactionRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}) {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'rgb(0, 255, 0)',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n    const width = Math.abs(start[0] - end[0]);\n    const height = Math.abs(start[1] - end[1]);\n    const attributes = {\n        x: `${tlhc[0]}`,\n        y: `${tlhc[1]}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'black',\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        _setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        _setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n","var ChangeTypes;\n(function (ChangeTypes) {\n    ChangeTypes[\"Interaction\"] = \"Interaction\";\n    ChangeTypes[\"HandlesUpdated\"] = \"HandlesUpdated\";\n    ChangeTypes[\"StatsUpdated\"] = \"StatsUpdated\";\n    ChangeTypes[\"InitialSetup\"] = \"InitialSetup\";\n    ChangeTypes[\"Completed\"] = \"Completed\";\n    ChangeTypes[\"InterpolationUpdated\"] = \"InterpolationUpdated\";\n    ChangeTypes[\"History\"] = \"History\";\n    ChangeTypes[\"MetadataReferenceModified\"] = \"MetadataReferenceModified\";\n    ChangeTypes[\"LabelChange\"] = \"LabelChange\";\n})(ChangeTypes || (ChangeTypes = {}));\nexport default ChangeTypes;\n","var Swipe;\n(function (Swipe) {\n    Swipe[\"UP\"] = \"UP\";\n    Swipe[\"DOWN\"] = \"DOWN\";\n    Swipe[\"LEFT\"] = \"LEFT\";\n    Swipe[\"RIGHT\"] = \"RIGHT\";\n})(Swipe || (Swipe = {}));\nexport { Swipe };\n","import vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { BaseVolumeViewport, getEnabledElement, Enums, getEnabledElementByIds, cache, utilities, } from '@cornerstonejs/core';\nimport { triggerSegmentationRender } from '../../stateManagement/segmentation/SegmentationRenderingEngine';\nimport { updateLabelmapSegmentationImageReferences } from '../../stateManagement/segmentation/updateLabelmapSegmentationImageReferences';\nimport { getCurrentLabelmapImageIdsForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getLabelmapActorEntries } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/getSegmentationRepresentation';\nconst enable = function (element) {\n    if (!element) {\n        return;\n    }\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n        return;\n    }\n    const { viewport } = enabledElement;\n    if (viewport instanceof BaseVolumeViewport) {\n        return;\n    }\n    element.addEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.addEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst disable = function (element) {\n    element.removeEventListener(Enums.Events.PRE_STACK_NEW_IMAGE, _imageChangeEventListener);\n    element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n};\nconst perViewportManualTriggers = new Map();\nfunction _imageChangeEventListener(evt) {\n    const eventData = evt.detail;\n    const { viewportId, renderingEngineId } = eventData;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n    const representations = getSegmentationRepresentations(viewportId);\n    if (!representations?.length) {\n        return;\n    }\n    const labelmapRepresentations = representations.filter((representation) => representation.type === SegmentationRepresentations.Labelmap);\n    const actors = viewport.getActors();\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n    });\n    const labelmapActors = labelmapRepresentations\n        .flatMap((representation) => {\n        return getLabelmapActorEntries(viewportId, representation.segmentationId);\n    })\n        .filter((actor) => actor !== undefined);\n    if (!labelmapActors.length) {\n        return;\n    }\n    labelmapActors.forEach((actor) => {\n        const validActor = labelmapRepresentations.find((representation) => {\n            const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, representation.segmentationId);\n            return derivedImageIds?.includes(actor.referencedId);\n        });\n        if (!validActor) {\n            viewport.removeActors([actor.uid]);\n        }\n    });\n    labelmapRepresentations.forEach((representation) => {\n        const { segmentationId } = representation;\n        const currentImageId = viewport.getCurrentImageId();\n        const derivedImageIds = getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId);\n        if (!derivedImageIds) {\n            return;\n        }\n        const updateSegmentationActor = (derivedImageId) => {\n            const derivedImage = cache.getImage(derivedImageId);\n            if (!derivedImage) {\n                console.warn('No derived image found in the cache for segmentation representation', representation);\n                return;\n            }\n            const segmentationActorInput = actors.find((actor) => actor.referencedId === derivedImageId);\n            if (!segmentationActorInput) {\n                const { dimensions, spacing, direction } = viewport.getImageDataMetadata(derivedImage);\n                const currentImage = cache.getImage(currentImageId) ||\n                    {\n                        imageId: currentImageId,\n                    };\n                const { origin: currentOrigin } = viewport.getImageDataMetadata(currentImage);\n                const originToUse = currentOrigin;\n                const constructor = derivedImage.voxelManager.getConstructor();\n                const newPixelData = derivedImage.voxelManager.getScalarData();\n                const scalarArray = vtkDataArray.newInstance({\n                    name: 'Pixels',\n                    numberOfComponents: 1,\n                    values: new constructor(newPixelData),\n                });\n                const imageData = vtkImageData.newInstance();\n                imageData.setDimensions(dimensions[0], dimensions[1], 1);\n                imageData.setSpacing(spacing);\n                imageData.setDirection(direction);\n                imageData.setOrigin(originToUse);\n                imageData.getPointData().setScalars(scalarArray);\n                imageData.modified();\n                viewport.addImages([\n                    {\n                        imageId: derivedImageId,\n                        representationUID: `${segmentationId}-${SegmentationRepresentations.Labelmap}-${derivedImage.imageId}`,\n                        callback: ({ imageActor }) => {\n                            imageActor.getMapper().setInputData(imageData);\n                        },\n                    },\n                ]);\n                triggerSegmentationRender(viewportId);\n                return;\n            }\n            else {\n                const segmentationImageData = segmentationActorInput.actor\n                    .getMapper()\n                    .getInputData();\n                if (segmentationImageData.setDerivedImage) {\n                    segmentationImageData.setDerivedImage(derivedImage);\n                }\n                else {\n                    utilities.updateVTKImageDataWithCornerstoneImage(segmentationImageData, derivedImage);\n                }\n            }\n        };\n        derivedImageIds.forEach(updateSegmentationActor);\n        viewport.render();\n        if (evt.type === Enums.Events.IMAGE_RENDERED) {\n            viewport.element.removeEventListener(Enums.Events.IMAGE_RENDERED, _imageChangeEventListener);\n        }\n    });\n}\nexport default {\n    enable,\n    disable,\n};\n","import { triggerEvent, eventTarget, Enums, getRenderingEngines, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations, Events as csToolsEvents, } from '../../enums';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport surfaceDisplay from '../../tools/displayTools/Surface/surfaceDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport { addTool } from '../../store/addTool';\nimport { state } from '../../store/state';\nimport PlanarFreehandContourSegmentationTool from '../../tools/annotation/PlanarFreehandContourSegmentationTool';\nimport { getToolGroupForViewport } from '../../store/ToolGroupManager';\nconst renderers = {\n    [Representations.Labelmap]: labelmapDisplay,\n    [Representations.Contour]: contourDisplay,\n    [Representations.Surface]: surfaceDisplay,\n};\nconst planarContourToolName = PlanarFreehandContourSegmentationTool.toolName;\nclass SegmentationRenderingEngine {\n    constructor() {\n        this._needsRender = new Set();\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        this._getAllViewports = () => {\n            const renderingEngine = getRenderingEngines();\n            return renderingEngine.flatMap((renderingEngine) => renderingEngine.getViewports());\n        };\n        this._renderFlaggedSegmentations = () => {\n            this._throwIfDestroyed();\n            const viewportIds = Array.from(this._needsRender);\n            viewportIds.forEach((viewportId) => {\n                this._triggerRender(viewportId);\n            });\n            this._needsRender.clear();\n            this._animationFrameSet = false;\n            this._animationFrameHandle = null;\n        };\n    }\n    renderSegmentationsForViewport(viewportId) {\n        const viewportIds = viewportId\n            ? [viewportId]\n            : this._getViewportIdsForSegmentation();\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    renderSegmentation(segmentationId) {\n        const viewportIds = this._getViewportIdsForSegmentation(segmentationId);\n        this._setViewportsToBeRenderedNextFrame(viewportIds);\n    }\n    _getViewportIdsForSegmentation(segmentationId) {\n        const viewports = this._getAllViewports();\n        const viewportIds = [];\n        for (const viewport of viewports) {\n            const viewportId = viewport.id;\n            if (segmentationId) {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n            else {\n                const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n                if (segmentationRepresentations?.length > 0) {\n                    viewportIds.push(viewportId);\n                }\n            }\n        }\n        return viewportIds;\n    }\n    _throwIfDestroyed() {\n        if (this.hasBeenDestroyed) {\n            throw new Error('this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.');\n        }\n    }\n    _setViewportsToBeRenderedNextFrame(viewportIds) {\n        viewportIds.forEach((viewportId) => {\n            this._needsRender.add(viewportId);\n        });\n        this._render();\n    }\n    _render() {\n        if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n            this._animationFrameHandle = window.requestAnimationFrame(this._renderFlaggedSegmentations);\n            this._animationFrameSet = true;\n        }\n    }\n    _triggerRender(viewportId) {\n        const segmentationRepresentations = getSegmentationRepresentations(viewportId);\n        if (!segmentationRepresentations?.length) {\n            return;\n        }\n        const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n        if (!viewport) {\n            return;\n        }\n        const viewportRenderList = [];\n        const segmentationRenderList = segmentationRepresentations.map((representation) => {\n            if (representation.type === SegmentationRepresentations.Contour) {\n                this._addPlanarFreeHandToolIfAbsent(viewport);\n            }\n            const display = renderers[representation.type];\n            try {\n                const viewportId = display.render(viewport, representation);\n                viewportRenderList.push(viewportId);\n            }\n            catch (error) {\n                console.error(error);\n            }\n            return Promise.resolve({\n                segmentationId: representation.segmentationId,\n                type: representation.type,\n            });\n        });\n        Promise.allSettled(segmentationRenderList).then((results) => {\n            const segmentationDetails = results\n                .filter((r) => r.status === 'fulfilled')\n                .map((r) => r.value);\n            function onSegmentationRender(evt) {\n                const { element, viewportId } = evt.detail;\n                element.removeEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n                segmentationDetails.forEach((detail) => {\n                    const eventDetail = {\n                        viewportId,\n                        segmentationId: detail.segmentationId,\n                        type: detail.type,\n                    };\n                    triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n                        ...eventDetail,\n                    });\n                });\n            }\n            const element = viewport.element;\n            element.addEventListener(Enums.Events.IMAGE_RENDERED, onSegmentationRender);\n            viewport.render();\n        });\n    }\n    _addPlanarFreeHandToolIfAbsent(viewport) {\n        if (!(planarContourToolName in state.tools)) {\n            addTool(PlanarFreehandContourSegmentationTool);\n        }\n        const toolGroup = getToolGroupForViewport(viewport.id);\n        if (!toolGroup.hasTool(planarContourToolName)) {\n            toolGroup.addTool(planarContourToolName);\n            toolGroup.setToolPassive(planarContourToolName);\n        }\n    }\n}\nfunction triggerSegmentationRender(viewportId) {\n    segmentationRenderingEngine.renderSegmentationsForViewport(viewportId);\n}\nfunction triggerSegmentationRenderBySegmentationId(segmentationId) {\n    segmentationRenderingEngine.renderSegmentation(segmentationId);\n}\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\nexport { triggerSegmentationRender, triggerSegmentationRenderBySegmentationId, segmentationRenderingEngine, };\n","import { BaseVolumeViewport, cache, utilities as csUtils, getEnabledElementByViewportId, volumeLoader, } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\nimport vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport { triggerSegmentationModified, triggerSegmentationRemoved, triggerSegmentationRepresentationModified, triggerSegmentationRepresentationRemoved, } from './triggerSegmentationEvents';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { triggerSegmentationAdded } from './events/triggerSegmentationAdded';\nconst initialDefaultState = {\n    colorLUT: [],\n    segmentations: [],\n    viewportSegRepresentations: {},\n};\nexport default class SegmentationStateManager {\n    constructor(uid) {\n        this._stackLabelmapImageIdReferenceMap = new Map();\n        this._labelmapImageIdReferenceMap = new Map();\n        uid ||= csUtils.uuidv4();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n        this.uid = uid;\n    }\n    getState() {\n        return this.state;\n    }\n    updateState(updater) {\n        const newState = csUtils.deepClone(this.state);\n        updater(newState);\n        this.state = Object.freeze(newState);\n    }\n    getColorLUT(lutIndex) {\n        return this.state.colorLUT[lutIndex];\n    }\n    getNextColorLUTIndex() {\n        return this.state.colorLUT.length;\n    }\n    resetState() {\n        this._stackLabelmapImageIdReferenceMap.clear();\n        this._labelmapImageIdReferenceMap.clear();\n        this.state = Object.freeze(csUtils.deepClone(initialDefaultState));\n    }\n    getSegmentation(segmentationId) {\n        return this.state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n    }\n    updateSegmentation(segmentationId, payload) {\n        this.updateState((draftState) => {\n            const segmentation = draftState.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n            if (!segmentation) {\n                console.warn(`Segmentation with id ${segmentationId} not found. Update aborted.`);\n                return;\n            }\n            Object.assign(segmentation, payload);\n        });\n        triggerSegmentationModified(segmentationId);\n    }\n    addSegmentation(segmentation) {\n        if (this.getSegmentation(segmentation.segmentationId)) {\n            throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);\n        }\n        this.updateState((state) => {\n            const newSegmentation = csUtils.deepClone(segmentation);\n            if (newSegmentation.representationData.Labelmap &&\n                'volumeId' in newSegmentation.representationData.Labelmap &&\n                !('imageIds' in newSegmentation.representationData.Labelmap)) {\n                const imageIds = this.getLabelmapImageIds(newSegmentation.representationData);\n                newSegmentation.representationData\n                    .Labelmap.imageIds = imageIds;\n            }\n            state.segmentations.push(newSegmentation);\n        });\n        triggerSegmentationAdded(segmentation.segmentationId);\n    }\n    removeSegmentation(segmentationId) {\n        this.updateState((state) => {\n            const filteredSegmentations = state.segmentations.filter((segmentation) => segmentation.segmentationId !== segmentationId);\n            state.segmentations.splice(0, state.segmentations.length, ...filteredSegmentations);\n        });\n        triggerSegmentationRemoved(segmentationId);\n    }\n    addSegmentationRepresentation(viewportId, segmentationId, type, renderingConfig) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const existingRepresentations = this.getSegmentationRepresentations(viewportId, {\n            type: type,\n            segmentationId,\n        });\n        if (existingRepresentations.length > 0) {\n            console.debug('A segmentation representation of type', type, 'already exists in viewport', viewportId, 'for segmentation', segmentationId);\n            return;\n        }\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                state.viewportSegRepresentations[viewportId] = [];\n                segmentationStyle.setRenderInactiveSegmentations(viewportId, true);\n            }\n            if (type !== SegmentationRepresentations.Labelmap) {\n                this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig);\n            }\n            else {\n                this.addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig);\n            }\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId, type);\n    }\n    addDefaultSegmentationRepresentation(state, viewportId, segmentationId, type, renderingConfig) {\n        const segmentation = state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const segmentReps = {};\n        Object.keys(segmentation.segments).forEach((segmentIndex) => {\n            segmentReps[Number(segmentIndex)] = {\n                visible: true,\n            };\n        });\n        state.viewportSegRepresentations[viewportId].push({\n            segmentationId,\n            type,\n            active: true,\n            visible: true,\n            colorLUTIndex: renderingConfig?.colorLUTIndex || 0,\n            segments: segmentReps,\n            config: {\n                ...getDefaultRenderingConfig(type),\n                ...renderingConfig,\n            },\n        });\n        this._setActiveSegmentation(state, viewportId, segmentationId);\n    }\n    addLabelmapRepresentation(state, viewportId, segmentationId, renderingConfig = getDefaultRenderingConfig(SegmentationRepresentations.Labelmap)) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n        }\n        this.processLabelmapRepresentationAddition(viewportId, segmentationId);\n        this.addDefaultSegmentationRepresentation(state, viewportId, segmentationId, SegmentationRepresentations.Labelmap, renderingConfig);\n    }\n    async processLabelmapRepresentationAddition(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        const volumeViewport = enabledElement.viewport instanceof BaseVolumeViewport;\n        const { representationData } = segmentation;\n        const isBaseVolumeSegmentation = 'volumeId' in representationData.Labelmap;\n        const viewport = enabledElement.viewport;\n        if (!volumeViewport && !isBaseVolumeSegmentation) {\n            !this.updateLabelmapSegmentationImageReferences(viewportId, segmentation.segmentationId);\n        }\n    }\n    _updateLabelmapSegmentationReferences(segmentationId, viewport, labelmapImageIds, updateCallback) {\n        const referenceImageId = viewport.getCurrentImageId();\n        let viewableLabelmapImageIdFound = false;\n        for (const labelmapImageId of labelmapImageIds) {\n            const viewableImageId = viewport.isReferenceViewable({ referencedImageId: labelmapImageId }, { asOverlay: true });\n            if (viewableImageId) {\n                viewableLabelmapImageIdFound = true;\n                this._stackLabelmapImageIdReferenceMap\n                    .get(segmentationId)\n                    .set(referenceImageId, labelmapImageId);\n                this._updateLabelmapImageIdReferenceMap({\n                    segmentationId,\n                    referenceImageId,\n                    labelmapImageId,\n                });\n            }\n        }\n        if (updateCallback) {\n            updateCallback(viewport, segmentationId, labelmapImageIds);\n        }\n        return viewableLabelmapImageIdFound\n            ? this._stackLabelmapImageIdReferenceMap\n                .get(segmentationId)\n                .get(referenceImageId)\n            : undefined;\n    }\n    updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        return this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, null);\n    }\n    _updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            this._stackLabelmapImageIdReferenceMap.set(segmentationId, new Map());\n        }\n        const { representationData } = segmentation;\n        if (!representationData.Labelmap) {\n            return;\n        }\n        const labelmapImageIds = this.getLabelmapImageIds(representationData);\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        const stackViewport = enabledElement.viewport;\n        this._updateLabelmapSegmentationReferences(segmentationId, stackViewport, labelmapImageIds, (stackViewport, segmentationId, labelmapImageIds) => {\n            const imageIds = stackViewport.getImageIds();\n            imageIds.forEach((referenceImageId, index) => {\n                for (const labelmapImageId of labelmapImageIds) {\n                    const viewableImageId = stackViewport.isReferenceViewable({ referencedImageId: labelmapImageId, sliceIndex: index }, { asOverlay: true, withNavigation: true });\n                    if (viewableImageId) {\n                        this._stackLabelmapImageIdReferenceMap\n                            .get(segmentationId)\n                            .set(referenceImageId, labelmapImageId);\n                        this._updateLabelmapImageIdReferenceMap({\n                            segmentationId,\n                            referenceImageId,\n                            labelmapImageId,\n                        });\n                    }\n                }\n            });\n        });\n    }\n    getLabelmapImageIds(representationData) {\n        const labelmapData = representationData.Labelmap;\n        let labelmapImageIds;\n        if (labelmapData.imageIds) {\n            labelmapImageIds = labelmapData\n                .imageIds;\n        }\n        else if (!labelmapImageIds &&\n            labelmapData.volumeId) {\n            const volumeId = labelmapData\n                .volumeId;\n            const volume = cache.getVolume(volumeId);\n            labelmapImageIds = volume.imageIds;\n        }\n        return labelmapImageIds;\n    }\n    getLabelmapImageIdsForImageId(imageId, segmentationId) {\n        const key = this._generateMapKey({\n            segmentationId,\n            referenceImageId: imageId,\n        });\n        return this._labelmapImageIdReferenceMap.get(key);\n    }\n    getCurrentLabelmapImageIdsForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const referenceImageId = stackViewport.getCurrentImageId();\n        return this.getLabelmapImageIdsForImageId(referenceImageId, segmentationId);\n    }\n    getCurrentLabelmapImageIdForViewport(viewportId, segmentationId) {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        if (!this._stackLabelmapImageIdReferenceMap.has(segmentationId)) {\n            return;\n        }\n        const stackViewport = enabledElement.viewport;\n        const currentImageId = stackViewport.getCurrentImageId();\n        const imageIdReferenceMap = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIdReferenceMap.get(currentImageId);\n    }\n    getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n        const segmentation = this.getSegmentation(segmentationId);\n        if (!segmentation) {\n            return [];\n        }\n        this._updateAllLabelmapSegmentationImageReferences(viewportId, segmentationId);\n        const { viewport } = getEnabledElementByViewportId(viewportId);\n        const imageIds = viewport.getImageIds();\n        const associatedReferenceImageAndLabelmapImageIds = this._stackLabelmapImageIdReferenceMap.get(segmentationId);\n        return imageIds.map((imageId) => {\n            return associatedReferenceImageAndLabelmapImageIds.get(imageId);\n        });\n    }\n    removeSegmentationRepresentationsInternal(viewportId, specifier) {\n        const removedRepresentations = [];\n        this.updateState((state) => {\n            if (!state.viewportSegRepresentations[viewportId]) {\n                return;\n            }\n            const currentRepresentations = state.viewportSegRepresentations[viewportId];\n            let activeRepresentationRemoved = false;\n            if (!specifier ||\n                Object.values(specifier).every((value) => value === undefined)) {\n                removedRepresentations.push(...currentRepresentations);\n                delete state.viewportSegRepresentations[viewportId];\n            }\n            else {\n                const { segmentationId, type } = specifier;\n                state.viewportSegRepresentations[viewportId] =\n                    currentRepresentations.filter((representation) => {\n                        const shouldRemove = (segmentationId &&\n                            type &&\n                            representation.segmentationId === segmentationId &&\n                            representation.type === type) ||\n                            (segmentationId &&\n                                !type &&\n                                representation.segmentationId === segmentationId) ||\n                            (!segmentationId && type && representation.type === type);\n                        if (shouldRemove) {\n                            removedRepresentations.push(representation);\n                            if (representation.active) {\n                                activeRepresentationRemoved = true;\n                            }\n                        }\n                        return !shouldRemove;\n                    });\n                if (state.viewportSegRepresentations[viewportId].length === 0) {\n                    delete state.viewportSegRepresentations[viewportId];\n                }\n                else if (activeRepresentationRemoved) {\n                    state.viewportSegRepresentations[viewportId][0].active = true;\n                }\n            }\n        });\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentations(viewportId, specifier) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        removedRepresentations.forEach((representation) => {\n            triggerSegmentationRepresentationRemoved(viewportId, representation.segmentationId, representation.type);\n        });\n        const remainingRepresentations = this.getSegmentationRepresentations(viewportId);\n        if (remainingRepresentations.length > 0 &&\n            remainingRepresentations[0].active) {\n            triggerSegmentationRepresentationModified(viewportId, remainingRepresentations[0].segmentationId, remainingRepresentations[0].type);\n        }\n        return removedRepresentations;\n    }\n    removeSegmentationRepresentation(viewportId, specifier, suppressEvent) {\n        const removedRepresentations = this.removeSegmentationRepresentationsInternal(viewportId, specifier);\n        if (!suppressEvent) {\n            removedRepresentations.forEach(({ segmentationId, type }) => {\n                triggerSegmentationRepresentationRemoved(viewportId, segmentationId, type);\n            });\n        }\n        return removedRepresentations;\n    }\n    _updateLabelmapImageIdReferenceMap({ segmentationId, referenceImageId, labelmapImageId, }) {\n        const key = this._generateMapKey({ segmentationId, referenceImageId });\n        if (!this._labelmapImageIdReferenceMap.has(key)) {\n            this._labelmapImageIdReferenceMap.set(key, [labelmapImageId]);\n            return;\n        }\n        const currentValues = this._labelmapImageIdReferenceMap.get(key);\n        const newValues = Array.from(new Set([...currentValues, labelmapImageId]));\n        this._labelmapImageIdReferenceMap.set(key, newValues);\n    }\n    _setActiveSegmentation(state, viewportId, segmentationId) {\n        const viewport = state.viewportSegRepresentations[viewportId];\n        if (!viewport) {\n            return;\n        }\n        viewport.forEach((value) => {\n            value.active = value.segmentationId === segmentationId;\n        });\n    }\n    setActiveSegmentation(viewportId, segmentationId) {\n        this.updateState((state) => {\n            const viewport = state.viewportSegRepresentations[viewportId];\n            if (!viewport) {\n                return;\n            }\n            viewport.forEach((value) => {\n                value.active = value.segmentationId === segmentationId;\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, segmentationId);\n    }\n    getActiveSegmentation(viewportId) {\n        if (!this.state.viewportSegRepresentations[viewportId]) {\n            return;\n        }\n        const activeSegRep = this.state.viewportSegRepresentations[viewportId].find((segRep) => segRep.active);\n        if (!activeSegRep) {\n            return;\n        }\n        return this.getSegmentation(activeSegRep.segmentationId);\n    }\n    getSegmentationRepresentations(viewportId, specifier = {}) {\n        const viewportRepresentations = this.state.viewportSegRepresentations[viewportId];\n        if (!viewportRepresentations) {\n            return [];\n        }\n        if (!specifier.type && !specifier.segmentationId) {\n            return viewportRepresentations;\n        }\n        return viewportRepresentations.filter((representation) => {\n            const typeMatch = specifier.type\n                ? representation.type === specifier.type\n                : true;\n            const idMatch = specifier.segmentationId\n                ? representation.segmentationId === specifier.segmentationId\n                : true;\n            return typeMatch && idMatch;\n        });\n    }\n    getSegmentationRepresentation(viewportId, specifier) {\n        return this.getSegmentationRepresentations(viewportId, specifier)[0];\n    }\n    getSegmentationRepresentationVisibility(viewportId, specifier) {\n        const viewportRepresentation = this.getSegmentationRepresentation(viewportId, specifier);\n        return viewportRepresentation?.visible;\n    }\n    setSegmentationRepresentationVisibility(viewportId, specifier, visible) {\n        this.updateState((state) => {\n            const viewportRepresentations = this.getSegmentationRepresentations(viewportId, specifier);\n            if (!viewportRepresentations) {\n                return;\n            }\n            viewportRepresentations.forEach((representation) => {\n                representation.visible = visible;\n                Object.entries(representation.segments).forEach(([segmentIndex, segment]) => {\n                    segment.visible = visible;\n                });\n            });\n        });\n        triggerSegmentationRepresentationModified(viewportId, specifier.segmentationId, specifier.type);\n    }\n    addColorLUT(colorLUT, lutIndex) {\n        this.updateState((state) => {\n            if (state.colorLUT[lutIndex]) {\n                console.warn('Color LUT table already exists, overwriting');\n            }\n            state.colorLUT[lutIndex] = csUtils.deepClone(colorLUT);\n        });\n    }\n    removeColorLUT(colorLUTIndex) {\n        this.updateState((state) => {\n            delete state.colorLUT[colorLUTIndex];\n        });\n    }\n    _getStackIdForImageIds(imageIds) {\n        return imageIds\n            .map((imageId) => imageId.slice(-Math.round(imageId.length * 0.15)))\n            .join('_');\n    }\n    getAllViewportSegmentationRepresentations() {\n        return Object.entries(this.state.viewportSegRepresentations).map(([viewportId, representations]) => ({\n            viewportId,\n            representations,\n        }));\n    }\n    getSegmentationRepresentationsBySegmentationId(segmentationId) {\n        const result = [];\n        Object.entries(this.state.viewportSegRepresentations).forEach(([viewportId, viewportReps]) => {\n            const filteredReps = viewportReps.filter((representation) => representation.segmentationId === segmentationId);\n            if (filteredReps.length > 0) {\n                result.push({ viewportId, representations: filteredReps });\n            }\n        });\n        return result;\n    }\n    _generateMapKey({ segmentationId, referenceImageId }) {\n        return `${segmentationId}-${referenceImageId}`;\n    }\n}\nasync function internalComputeVolumeLabelmapFromStack({ imageIds, options, }) {\n    const segmentationImageIds = imageIds;\n    const volumeId = options?.volumeId || csUtils.uuidv4();\n    await volumeLoader.createAndCacheVolumeFromImages(volumeId, segmentationImageIds);\n    return { volumeId };\n}\nasync function internalConvertStackToVolumeLabelmap({ segmentationId, options, }) {\n    const segmentation = defaultSegmentationStateManager.getSegmentation(segmentationId);\n    const data = segmentation.representationData\n        .Labelmap;\n    const { volumeId } = await internalComputeVolumeLabelmapFromStack({\n        imageIds: data.imageIds,\n        options,\n    });\n    segmentation.representationData.Labelmap.volumeId = volumeId;\n}\nfunction getDefaultRenderingConfig(type) {\n    const cfun = vtkColorTransferFunction.newInstance();\n    const ofun = vtkPiecewiseFunction.newInstance();\n    ofun.addPoint(0, 0);\n    if (type === SegmentationRepresentations.Labelmap) {\n        return {\n            cfun,\n            ofun,\n        };\n    }\n    else {\n        return {};\n    }\n}\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { internalConvertStackToVolumeLabelmap, internalComputeVolumeLabelmapFromStack, defaultSegmentationStateManager, };\n","import getDefaultContourConfig from '../../tools/displayTools/Contour/contourConfig';\nimport getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport * as Enums from '../../enums';\nimport { utilities } from '@cornerstonejs/core';\nclass SegmentationStyle {\n    constructor() {\n        this.config = {\n            global: {},\n            segmentations: {},\n            viewportsStyle: {},\n        };\n    }\n    setStyle(specifier, styles) {\n        const { viewportId, segmentationId, type, segmentIndex } = specifier;\n        const currentStyles = this.getStyle(specifier);\n        let updatedStyles;\n        if (!viewportId && !segmentationId) {\n            updatedStyles = {\n                ...currentStyles,\n                ...styles,\n            };\n        }\n        else {\n            updatedStyles = this.copyActiveToInactiveIfNotProvided({\n                ...currentStyles,\n                ...styles,\n            }, type);\n        }\n        if (!type) {\n            throw new Error('Type is required to set a style');\n        }\n        if (viewportId) {\n            if (!this.config.viewportsStyle[viewportId]) {\n                this.config.viewportsStyle[viewportId] = {\n                    renderInactiveSegmentations: false,\n                    representations: {},\n                };\n            }\n            const representations = this.config.viewportsStyle[viewportId].representations;\n            if (segmentationId) {\n                if (!representations[segmentationId]) {\n                    representations[segmentationId] = {};\n                }\n                if (!representations[segmentationId][type]) {\n                    representations[segmentationId][type] = {};\n                }\n                const repConfig = representations[segmentationId][type];\n                if (segmentIndex !== undefined) {\n                    if (!repConfig.perSegment) {\n                        repConfig.perSegment = {};\n                    }\n                    repConfig.perSegment[segmentIndex] = updatedStyles;\n                }\n                else {\n                    repConfig.allSegments = updatedStyles;\n                }\n            }\n            else {\n                const ALL_SEGMENTATIONS_KEY = '__allSegmentations__';\n                if (!representations[ALL_SEGMENTATIONS_KEY]) {\n                    representations[ALL_SEGMENTATIONS_KEY] = {};\n                }\n                if (!representations[ALL_SEGMENTATIONS_KEY][type]) {\n                    representations[ALL_SEGMENTATIONS_KEY][type] = {};\n                }\n                representations[ALL_SEGMENTATIONS_KEY][type].allSegments =\n                    updatedStyles;\n            }\n        }\n        else if (segmentationId) {\n            if (!this.config.segmentations[segmentationId]) {\n                this.config.segmentations[segmentationId] = {};\n            }\n            if (!this.config.segmentations[segmentationId][type]) {\n                this.config.segmentations[segmentationId][type] = {};\n            }\n            const segConfig = this.config.segmentations[segmentationId][type];\n            if (segmentIndex !== undefined) {\n                if (!segConfig.perSegment) {\n                    segConfig.perSegment = {};\n                }\n                segConfig.perSegment[segmentIndex] = updatedStyles;\n            }\n            else {\n                segConfig.allSegments = updatedStyles;\n            }\n        }\n        else {\n            this.config.global[type] = updatedStyles;\n        }\n    }\n    copyActiveToInactiveIfNotProvided(styles, type) {\n        const processedStyles = { ...styles };\n        if (type === Enums.SegmentationRepresentations.Labelmap) {\n            const labelmapStyles = processedStyles;\n            labelmapStyles.renderOutlineInactive ??= labelmapStyles.renderOutline;\n            labelmapStyles.outlineWidthInactive ??= labelmapStyles.outlineWidth;\n            labelmapStyles.renderFillInactive ??= labelmapStyles.renderFill;\n            labelmapStyles.fillAlphaInactive ??= labelmapStyles.fillAlpha;\n            labelmapStyles.outlineOpacityInactive ??= labelmapStyles.outlineOpacity;\n        }\n        else if (type === Enums.SegmentationRepresentations.Contour) {\n            const contourStyles = processedStyles;\n            contourStyles.outlineWidthInactive ??= contourStyles.outlineWidth;\n            contourStyles.outlineOpacityInactive ??= contourStyles.outlineOpacity;\n            contourStyles.outlineDashInactive ??= contourStyles.outlineDash;\n            contourStyles.renderOutlineInactive ??= contourStyles.renderOutline;\n            contourStyles.renderFillInactive ??= contourStyles.renderFill;\n            contourStyles.fillAlphaInactive ??= contourStyles.fillAlpha;\n        }\n        return processedStyles;\n    }\n    getStyle(specifier) {\n        const { viewportId, segmentationId, type, segmentIndex } = specifier;\n        let combinedStyle = this.getDefaultStyle(type);\n        let renderInactiveSegmentations = false;\n        if (this.config.global[type]) {\n            combinedStyle = {\n                ...combinedStyle,\n                ...this.config.global[type],\n            };\n        }\n        if (this.config.segmentations[segmentationId]?.[type]) {\n            combinedStyle = {\n                ...combinedStyle,\n                ...this.config.segmentations[segmentationId][type].allSegments,\n            };\n            if (segmentIndex !== undefined &&\n                this.config.segmentations[segmentationId][type].perSegment?.[segmentIndex]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.segmentations[segmentationId][type].perSegment[segmentIndex],\n                };\n            }\n        }\n        if (viewportId && this.config.viewportsStyle[viewportId]) {\n            renderInactiveSegmentations =\n                this.config.viewportsStyle[viewportId].renderInactiveSegmentations;\n            const allSegmentationsKey = '__allSegmentations__';\n            if (this.config.viewportsStyle[viewportId].representations[allSegmentationsKey]?.[type]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.viewportsStyle[viewportId].representations[allSegmentationsKey][type].allSegments,\n                };\n            }\n            if (segmentationId &&\n                this.config.viewportsStyle[viewportId].representations[segmentationId]?.[type]) {\n                combinedStyle = {\n                    ...combinedStyle,\n                    ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].allSegments,\n                };\n                if (segmentIndex !== undefined &&\n                    this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment?.[segmentIndex]) {\n                    combinedStyle = {\n                        ...combinedStyle,\n                        ...this.config.viewportsStyle[viewportId].representations[segmentationId][type].perSegment[segmentIndex],\n                    };\n                }\n            }\n        }\n        return combinedStyle;\n    }\n    getRenderInactiveSegmentations(viewportId) {\n        return this.config.viewportsStyle[viewportId]?.renderInactiveSegmentations;\n    }\n    setRenderInactiveSegmentations(viewportId, renderInactiveSegmentations) {\n        if (!this.config.viewportsStyle[viewportId]) {\n            this.config.viewportsStyle[viewportId] = {\n                renderInactiveSegmentations: false,\n                representations: {},\n            };\n        }\n        this.config.viewportsStyle[viewportId].renderInactiveSegmentations =\n            renderInactiveSegmentations;\n    }\n    getDefaultStyle(type) {\n        switch (type) {\n            case Enums.SegmentationRepresentations.Labelmap:\n                return getDefaultLabelmapConfig();\n            case Enums.SegmentationRepresentations.Contour:\n                return getDefaultContourConfig();\n            case Enums.SegmentationRepresentations.Surface:\n                return {};\n            default:\n                throw new Error(`Unknown representation type: ${type}`);\n        }\n    }\n    clearSegmentationStyle(segmentationId) {\n        if (this.config.segmentations[segmentationId]) {\n            delete this.config.segmentations[segmentationId];\n        }\n    }\n    clearAllSegmentationStyles() {\n        this.config.segmentations = {};\n    }\n    clearViewportStyle(viewportId) {\n        if (this.config.viewportsStyle[viewportId]) {\n            delete this.config.viewportsStyle[viewportId];\n        }\n    }\n    clearAllViewportStyles() {\n        for (const viewportId in this.config.viewportsStyle) {\n            const viewportStyle = this.config.viewportsStyle[viewportId];\n            const renderInactiveSegmentations = viewportStyle.renderInactiveSegmentations;\n            this.config.viewportsStyle[viewportId] = {\n                renderInactiveSegmentations,\n                representations: {},\n            };\n        }\n    }\n    resetToGlobalStyle() {\n        this.clearAllSegmentationStyles();\n        this.clearAllViewportStyles();\n    }\n    hasCustomStyle(specifier) {\n        const { type } = specifier;\n        const style = this.getStyle(specifier);\n        const defaultStyle = this.getDefaultStyle(type);\n        return !utilities.deepEqual(style, defaultStyle);\n    }\n}\nconst segmentationStyle = new SegmentationStyle();\nexport { segmentationStyle };\n","import { getActiveSegmentation as _getActiveSegmentation } from './getActiveSegmentation';\nimport { setActiveSegmentation as _setActiveSegmentation } from './setActiveSegmentation';\nfunction getActiveSegmentation(viewportId) {\n    return _getActiveSegmentation(viewportId);\n}\nfunction setActiveSegmentation(viewportId, segmentationId) {\n    _setActiveSegmentation(viewportId, segmentationId);\n}\nexport { getActiveSegmentation, setActiveSegmentation, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function setActiveSegmentation(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.setActiveSegmentation(viewportId, segmentationId);\n}\n","import { utilities } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nexport function addColorLUT(colorLUT, index) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const indexToUse = index ?? getNextColorLUTIndex();\n    let colorLUTToUse = [...colorLUT];\n    if (!utilities.isEqual(colorLUTToUse[0], [0, 0, 0, 0])) {\n        console.warn('addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it');\n        colorLUTToUse = [[0, 0, 0, 0], ...colorLUTToUse];\n    }\n    colorLUTToUse = colorLUTToUse.map((color) => {\n        if (color.length === 3) {\n            return [color[0], color[1], color[2], 255];\n        }\n        return color;\n    });\n    if (colorLUTToUse.length < 255) {\n        const missingColorLUTs = CORNERSTONE_COLOR_LUT.slice(colorLUTToUse.length);\n        colorLUTToUse = [...colorLUTToUse, ...missingColorLUTs];\n    }\n    segmentationStateManager.addColorLUT(colorLUTToUse, indexToUse);\n    return indexToUse;\n}\n","import { SegmentationRepresentations } from '../../enums';\nimport { internalAddSegmentationRepresentation } from './internalAddSegmentationRepresentation';\nexport function addSegmentationRepresentations(viewportId, segmentationInputArray) {\n    segmentationInputArray.map((segmentationInput) => {\n        return internalAddSegmentationRepresentation(viewportId, segmentationInput);\n    });\n}\nfunction addContourRepresentationToViewport(viewportId, contourInputArray) {\n    return addSegmentationRepresentations(viewportId, contourInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Contour,\n    })));\n}\nfunction addContourRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addContourRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nfunction addLabelmapRepresentationToViewport(viewportId, labelmapInputArray) {\n    return addSegmentationRepresentations(viewportId, labelmapInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Labelmap,\n    })));\n}\nfunction addLabelmapRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addLabelmapRepresentationToViewport(viewportId, inputArray.map((input) => ({\n            ...input,\n            type: SegmentationRepresentations.Labelmap,\n        })));\n    }\n}\nfunction addSurfaceRepresentationToViewport(viewportId, surfaceInputArray) {\n    return addSegmentationRepresentations(viewportId, surfaceInputArray.map((input) => ({\n        ...input,\n        type: SegmentationRepresentations.Surface,\n    })));\n}\nfunction addSurfaceRepresentationToViewportMap(viewportInputMap) {\n    const results = {};\n    for (const [viewportId, inputArray] of Object.entries(viewportInputMap)) {\n        results[viewportId] = addSurfaceRepresentationToViewport(viewportId, inputArray);\n    }\n    return results;\n}\nexport { addContourRepresentationToViewport, addLabelmapRepresentationToViewport, addSurfaceRepresentationToViewport, addContourRepresentationToViewportMap, addLabelmapRepresentationToViewportMap, addSurfaceRepresentationToViewportMap, };\n","import { SegmentationRepresentations } from '../../../enums';\nimport { cache } from '@cornerstonejs/core';\nfunction normalizeSegmentationInput(segmentationInput) {\n    const { segmentationId, representation, config } = segmentationInput;\n    const { type, data: inputData } = representation;\n    const data = inputData ? { ...inputData } : {};\n    if (!data) {\n        throw new Error('Segmentation representation data may not be undefined');\n    }\n    if (type === SegmentationRepresentations.Contour) {\n        normalizeContourData(data);\n    }\n    const normalizedSegments = normalizeSegments(config?.segments, type, data);\n    delete config?.segments;\n    return {\n        segmentationId,\n        label: config?.label ?? null,\n        cachedStats: config?.cachedStats ?? {},\n        segments: normalizedSegments,\n        representationData: {\n            [type]: {\n                ...data,\n            },\n        },\n    };\n}\nfunction normalizeContourData(contourData) {\n    contourData.geometryIds = contourData.geometryIds ?? [];\n    contourData.annotationUIDsMap = contourData.annotationUIDsMap ?? new Map();\n}\nfunction normalizeSegments(segmentsConfig, type, data) {\n    const normalizedSegments = {};\n    if (segmentsConfig) {\n        Object.entries(segmentsConfig).forEach(([segmentIndex, segment]) => {\n            const { label, locked, cachedStats, active, ...rest } = segment;\n            const normalizedSegment = {\n                segmentIndex: Number(segmentIndex),\n                label: label ?? `Segment ${segmentIndex}`,\n                locked: locked ?? false,\n                cachedStats: cachedStats ?? {},\n                active: active ?? false,\n                ...rest,\n            };\n            normalizedSegments[segmentIndex] = normalizedSegment;\n        });\n    }\n    else if (type === SegmentationRepresentations.Surface) {\n        normalizeSurfaceSegments(normalizedSegments, data);\n    }\n    else {\n        normalizedSegments[1] = createDefaultSegment();\n    }\n    return normalizedSegments;\n}\nfunction normalizeSurfaceSegments(normalizedSegments, surfaceData) {\n    const { geometryIds } = surfaceData;\n    geometryIds?.forEach((geometryId) => {\n        const geometry = cache.getGeometry(geometryId);\n        if (geometry?.data) {\n            const { segmentIndex } = geometry.data;\n            normalizedSegments[segmentIndex] = { segmentIndex };\n        }\n    });\n}\nfunction createDefaultSegment() {\n    return {\n        segmentIndex: 1,\n        label: 'Segment 1',\n        locked: false,\n        cachedStats: {},\n        active: true,\n    };\n}\nexport default normalizeSegmentationInput;\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\nexport function addSegmentations(segmentationInputArray, suppressEvents) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationInputArray.forEach((segmentationInput) => {\n        const segmentation = normalizeSegmentationInput(segmentationInput);\n        segmentationStateManager.addSegmentation(segmentation);\n        if (!suppressEvents) {\n            triggerSegmentationModified(segmentation.segmentationId);\n        }\n    });\n}\nexport default addSegmentations;\n","import { addColorLUT as _addColorLUT } from '../addColorLUT';\nimport { getColorLUT as _getColorLUT } from '../getColorLUT';\nimport { getSegmentationRepresentations } from '../getSegmentationRepresentation';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction addColorLUT(colorLUT, colorLUTIndex) {\n    if (!colorLUT) {\n        throw new Error('addColorLUT: colorLUT is required');\n    }\n    return _addColorLUT(colorLUT, colorLUTIndex);\n}\nfunction setColorLUT(viewportId, segmentationId, colorLUTsIndex) {\n    if (!_getColorLUT(colorLUTsIndex)) {\n        throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTsIndex}`);\n    }\n    const segmentationRepresentations = getSegmentationRepresentations(viewportId, { segmentationId });\n    if (!segmentationRepresentations) {\n        throw new Error(`viewport specific state for viewport ${viewportId} does not exist`);\n    }\n    segmentationRepresentations.forEach((segmentationRepresentation) => {\n        segmentationRepresentation.colorLUTIndex = colorLUTsIndex;\n    });\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nfunction getSegmentIndexColor(viewportId, segmentationId, segmentIndex) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n    });\n    if (!representations || representations.length === 0) {\n        return null;\n    }\n    const representation = representations[0];\n    const { colorLUTIndex } = representation;\n    const colorLUT = _getColorLUT(colorLUTIndex);\n    let colorValue = colorLUT[segmentIndex];\n    if (!colorValue) {\n        if (typeof segmentIndex !== 'number') {\n            console.warn(`Can't create colour for LUT index ${segmentIndex}`);\n            return null;\n        }\n        colorValue = colorLUT[segmentIndex] = [0, 0, 0, 0];\n    }\n    return colorValue;\n}\nfunction setSegmentIndexColor(viewportId, segmentationId, segmentIndex, color) {\n    const colorReference = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n    for (let i = 0; i < color.length; i++) {\n        colorReference[i] = color[i];\n    }\n    triggerSegmentationRepresentationModified(viewportId, segmentationId);\n}\nexport { getSegmentIndexColor, addColorLUT, setColorLUT, setSegmentIndexColor };\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { Events } from '../../../enums';\nimport { setSegmentationDirty } from '../../../utilities/segmentation/utilities';\nexport function triggerSegmentationDataModified(segmentationId, modifiedSlicesToUse, segmentIndex) {\n    const eventDetail = {\n        segmentationId,\n        modifiedSlicesToUse,\n        segmentIndex,\n    };\n    setSegmentationDirty(segmentationId);\n    triggerEvent(eventTarget, Events.SEGMENTATION_DATA_MODIFIED, eventDetail);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getActiveSegmentation(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getActiveSegmentation(viewportId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getNextColorLUTIndex() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getNextColorLUTIndex();\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentations(viewportId, specifier = {}) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n}\nexport function getSegmentationRepresentation(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    if (!specifier.segmentationId || !specifier.type) {\n        throw new Error('getSegmentationRepresentation: No segmentationId or type provided, you need to provide at least one of them');\n    }\n    const representations = segmentationStateManager.getSegmentationRepresentations(viewportId, specifier);\n    return representations?.[0];\n}\nexport function getSegmentationRepresentationsBySegmentationId(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationsBySegmentationId(segmentationId);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentationRepresentationVisibility(viewportId, specifier) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getSegmentationRepresentationVisibility(viewportId, specifier);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    return state.segmentations;\n}\n","import { getSegmentation } from './getSegmentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getViewportSegmentations(viewportId, type) {\n    const viewportRepresentations = getViewportSegmentationRepresentations(viewportId);\n    const segmentations = viewportRepresentations.map((representation) => {\n        if (type && representation.type === type) {\n            return getSegmentation(representation.segmentationId);\n        }\n        return getSegmentation(representation.segmentationId);\n    });\n    const filteredSegmentations = segmentations.filter((segmentation) => segmentation !== undefined);\n    return filteredSegmentations;\n}\nexport function getViewportSegmentationRepresentations(viewportId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const state = segmentationStateManager.getState();\n    const viewportRepresentations = state.viewportSegRepresentations[viewportId];\n    return viewportRepresentations;\n}\n","import { cache } from '@cornerstonejs/core';\nimport { getSegmentation } from '../getSegmentation';\nimport { updateStackSegmentationState } from '../helpers/updateStackSegmentationState';\nexport async function computeStackLabelmapFromVolume({ volumeId, }) {\n    const segmentationVolume = cache.getVolume(volumeId);\n    return { imageIds: segmentationVolume.imageIds };\n}\nexport function convertVolumeToStackLabelmap({ segmentationId, options, }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        return;\n    }\n    const { volumeId } = segmentation.representationData\n        .Labelmap;\n    const segmentationVolume = cache.getVolume(volumeId);\n    return updateStackSegmentationState({\n        segmentationId,\n        viewportId: options.viewportId,\n        imageIds: segmentationVolume.imageIds,\n        options,\n    });\n}\n","import { internalComputeVolumeLabelmapFromStack } from '../SegmentationStateManager';\nexport async function computeVolumeLabelmapFromStack(args) {\n    return internalComputeVolumeLabelmapFromStack(args);\n}\n","import { removeContourRepresentation, removeLabelmapRepresentation, removeSegmentationRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, } from './addSegmentationRepresentationsToViewport';\nimport { addSegmentations } from './addSegmentations';\nimport addRepresentationData from './internalAddRepresentationData';\nimport { updateSegmentations } from './updateSegmentations';\nimport * as activeSegmentation from './activeSegmentation';\nimport * as segmentLocking from './segmentLocking';\nimport * as state from './segmentationState';\nimport * as config from './config';\nimport * as segmentIndex from './segmentIndex';\nimport * as triggerSegmentationEvents from './triggerSegmentationEvents';\nimport * as utilities from './utilities';\nimport { convertStackToVolumeLabelmap } from './helpers/convertStackToVolumeLabelmap';\nimport { computeVolumeLabelmapFromStack } from './helpers/computeVolumeLabelmapFromStack';\nimport { clearSegmentValue } from './helpers/clearSegmentValue';\nimport { convertVolumeToStackLabelmap } from './helpers/computeStackLabelmapFromVolume';\nimport { removeSegment } from './removeSegment';\nimport { getLabelmapImageIds } from './getLabelmapImageIds';\nimport * as strategies from './../../tools/segmentation/strategies';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { segmentationStyle } from './SegmentationStyle';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, } from './getCurrentLabelmapImageIdForViewport';\nimport { getActiveSegmentation } from './getActiveSegmentation';\nconst helpers = {\n    clearSegmentValue,\n    convertStackToVolumeLabelmap,\n    computeVolumeLabelmapFromStack,\n    convertVolumeToStackLabelmap,\n};\nexport { removeSegmentationRepresentation, removeContourRepresentation, removeLabelmapRepresentation, removeSurfaceRepresentation, removeAllSegmentations, removeSegmentation, removeSegmentationRepresentations, addLabelmapRepresentationToViewport, addLabelmapRepresentationToViewportMap, addSegmentationRepresentations, removeAllSegmentationRepresentations, addContourRepresentationToViewport, addContourRepresentationToViewportMap, addSurfaceRepresentationToViewport, addSurfaceRepresentationToViewportMap, addSegmentations, updateSegmentations, state, activeSegmentation, segmentLocking, config, segmentIndex, triggerSegmentationEvents, utilities, helpers, removeSegment, getLabelmapImageIds, addRepresentationData, strategies, segmentationStyle, defaultSegmentationStateManager, getCurrentLabelmapImageIdsForViewport, getLabelmapImageIdsForImageId, getActiveSegmentation, };\n","import { getSegmentation } from './getSegmentation';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nfunction internalAddRepresentationData({ segmentationId, type, data, }) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`Segmentation ${segmentationId} not found`);\n    }\n    if (segmentation.representationData[type]) {\n        console.warn(`Representation data of type ${type} already exists for segmentation ${segmentationId}, overwriting it.`);\n    }\n    switch (type) {\n        case SegmentationRepresentations.Labelmap:\n            if (data) {\n                segmentation.representationData[type] =\n                    data;\n            }\n            break;\n        case SegmentationRepresentations.Contour:\n            if (data) {\n                segmentation.representationData[type] = data;\n            }\n            break;\n        case SegmentationRepresentations.Surface:\n            if (data) {\n                segmentation.representationData[type] = data;\n            }\n            break;\n        default:\n            throw new Error(`Invalid representation type ${type}`);\n    }\n}\nexport default internalAddRepresentationData;\n","import CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { SegmentationRepresentations } from '../../enums';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { addColorLUT } from './addColorLUT';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nfunction internalAddSegmentationRepresentation(viewportId, representationInput) {\n    const { segmentationId, config } = representationInput;\n    const renderingConfig = {\n        colorLUTIndex: getColorLUTIndex(config),\n        ...config,\n    };\n    defaultSegmentationStateManager.addSegmentationRepresentation(viewportId, segmentationId, representationInput.type, renderingConfig);\n    if (representationInput.type === SegmentationRepresentations.Contour) {\n        triggerAnnotationRenderForViewportIds([viewportId]);\n    }\n    triggerSegmentationModified(segmentationId);\n}\nfunction getColorLUTIndex(config) {\n    const { colorLUTOrIndex } = config || {};\n    if (colorLUTOrIndex === undefined) {\n        const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n        return index;\n    }\n    if (typeof colorLUTOrIndex === 'number') {\n        return colorLUTOrIndex;\n    }\n    if (Array.isArray(colorLUTOrIndex) &&\n        colorLUTOrIndex.every((item) => Array.isArray(item) && item.length === 4)) {\n        const index = addColorLUT(colorLUTOrIndex);\n        return index;\n    }\n    const index = addColorLUT(JSON.parse(JSON.stringify(CORNERSTONE_COLOR_LUT)));\n    return index;\n}\nexport { internalAddSegmentationRepresentation };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationRemoved } from './triggerSegmentationEvents';\nimport { removeSegmentationRepresentations } from './removeSegmentationRepresentations';\nexport function removeSegmentation(segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const viewportsWithSegmentation = segmentationStateManager\n        .getAllViewportSegmentationRepresentations()\n        .filter(({ representations }) => representations.some((rep) => rep.segmentationId === segmentationId))\n        .map(({ viewportId }) => viewportId);\n    viewportsWithSegmentation.forEach((viewportId) => {\n        removeSegmentationRepresentations(viewportId, { segmentationId });\n    });\n    segmentationStateManager.removeSegmentation(segmentationId);\n    triggerSegmentationRemoved(segmentationId);\n}\nexport function removeAllSegmentations() {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    const segmentations = segmentationStateManager.getState().segmentations;\n    const segmentationIds = segmentations.map((segmentation) => segmentation.segmentationId);\n    segmentationIds.forEach((segmentationId) => {\n        removeSegmentation(segmentationId);\n    });\n    segmentationStateManager.resetState();\n}\n","import SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport labelmapDisplay from '../../tools/displayTools/Labelmap/labelmapDisplay';\nimport contourDisplay from '../../tools/displayTools/Contour/contourDisplay';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nimport { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { surfaceDisplay } from '../../tools/displayTools/Surface';\nfunction removeSegmentationRepresentation(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    return _removeSegmentationRepresentations(viewportId, specifier, immediate);\n}\nfunction _removeSegmentationRepresentations(viewportId, specifier, immediate) {\n    const { segmentationId, type } = specifier;\n    _removeRepresentationObject(viewportId, segmentationId, type, immediate);\n    return defaultSegmentationStateManager.removeSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n}\nfunction removeAllSegmentationRepresentations() {\n    const state = defaultSegmentationStateManager.getAllViewportSegmentationRepresentations();\n    state.forEach(({ viewportId, representations }) => {\n        representations.forEach(({ segmentationId, type }) => {\n            removeSegmentationRepresentation(viewportId, {\n                segmentationId,\n                type,\n            });\n        });\n    });\n    defaultSegmentationStateManager.resetState();\n}\nfunction removeLabelmapRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Labelmap,\n    }, immediate);\n}\nfunction removeContourRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Contour,\n    }, immediate);\n}\nfunction removeSurfaceRepresentation(viewportId, segmentationId, immediate) {\n    removeSegmentationRepresentation(viewportId, {\n        segmentationId,\n        type: SegmentationRepresentations.Surface,\n    }, immediate);\n}\nfunction _removeRepresentationObject(viewportId, segmentationId, type, immediate) {\n    const representations = getSegmentationRepresentations(viewportId, {\n        segmentationId,\n        type,\n    });\n    representations.forEach((representation) => {\n        if (representation.type === SegmentationRepresentations.Labelmap) {\n            labelmapDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Contour) {\n            contourDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n        else if (representation.type === SegmentationRepresentations.Surface) {\n            surfaceDisplay.removeRepresentation(viewportId, representation.segmentationId, immediate);\n        }\n    });\n    const { viewport } = getEnabledElementByViewportId(viewportId) || {};\n    if (viewport) {\n        viewport.render();\n    }\n}\nexport { removeSegmentationRepresentation, removeSegmentationRepresentations, removeAllSegmentationRepresentations, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, };\n","import { getToolGroupForViewport } from '../../store/ToolGroupManager';\nimport { invalidateBrushCursor } from '../../utilities/segmentation/invalidateBrushCursor';\nimport { getSegmentation } from './getSegmentation';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nimport { getActiveSegmentIndex } from './getActiveSegmentIndex';\nimport { getSegmentationRepresentations } from './getSegmentationRepresentation';\nfunction setActiveSegmentIndex(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (typeof segmentIndex === 'string') {\n        console.warn('segmentIndex is a string, converting to number');\n        segmentIndex = Number(segmentIndex);\n    }\n    Object.values(segmentation.segments).forEach((segment) => {\n        segment.active = false;\n    });\n    if (!segmentation.segments[segmentIndex]) {\n        segmentation.segments[segmentIndex] = {\n            segmentIndex,\n            label: '',\n            locked: false,\n            cachedStats: {},\n            active: false,\n        };\n    }\n    if (segmentation.segments[segmentIndex].active !== true) {\n        segmentation.segments[segmentIndex].active = true;\n        triggerSegmentationModified(segmentationId);\n    }\n    const viewportIds = getViewportIdsWithSegmentation(segmentationId);\n    viewportIds.forEach((viewportId) => {\n        const representations = getSegmentationRepresentations(viewportId, {\n            segmentationId,\n        });\n        representations.forEach((representation) => {\n            if (!representation.segments[segmentIndex]) {\n                representation.segments[segmentIndex] = {\n                    visible: true,\n                };\n            }\n        });\n    });\n    viewportIds.forEach((viewportId) => {\n        const toolGroup = getToolGroupForViewport(viewportId);\n        invalidateBrushCursor(toolGroup.id);\n    });\n}\nexport { setActiveSegmentIndex, getActiveSegmentIndex };\n","import { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nfunction isSegmentIndexLocked(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    return segments[segmentIndex].locked;\n}\nfunction setSegmentIndexLocked(segmentationId, segmentIndex, locked = true) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    segments[segmentIndex].locked = locked;\n    triggerSegmentationModified(segmentationId);\n}\nfunction getLockedSegmentIndices(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segments } = segmentation;\n    const lockedSegmentIndices = Object.keys(segments).filter((segmentIndex) => segments[segmentIndex].locked);\n    return lockedSegmentIndices.map((segmentIndex) => parseInt(segmentIndex));\n}\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegmentIndices };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function removeColorLUT(colorLUTIndex) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function getStackSegmentationImageIdsForViewport(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.getStackSegmentationImageIdsForViewport(viewportId, segmentationId);\n}\n","import { getSegmentation } from './getSegmentation';\nimport { getSegmentations } from './getSegmentations';\nimport { addSegmentations } from './addSegmentations';\nimport { removeAllSegmentations, removeSegmentation, } from './removeSegmentation';\nimport { removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, } from './removeSegmentationRepresentations';\nimport { addColorLUT } from './addColorLUT';\nimport { getColorLUT } from './getColorLUT';\nimport { getNextColorLUTIndex } from './getNextColorLUTIndex';\nimport { removeColorLUT } from './removeColorLUT';\nimport { getViewportSegmentations, getViewportSegmentationRepresentations, } from './getViewportSegmentations';\nimport { getViewportIdsWithSegmentation } from './getViewportIdsWithSegmentation';\nimport { getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, } from './getCurrentLabelmapImageIdForViewport';\nimport { updateLabelmapSegmentationImageReferences } from './updateLabelmapSegmentationImageReferences';\nimport { getStackSegmentationImageIdsForViewport } from './getStackSegmentationImageIdsForViewport';\nimport { getSegmentationRepresentation, getSegmentationRepresentations, getSegmentationRepresentationsBySegmentationId, } from './getSegmentationRepresentation';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nfunction destroy() {\n    defaultSegmentationStateManager.resetState();\n}\nexport { getColorLUT, getCurrentLabelmapImageIdForViewport, getCurrentLabelmapImageIdsForViewport, getNextColorLUTIndex, getSegmentation, getSegmentations, getStackSegmentationImageIdsForViewport, getViewportIdsWithSegmentation, getSegmentationRepresentation, getSegmentationRepresentations, getViewportSegmentationRepresentations, removeColorLUT, getViewportSegmentations, removeSegmentation, removeLabelmapRepresentation, removeContourRepresentation, removeSurfaceRepresentation, removeSegmentationRepresentation, removeAllSegmentationRepresentations, removeAllSegmentations, addColorLUT, addSegmentations, updateLabelmapSegmentationImageReferences, getSegmentationRepresentationsBySegmentationId, destroy, };\n","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nexport function updateLabelmapSegmentationImageReferences(viewportId, segmentationId) {\n    const segmentationStateManager = defaultSegmentationStateManager;\n    return segmentationStateManager.updateLabelmapSegmentationImageReferences(viewportId, segmentationId);\n}\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { state } from '../state';\nfunction getToolGroupForViewport(viewportId, renderingEngineId) {\n    if (!renderingEngineId) {\n        renderingEngineId = getRenderingEngines().find((re) => re.getViewports().find((vp) => vp.id === viewportId))?.id;\n    }\n    const toolGroupFilteredByIds = state.toolGroups.filter((tg) => tg.viewportsInfo.some((vp) => vp.renderingEngineId === renderingEngineId &&\n        (!vp.viewportId || vp.viewportId === viewportId)));\n    if (!toolGroupFilteredByIds.length) {\n        return;\n    }\n    if (toolGroupFilteredByIds.length > 1) {\n        throw new Error(`Multiple tool groups found for renderingEngineId: ${renderingEngineId} and viewportId: ${viewportId}. You should only\n      have one tool group per viewport in a renderingEngine.`);\n    }\n    return toolGroupFilteredByIds[0];\n}\nexport default getToolGroupForViewport;\n","let svgNodeCache = {};\nexport function resetSvgNodeCache() {\n    svgNodeCache = {};\n}\nexport default svgNodeCache;\n","import { vec2, vec3 } from 'gl-matrix';\nimport { getEnabledElement, utilities as csUtils, getEnabledElementByViewportId, utilities, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawLine as drawLineSvg, drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nconst { transformWorldToIndex } = csUtils;\nclass BidirectionalTool extends AnnotationTool {\n    static { this.toolName = 'Bidirectional'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            preventHandleOutsideImage: false,\n            getTextLines: defaultGetTextLines,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            let canvasPoint1 = viewport.worldToCanvas(points[0]);\n            let canvasPoint2 = viewport.worldToCanvas(points[1]);\n            let line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            let distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            canvasPoint1 = viewport.worldToCanvas(points[2]);\n            canvasPoint2 = viewport.worldToCanvas(points[3]);\n            line = {\n                start: {\n                    x: canvasPoint1[0],\n                    y: canvasPoint1[1],\n                },\n                end: {\n                    x: canvasPoint2[0],\n                    y: canvasPoint2[1],\n                },\n            };\n            distanceToPoint = lineSegment.distanceToPoint([line.start.x, line.start.y], [line.end.x, line.end.y], [canvasCoords[0], canvasCoords[1]]);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            hideElementCursor(element);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const data = annotation.data;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            hideElementCursor(element);\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            this.doneEditMemo();\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const { renderingEngine } = getEnabledElement(element);\n            if (this.editData.handleIndex !== undefined) {\n                const { points } = data.handles;\n                const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n                const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n                if (secondLineSegmentLength > firstLineSegmentLength) {\n                    const longAxis = [[...points[2]], [...points[3]]];\n                    const shortAxisPoint0 = [...points[0]];\n                    const shortAxisPoint1 = [...points[1]];\n                    const longAxisVector = vec2.create();\n                    vec2.set(longAxisVector, longAxis[1][0] - longAxis[0][0], longAxis[1][1] - longAxis[1][0]);\n                    const counterClockWisePerpendicularToLongAxis = vec2.create();\n                    vec2.set(counterClockWisePerpendicularToLongAxis, -longAxisVector[1], longAxisVector[0]);\n                    const currentShortAxisVector = vec2.create();\n                    vec2.set(currentShortAxisVector, shortAxisPoint1[0] - shortAxisPoint0[0], shortAxisPoint1[1] - shortAxisPoint0[0]);\n                    let shortAxis;\n                    if (vec2.dot(currentShortAxisVector, counterClockWisePerpendicularToLongAxis) > 0) {\n                        shortAxis = [shortAxisPoint0, shortAxisPoint1];\n                    }\n                    else {\n                        shortAxis = [shortAxisPoint1, shortAxisPoint0];\n                    }\n                    data.handles.points = [\n                        longAxis[0],\n                        longAxis[1],\n                        shortAxis[0],\n                        shortAxis[1],\n                    ];\n                }\n            }\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n            this.editData = null;\n            this.isDrawing = false;\n        };\n        this._dragDrawCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { worldToCanvas } = viewport;\n            const { annotation, viewportIdsToRender, handleIndex, newAnnotation } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            data.handles.points[handleIndex] = [...worldPos];\n            const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n            const canvasCoords = {\n                longLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[0][0],\n                        y: canvasCoordPoints[0][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[1][0],\n                        y: canvasCoordPoints[1][1],\n                    },\n                },\n                shortLineSegment: {\n                    start: {\n                        x: canvasCoordPoints[2][0],\n                        y: canvasCoordPoints[2][1],\n                    },\n                    end: {\n                        x: canvasCoordPoints[3][0],\n                        y: canvasCoordPoints[3][1],\n                    },\n                },\n            };\n            const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n            const shortAxisDistFromCenter = dist / 3;\n            const dx = canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n            const dy = canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n            const length = Math.sqrt(dx * dx + dy * dy);\n            const vectorX = dx / length;\n            const vectorY = dy / length;\n            const xMid = (canvasCoords.longLineSegment.start.x +\n                canvasCoords.longLineSegment.end.x) /\n                2;\n            const yMid = (canvasCoords.longLineSegment.start.y +\n                canvasCoords.longLineSegment.end.y) /\n                2;\n            const startX = xMid + shortAxisDistFromCenter * vectorY;\n            const startY = yMid - shortAxisDistFromCenter * vectorX;\n            const endX = xMid - shortAxisDistFromCenter * vectorY;\n            const endY = yMid + shortAxisDistFromCenter * vectorX;\n            data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n            data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n            annotation.invalidated = true;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            this.editData.hasMoved = true;\n        };\n        this._dragModifyCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const points = data.handles.points;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                this._dragModifyHandle(evt);\n                annotation.invalidated = true;\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this._dragModifyHandle = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { annotation, handleIndex: movingHandleIndex } = this.editData;\n            const { data } = annotation;\n            const worldPos = currentPoints.world;\n            const canvasCoordHandlesCurrent = [\n                viewport.worldToCanvas(data.handles.points[0]),\n                viewport.worldToCanvas(data.handles.points[1]),\n                viewport.worldToCanvas(data.handles.points[2]),\n                viewport.worldToCanvas(data.handles.points[3]),\n            ];\n            const firstLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[0][0],\n                    y: canvasCoordHandlesCurrent[0][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[1][0],\n                    y: canvasCoordHandlesCurrent[1][1],\n                },\n            };\n            const secondLineSegment = {\n                start: {\n                    x: canvasCoordHandlesCurrent[2][0],\n                    y: canvasCoordHandlesCurrent[2][1],\n                },\n                end: {\n                    x: canvasCoordHandlesCurrent[3][0],\n                    y: canvasCoordHandlesCurrent[3][1],\n                },\n            };\n            const proposedPoint = [...worldPos];\n            const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n            if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n                const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n                const fixedHandleCanvasCoord = canvasCoordHandlesCurrent[fixedHandleIndex];\n                const fixedHandleToProposedCoordVec = vec2.set(vec2.create(), proposedCanvasCoord[0] - fixedHandleCanvasCoord[0], proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]);\n                const fixedHandleToOldCoordVec = vec2.set(vec2.create(), canvasCoordHandlesCurrent[movingHandleIndex][0] -\n                    fixedHandleCanvasCoord[0], canvasCoordHandlesCurrent[movingHandleIndex][1] -\n                    fixedHandleCanvasCoord[1]);\n                vec2.normalize(fixedHandleToProposedCoordVec, fixedHandleToProposedCoordVec);\n                vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n                const proposedFirstLineSegment = {\n                    start: {\n                        x: fixedHandleCanvasCoord[0],\n                        y: fixedHandleCanvasCoord[1],\n                    },\n                    end: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                };\n                if (this._movingLongAxisWouldPutItThroughShortAxis(proposedFirstLineSegment, secondLineSegment)) {\n                    return;\n                }\n                const centerOfRotation = fixedHandleCanvasCoord;\n                const angle = this._getSignedAngle(fixedHandleToOldCoordVec, fixedHandleToProposedCoordVec);\n                let firstPointX = canvasCoordHandlesCurrent[2][0];\n                let firstPointY = canvasCoordHandlesCurrent[2][1];\n                let secondPointX = canvasCoordHandlesCurrent[3][0];\n                let secondPointY = canvasCoordHandlesCurrent[3][1];\n                firstPointX -= centerOfRotation[0];\n                firstPointY -= centerOfRotation[1];\n                secondPointX -= centerOfRotation[0];\n                secondPointY -= centerOfRotation[1];\n                const rotatedFirstPoint = firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n                const rotatedFirstPointY = firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n                const rotatedSecondPoint = secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n                const rotatedSecondPointY = secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n                firstPointX = rotatedFirstPoint + centerOfRotation[0];\n                firstPointY = rotatedFirstPointY + centerOfRotation[1];\n                secondPointX = rotatedSecondPoint + centerOfRotation[0];\n                secondPointY = rotatedSecondPointY + centerOfRotation[1];\n                const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n                const newSecondPoint = viewport.canvasToWorld([\n                    secondPointX,\n                    secondPointY,\n                ]);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n                data.handles.points[2] = newFirstPoint;\n                data.handles.points[3] = newSecondPoint;\n            }\n            else {\n                const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n                const canvasCoordsCurrent = {\n                    longLineSegment: {\n                        start: firstLineSegment.start,\n                        end: firstLineSegment.end,\n                    },\n                    shortLineSegment: {\n                        start: secondLineSegment.start,\n                        end: secondLineSegment.end,\n                    },\n                };\n                const longLineSegmentVec = vec2.subtract(vec2.create(), [\n                    canvasCoordsCurrent.longLineSegment.end.x,\n                    canvasCoordsCurrent.longLineSegment.end.y,\n                ], [\n                    canvasCoordsCurrent.longLineSegment.start.x,\n                    canvasCoordsCurrent.longLineSegment.start.y,\n                ]);\n                const longLineSegmentVecNormalized = vec2.normalize(vec2.create(), longLineSegmentVec);\n                const proposedToCurrentVec = vec2.subtract(vec2.create(), [proposedCanvasCoord[0], proposedCanvasCoord[1]], [\n                    canvasCoordHandlesCurrent[movingHandleIndex][0],\n                    canvasCoordHandlesCurrent[movingHandleIndex][1],\n                ]);\n                const movementLength = vec2.length(proposedToCurrentVec);\n                const angle = this._getSignedAngle(longLineSegmentVecNormalized, proposedToCurrentVec);\n                const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n                const newTranslatedPoint = vec2.scaleAndAdd(vec2.create(), [\n                    canvasCoordHandlesCurrent[translateHandleIndex][0],\n                    canvasCoordHandlesCurrent[translateHandleIndex][1],\n                ], longLineSegmentVecNormalized, movementAlongLineSegmentLength);\n                if (this._movingLongAxisWouldPutItThroughShortAxis({\n                    start: {\n                        x: proposedCanvasCoord[0],\n                        y: proposedCanvasCoord[1],\n                    },\n                    end: {\n                        x: newTranslatedPoint[0],\n                        y: newTranslatedPoint[1],\n                    },\n                }, {\n                    start: {\n                        x: canvasCoordsCurrent.longLineSegment.start.x,\n                        y: canvasCoordsCurrent.longLineSegment.start.y,\n                    },\n                    end: {\n                        x: canvasCoordsCurrent.longLineSegment.end.x,\n                        y: canvasCoordsCurrent.longLineSegment.end.y,\n                    },\n                })) {\n                    return;\n                }\n                const intersectionPoint = lineSegment.intersectLine([proposedCanvasCoord[0], proposedCanvasCoord[1]], [newTranslatedPoint[0], newTranslatedPoint[1]], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n                if (!intersectionPoint) {\n                    return;\n                }\n                data.handles.points[translateHandleIndex] = viewport.canvasToWorld(newTranslatedPoint);\n                data.handles.points[movingHandleIndex] = proposedPoint;\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = true;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash, shadow } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].unit == null) {\n                    data.cachedStats[targetId] = {\n                        length: null,\n                        width: null,\n                        unit: null,\n                    };\n                    this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, renderingEngine, enabledElement);\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId1 = `${annotationUID}-line-1`;\n                const dataId2 = `${annotationUID}-line-2`;\n                const lineUID = '0';\n                drawLineSvg(svgDrawingHelper, annotationUID, lineUID, canvasCoordinates[0], canvasCoordinates[1], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId1);\n                const secondLineUID = '1';\n                drawLineSvg(svgDrawingHelper, annotationUID, secondLineUID, canvasCoordinates[2], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                    shadow,\n                }, dataId2);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                let canvasTextBoxCoords;\n                if (!data.handles.textBox.hasMoved) {\n                    canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._movingLongAxisWouldPutItThroughShortAxis = (firstLineSegment, secondLineSegment) => {\n            const vectorInSecondLineDirection = vec2.create();\n            vec2.set(vectorInSecondLineDirection, secondLineSegment.end.x - secondLineSegment.start.x, secondLineSegment.end.y - secondLineSegment.start.y);\n            vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n            const extendedSecondLineSegment = {\n                start: {\n                    x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n                },\n                end: {\n                    x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n                    y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n                },\n            };\n            const proposedIntersectionPoint = lineSegment.intersectLine([extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y], [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y], [firstLineSegment.start.x, firstLineSegment.start.y], [firstLineSegment.end.x, firstLineSegment.end.y]);\n            const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n            return wouldPutThroughShortAxis;\n        };\n        this._calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { element } = enabledElement.viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[1];\n            const worldPos3 = data.handles.points[2];\n            const worldPos4 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, dimensions } = image;\n                const index1 = transformWorldToIndex(imageData, worldPos1);\n                const index2 = transformWorldToIndex(imageData, worldPos2);\n                const index3 = transformWorldToIndex(imageData, worldPos3);\n                const index4 = transformWorldToIndex(imageData, worldPos4);\n                const handles1 = [index1, index2];\n                const handles2 = [index3, index4];\n                const { scale: scale1, unit: units1 } = getCalibratedLengthUnitsAndScale(image, handles1);\n                const { scale: scale2, unit: units2 } = getCalibratedLengthUnitsAndScale(image, handles2);\n                const dist1 = this._calculateLength(worldPos1, worldPos2) / scale1;\n                const dist2 = this._calculateLength(worldPos3, worldPos4) / scale2;\n                const length = dist1 > dist2 ? dist1 : dist2;\n                const width = dist1 > dist2 ? dist2 : dist1;\n                const unit = dist1 > dist2 ? units1 : units2;\n                const widthUnit = dist1 > dist2 ? units2 : units1;\n                this._isInsideVolume(index1, index2, index3, index4, dimensions)\n                    ? (this.isHandleOutsideImage = false)\n                    : (this.isHandleOutsideImage = true);\n                cachedStats[targetId] = {\n                    length,\n                    width,\n                    unit,\n                    widthUnit,\n                };\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, index3, index4, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions) &&\n                csUtils.indexWithinDimensions(index3, dimensions) &&\n                csUtils.indexWithinDimensions(index4, dimensions));\n        };\n        this._getSignedAngle = (vector1, vector2) => {\n            return Math.atan2(vector1[0] * vector2[1] - vector1[1] * vector2[0], vector1[0] * vector2[0] + vector1[1] * vector2[1]);\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    addNewAnnotation(evt) {\n        const eventDetail = evt.detail;\n        const { currentPoints, element } = eventDetail;\n        const worldPos = currentPoints.world;\n        const enabledElement = getEnabledElement(element);\n        const { viewport, renderingEngine } = enabledElement;\n        this.isDrawing = true;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n        const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n        const annotation = {\n            highlighted: true,\n            invalidated: true,\n            metadata: {\n                toolName: this.getToolName(),\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...viewport.getViewReference({ points: [worldPos] }),\n            },\n            data: {\n                handles: {\n                    points: [\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                        [...worldPos],\n                    ],\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n        };\n        addAnnotation(annotation, element);\n        const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n        this.editData = {\n            annotation,\n            viewportIdsToRender,\n            handleIndex: 1,\n            movingTextBox: false,\n            newAnnotation: true,\n            hasMoved: false,\n        };\n        this._activateDraw(element);\n        hideElementCursor(element);\n        evt.preventDefault();\n        triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n        return annotation;\n    }\n    static { this.hydrate = (viewportId, axis, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(BidirectionalTool, enabledElement, axis[0], options);\n        const [majorAxis, minorAxis] = axis;\n        const [major0, major1] = majorAxis;\n        const [minor0, minor1] = minorAxis;\n        const points = [major0, major1, minor0, minor1];\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || utilities.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                    textBox: {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    },\n                },\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n        return annotation;\n    }; }\n    _calculateLength(pos1, pos2) {\n        const dx = pos1[0] - pos2[0];\n        const dy = pos1[1] - pos2[1];\n        const dz = pos1[2] - pos2[2];\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const { cachedStats, label } = data;\n    const { length, width, unit } = cachedStats[targetId];\n    const textLines = [];\n    if (label) {\n        textLines.push(label);\n    }\n    if (length === undefined) {\n        return textLines;\n    }\n    textLines.push(`L: ${csUtils.roundNumber(length)} ${unit || unit}`, `W: ${csUtils.roundNumber(width)} ${unit}`);\n    return textLines;\n}\nexport default BidirectionalTool;\n","import { utilities } from '@cornerstonejs/core';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport PlanarFreehandROITool from './PlanarFreehandROITool';\nclass PlanarFreehandContourSegmentationTool extends PlanarFreehandROITool {\n    static { this.toolName = 'PlanarFreehandContourSegmentationTool'; }\n    constructor(toolProps) {\n        const initialProps = utilities.deepMerge({\n            configuration: {\n                calculateStats: false,\n                allowOpenContours: false,\n            },\n        }, toolProps);\n        super(initialProps);\n    }\n    isContourSegmentationTool() {\n        return true;\n    }\n    renderAnnotationInstance(renderContext) {\n        const annotation = renderContext.annotation;\n        const { invalidated } = annotation;\n        const renderResult = super.renderAnnotationInstance(renderContext);\n        if (invalidated) {\n            const { segmentationId } = annotation.data.segmentation;\n            triggerSegmentationDataModified(segmentationId);\n        }\n        return renderResult;\n    }\n}\nexport default PlanarFreehandContourSegmentationTool;\n","import { AnnotationTool } from '../base';\nimport { CONSTANTS, getEnabledElement, VolumeViewport, utilities as csUtils, metaData, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport * as math from '../../utilities/math';\nimport { polyline } from '../../utilities/math';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport registerDrawLoop from './planarFreehandROITool/drawLoop';\nimport registerEditLoopCommon from './planarFreehandROITool/editLoopCommon';\nimport registerClosedContourEditLoop from './planarFreehandROITool/closedContourEditLoop';\nimport registerOpenContourEditLoop from './planarFreehandROITool/openContourEditLoop';\nimport registerOpenContourEndEditLoop from './planarFreehandROITool/openContourEndEditLoop';\nimport registerRenderMethods from './planarFreehandROITool/renderMethods';\nimport { triggerAnnotationModified } from '../../stateManagement/annotation/helpers/state';\nimport { drawLinkedTextBox } from '../../drawingSvg';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { getLineSegmentIntersectionsCoordinates } from '../../utilities/math/polyline';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nimport calculatePerimeter from '../../utilities/contours/calculatePerimeter';\nimport ContourSegmentationBaseTool from '../base/ContourSegmentationBaseTool';\nimport { KeyboardBindings, ChangeTypes } from '../../enums';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nconst { pointCanProjectOnLine } = polyline;\nconst { EPSILON } = CONSTANTS;\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\nclass PlanarFreehandROITool extends ContourSegmentationBaseTool {\n    static { this.toolName = 'PlanarFreehandROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            shadow: true,\n            preventHandleOutsideImage: false,\n            contourHoleAdditionModifierKey: KeyboardBindings.Shift,\n            alwaysRenderOpenContourHandles: {\n                enabled: false,\n                radius: 2,\n            },\n            allowOpenContours: true,\n            closeContourProximity: 10,\n            checkCanvasEditFallbackProximity: 6,\n            makeClockWise: true,\n            subPixelResolution: 4,\n            smoothing: {\n                smoothOnAdd: false,\n                smoothOnEdit: false,\n                knotsRatioPercentageOnAdd: 40,\n                knotsRatioPercentageOnEdit: 40,\n            },\n            interpolation: {\n                enabled: false,\n                onInterpolationComplete: null,\n            },\n            decimate: {\n                enabled: false,\n                epsilon: 0.1,\n            },\n            displayOnePointAsCrosshairs: false,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.isDrawing = false;\n        this.isEditingClosed = false;\n        this.isEditingOpen = false;\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const annotation = this.createAnnotation(evt);\n            this.addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.activateDraw(evt, annotation, viewportIdsToRender);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, handle);\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            if (annotation.data.contour.closed) {\n                this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n            }\n            else {\n                this.activateOpenContourEdit(evt, annotation, viewportIdsToRender);\n            }\n            evt.preventDefault();\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { polyline: points } = annotation.data.contour;\n            let previousPoint = viewport.worldToCanvas(points[0]);\n            for (let i = 1; i < points.length; i++) {\n                const p1 = previousPoint;\n                const p2 = viewport.worldToCanvas(points[i]);\n                const canProject = pointCanProjectOnLine(canvasCoords, p1, p2, proximity);\n                if (canProject) {\n                    return true;\n                }\n                previousPoint = p2;\n            }\n            if (!annotation.data.contour.closed) {\n                return false;\n            }\n            const pStart = viewport.worldToCanvas(points[0]);\n            const pEnd = viewport.worldToCanvas(points[points.length - 1]);\n            return pointCanProjectOnLine(canvasCoords, pStart, pEnd, proximity);\n        };\n        this.cancel = (element) => {\n            const isDrawing = this.isDrawing;\n            const isEditingOpen = this.isEditingOpen;\n            const isEditingClosed = this.isEditingClosed;\n            if (isDrawing) {\n                this.cancelDrawing(element);\n            }\n            else if (isEditingOpen) {\n                this.cancelOpenContourEdit(element);\n            }\n            else if (isEditingClosed) {\n                this.cancelClosedContourEdit(element);\n            }\n        };\n        this._calculateCachedStats = (annotation, viewport, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { cachedStats } = data;\n            const { polyline: points, closed } = data.contour;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { imageData, metadata } = image;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                const modalityUnitOptions = {\n                    isPreScaled: isViewportPreScaled(viewport, targetId),\n                    isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                };\n                const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, modalityUnitOptions);\n                const calibratedScale = getCalibratedLengthUnitsAndScale(image, () => {\n                    const polyline = data.contour.polyline;\n                    const numPoints = polyline.length;\n                    const projectedPolyline = new Array(numPoints);\n                    for (let i = 0; i < numPoints; i++) {\n                        projectedPolyline[i] = viewport.worldToCanvas(polyline[i]);\n                    }\n                    const { maxX: canvasMaxX, maxY: canvasMaxY, minX: canvasMinX, minY: canvasMinY, } = math.polyline.getAABB(projectedPolyline);\n                    const topLeftBBWorld = viewport.canvasToWorld([canvasMinX, canvasMinY]);\n                    const topLeftBBIndex = csUtils.transformWorldToIndex(imageData, topLeftBBWorld);\n                    const bottomRightBBWorld = viewport.canvasToWorld([\n                        canvasMaxX,\n                        canvasMaxY,\n                    ]);\n                    const bottomRightBBIndex = csUtils.transformWorldToIndex(imageData, bottomRightBBWorld);\n                    return [topLeftBBIndex, bottomRightBBIndex];\n                });\n                const canvasPoint = canvasCoordinates[0];\n                const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n                const deltaXPoint = viewport.canvasToWorld([\n                    canvasPoint[0] + 1,\n                    canvasPoint[1],\n                ]);\n                const deltaYPoint = viewport.canvasToWorld([\n                    canvasPoint[0],\n                    canvasPoint[1] + 1,\n                ]);\n                const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n                const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n                if (closed) {\n                    this.updateClosedCachedStats({\n                        targetId,\n                        viewport,\n                        canvasCoordinates,\n                        points,\n                        imageData,\n                        metadata,\n                        cachedStats,\n                        modalityUnit,\n                        calibratedScale,\n                        deltaInX,\n                        deltaInY,\n                    });\n                }\n                else {\n                    this.updateOpenCachedStats({\n                        metadata,\n                        canvasCoordinates,\n                        targetId,\n                        cachedStats,\n                        modalityUnit,\n                        calibratedScale,\n                        deltaInX,\n                        deltaInY,\n                    });\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, enabledElement.viewport.element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._renderStats = (annotation, viewport, enabledElement, svgDrawingHelper) => {\n            const { data } = annotation;\n            const targetId = this.getTargetId(viewport);\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n                annotationUID: annotation.annotationUID,\n            };\n            const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n            if (!options.visibility) {\n                return;\n            }\n            const textLines = this.configuration.getTextLines(data, targetId);\n            if (!textLines || textLines.length === 0) {\n                return;\n            }\n            const canvasCoordinates = data.contour.polyline.map((p) => viewport.worldToCanvas(p));\n            if (!data.handles.textBox.hasMoved) {\n                const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                data.handles.textBox.worldPosition =\n                    viewport.canvasToWorld(canvasTextBoxCoords);\n            }\n            const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n            const textBoxUID = '1';\n            const boundingBox = drawLinkedTextBox(svgDrawingHelper, annotation.annotationUID ?? '', textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n            const { x: left, y: top, width, height } = boundingBox;\n            data.handles.textBox.worldBoundingBox = {\n                topLeft: viewport.canvasToWorld([left, top]),\n                topRight: viewport.canvasToWorld([left + width, top]),\n                bottomLeft: viewport.canvasToWorld([left, top + height]),\n                bottomRight: viewport.canvasToWorld([left + width, top + height]),\n            };\n        };\n        registerDrawLoop(this);\n        registerEditLoopCommon(this);\n        registerClosedContourEditLoop(this);\n        registerOpenContourEditLoop(this);\n        registerOpenContourEndEditLoop(this);\n        registerRenderMethods(this);\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    filterInteractableAnnotationsForElement(element, annotations) {\n        if (!annotations || !annotations.length) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        let annotationsToDisplay;\n        if (viewport instanceof VolumeViewport) {\n            const camera = viewport.getCamera();\n            const { spacingInNormalDirection } = csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n            annotationsToDisplay = this.filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection);\n        }\n        else {\n            annotationsToDisplay = filterAnnotationsForDisplay(viewport, annotations);\n        }\n        return annotationsToDisplay;\n    }\n    filterAnnotationsWithinSlice(annotations, camera, spacingInNormalDirection) {\n        const { viewPlaneNormal } = camera;\n        const annotationsWithParallelNormals = annotations.filter((td) => {\n            let annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n            if (!td.metadata.referencedImageId &&\n                !annotationViewPlaneNormal &&\n                td.metadata.FrameOfReferenceUID) {\n                for (const point of td.data.contour.polyline) {\n                    const vector = vec3.sub(vec3.create(), point, camera.focalPoint);\n                    const dotProduct = vec3.dot(vector, camera.viewPlaneNormal);\n                    if (!csUtils.isEqual(dotProduct, 0)) {\n                        return false;\n                    }\n                }\n                td.metadata.viewPlaneNormal = camera.viewPlaneNormal;\n                td.metadata.cameraFocalPoint = camera.focalPoint;\n                return true;\n            }\n            if (!annotationViewPlaneNormal) {\n                const { referencedImageId } = td.metadata;\n                const { imageOrientationPatient } = metaData.get('imagePlaneModule', referencedImageId);\n                const rowCosineVec = vec3.fromValues(imageOrientationPatient[0], imageOrientationPatient[1], imageOrientationPatient[2]);\n                const colCosineVec = vec3.fromValues(imageOrientationPatient[3], imageOrientationPatient[4], imageOrientationPatient[5]);\n                annotationViewPlaneNormal = vec3.create();\n                vec3.cross(annotationViewPlaneNormal, rowCosineVec, colCosineVec);\n                td.metadata.viewPlaneNormal = annotationViewPlaneNormal;\n            }\n            const isParallel = Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n                PARALLEL_THRESHOLD;\n            return annotationViewPlaneNormal && isParallel;\n        });\n        if (!annotationsWithParallelNormals.length) {\n            return [];\n        }\n        const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n        const { focalPoint } = camera;\n        const annotationsWithinSlice = [];\n        for (const annotation of annotationsWithParallelNormals) {\n            const data = annotation.data;\n            const point = data.contour.polyline[0];\n            if (!annotation.isVisible) {\n                continue;\n            }\n            const dir = vec3.create();\n            vec3.sub(dir, focalPoint, point);\n            const dot = vec3.dot(dir, viewPlaneNormal);\n            if (Math.abs(dot) < halfSpacingInNormalDirection) {\n                annotationsWithinSlice.push(annotation);\n            }\n        }\n        return annotationsWithinSlice;\n    }\n    isContourSegmentationTool() {\n        return false;\n    }\n    createAnnotation(evt) {\n        const worldPos = evt.detail.currentPoints.world;\n        const contourAnnotation = super.createAnnotation(evt);\n        const onInterpolationComplete = (annotation) => {\n            annotation.data.handles.points.length = 0;\n        };\n        const annotation = csUtils.deepMerge(contourAnnotation, {\n            data: {\n                contour: {\n                    polyline: [[...worldPos]],\n                },\n                label: '',\n                cachedStats: {},\n            },\n            onInterpolationComplete,\n        });\n        return annotation;\n    }\n    getAnnotationStyle(context) {\n        return super.getAnnotationStyle(context);\n    }\n    renderAnnotationInstance(renderContext) {\n        const { enabledElement, targetId, svgDrawingHelper } = renderContext;\n        const annotation = renderContext.annotation;\n        let renderStatus = false;\n        const { viewport, renderingEngine } = enabledElement;\n        const isDrawing = this.isDrawing;\n        const isEditingOpen = this.isEditingOpen;\n        const isEditingClosed = this.isEditingClosed;\n        if (!(isDrawing || isEditingOpen || isEditingClosed)) {\n            if (this.configuration.displayOnePointAsCrosshairs &&\n                annotation.data.contour.polyline.length === 1) {\n                this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);\n            }\n            else {\n                this.renderContour(enabledElement, svgDrawingHelper, annotation);\n            }\n        }\n        else {\n            const activeAnnotationUID = this.commonData.annotation.annotationUID;\n            if (annotation.annotationUID === activeAnnotationUID) {\n                if (isDrawing) {\n                    this.renderContourBeingDrawn(enabledElement, svgDrawingHelper, annotation);\n                }\n                else if (isEditingClosed) {\n                    this.renderClosedContourBeingEdited(enabledElement, svgDrawingHelper, annotation);\n                }\n                else if (isEditingOpen) {\n                    this.renderOpenContourBeingEdited(enabledElement, svgDrawingHelper, annotation);\n                }\n                else {\n                    throw new Error(`Unknown ${this.getToolName()} annotation rendering state`);\n                }\n            }\n            else {\n                if (this.configuration.displayOnePointAsCrosshairs &&\n                    annotation.data.contour.polyline.length === 1) {\n                    this.renderPointContourWithMarker(enabledElement, svgDrawingHelper, annotation);\n                }\n                else {\n                    this.renderContour(enabledElement, svgDrawingHelper, annotation);\n                }\n            }\n            renderStatus = true;\n        }\n        if (!this.configuration.calculateStats) {\n            return;\n        }\n        this._calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement);\n        this._renderStats(annotation, viewport, enabledElement, svgDrawingHelper);\n        return renderStatus;\n    }\n    _calculateStatsIfActive(annotation, targetId, viewport, renderingEngine, enabledElement) {\n        const activeAnnotationUID = this.commonData?.annotation.annotationUID;\n        if (annotation.annotationUID === activeAnnotationUID &&\n            !this.commonData?.movingTextBox) {\n            return;\n        }\n        if (!this.commonData?.movingTextBox) {\n            const { data } = annotation;\n            if (!data.cachedStats[targetId]?.unit) {\n                data.cachedStats[targetId] = {\n                    Modality: null,\n                    area: null,\n                    max: null,\n                    mean: null,\n                    stdDev: null,\n                    areaUnit: null,\n                    unit: null,\n                };\n                this._calculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n            }\n            else if (annotation.invalidated) {\n                this._throttledCalculateCachedStats(annotation, viewport, renderingEngine, enabledElement);\n            }\n        }\n    }\n    updateClosedCachedStats({ viewport, points, imageData, metadata, cachedStats, targetId, modalityUnit, canvasCoordinates, calibratedScale, deltaInX, deltaInY, }) {\n        const { scale, areaUnit, unit } = calibratedScale;\n        const { voxelManager } = viewport.getImageData();\n        const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[0]);\n        worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n        worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n        worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n        let iMin = worldPosIndex[0];\n        let iMax = worldPosIndex[0];\n        let jMin = worldPosIndex[1];\n        let jMax = worldPosIndex[1];\n        let kMin = worldPosIndex[2];\n        let kMax = worldPosIndex[2];\n        for (let j = 1; j < points.length; j++) {\n            const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[j]);\n            worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n            worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n            worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n            iMin = Math.min(iMin, worldPosIndex[0]);\n            iMax = Math.max(iMax, worldPosIndex[0]);\n            jMin = Math.min(jMin, worldPosIndex[1]);\n            jMax = Math.max(jMax, worldPosIndex[1]);\n            kMin = Math.min(kMin, worldPosIndex[2]);\n            kMax = Math.max(kMax, worldPosIndex[2]);\n        }\n        const worldPosIndex2 = csUtils.transformWorldToIndex(imageData, points[1]);\n        worldPosIndex2[0] = Math.floor(worldPosIndex2[0]);\n        worldPosIndex2[1] = Math.floor(worldPosIndex2[1]);\n        worldPosIndex2[2] = Math.floor(worldPosIndex2[2]);\n        let area = polyline.getArea(canvasCoordinates) / scale / scale;\n        area *= deltaInX * deltaInY;\n        let perimeter = calculatePerimeter(canvasCoordinates, closed) / scale;\n        perimeter *= Math.sqrt(Math.pow(deltaInX, 2) + Math.pow(deltaInY, 2));\n        const iDelta = 0.01 * (iMax - iMin);\n        const jDelta = 0.01 * (jMax - jMin);\n        const kDelta = 0.01 * (kMax - kMin);\n        iMin = Math.floor(iMin - iDelta);\n        iMax = Math.ceil(iMax + iDelta);\n        jMin = Math.floor(jMin - jDelta);\n        jMax = Math.ceil(jMax + jDelta);\n        kMin = Math.floor(kMin - kDelta);\n        kMax = Math.ceil(kMax + kDelta);\n        const boundsIJK = [\n            [iMin, iMax],\n            [jMin, jMax],\n            [kMin, kMax],\n        ];\n        const worldPosEnd = imageData.indexToWorld([iMax, jMax, kMax]);\n        const canvasPosEnd = viewport.worldToCanvas(worldPosEnd);\n        let curRow = 0;\n        let intersections = [];\n        let intersectionCounter = 0;\n        let pointsInShape;\n        if (voxelManager) {\n            pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                imageData,\n                isInObject: (pointLPS, _pointIJK) => {\n                    let result = true;\n                    const point = viewport.worldToCanvas(pointLPS);\n                    if (point[1] != curRow) {\n                        intersectionCounter = 0;\n                        curRow = point[1];\n                        intersections = getLineSegmentIntersectionsCoordinates(canvasCoordinates, point, [canvasPosEnd[0], point[1]]);\n                        intersections.sort((function (index) {\n                            return function (a, b) {\n                                return a[index] === b[index]\n                                    ? 0\n                                    : a[index] < b[index]\n                                        ? -1\n                                        : 1;\n                            };\n                        })(0));\n                    }\n                    if (intersections.length && point[0] > intersections[0][0]) {\n                        intersections.shift();\n                        intersectionCounter++;\n                    }\n                    if (intersectionCounter % 2 === 0) {\n                        result = false;\n                    }\n                    return result;\n                },\n                boundsIJK,\n                returnPoints: this.configuration.storePointData,\n            });\n        }\n        const stats = this.configuration.statsCalculator.getStatistics();\n        cachedStats[targetId] = {\n            Modality: metadata.Modality,\n            area,\n            perimeter,\n            mean: stats.mean?.value,\n            max: stats.max?.value,\n            min: stats.min?.value,\n            stdDev: stats.stdDev?.value,\n            statsArray: stats.array,\n            pointsInShape: pointsInShape,\n            areaUnit,\n            modalityUnit,\n            unit,\n        };\n    }\n    updateOpenCachedStats({ targetId, metadata, canvasCoordinates, cachedStats, modalityUnit, calibratedScale, deltaInX, deltaInY, }) {\n        const { scale, unit } = calibratedScale;\n        let length = calculatePerimeter(canvasCoordinates, closed) / scale;\n        length *= Math.sqrt(Math.pow(deltaInX, 2) + Math.pow(deltaInY, 2));\n        cachedStats[targetId] = {\n            Modality: metadata.Modality,\n            length,\n            modalityUnit,\n            unit,\n        };\n    }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, stdDev, length, perimeter, max, min, isEmptyArea, unit, areaUnit, modalityUnit, } = cachedVolumeStats || {};\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        const areaLine = isEmptyArea\n            ? `Area: Oblique not supported`\n            : `Area: ${csUtils.roundNumber(area)} ${areaUnit}`;\n        textLines.push(areaLine);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Min: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(perimeter)) {\n        textLines.push(`Perimeter: ${csUtils.roundNumber(perimeter)} ${unit}`);\n    }\n    if (csUtils.isNumber(length)) {\n        textLines.push(`${csUtils.roundNumber(length)} ${unit}`);\n    }\n    return textLines;\n}\nexport default PlanarFreehandROITool;\n","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, utilities as csUtils, getEnabledElementByViewportId, } from '@cornerstonejs/core';\nimport { getCalibratedLengthUnitsAndScale } from '../../utilities/getCalibratedUnits';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { triggerAnnotationCompleted, triggerAnnotationModified, } from '../../stateManagement/annotation/helpers/state';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawRectByCoordinates as drawRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store/state';\nimport { ChangeTypes, Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getPixelValueUnits } from '../../utilities/getPixelValueUnits';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\nconst { transformWorldToIndex } = csUtils;\nclass RectangleROITool extends AnnotationTool {\n    static { this.toolName = 'RectangleROI'; }\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            storePointData: false,\n            shadow: true,\n            preventHandleOutsideImage: false,\n            calculateStats: true,\n            getTextLines: defaultGetTextLines,\n            statsCalculator: BasicStatsCalculator,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this.isDrawing = true;\n            const annotation = (this.constructor).createAnnotationForViewport(viewport, {\n                data: {\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                    },\n                    cachedStats: {},\n                },\n            });\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.doneEditMemo();\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (newAnnotation) {\n                triggerAnnotationCompleted(annotation);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox, newAnnotation, } = this.editData;\n            this.createMemo(element, annotation, { newAnnotation });\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n            if (annotation.invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.HandlesUpdated);\n            }\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                triggerAnnotationRenderForViewportIds(viewportIdsToRender);\n                if (newAnnotation) {\n                    triggerAnnotationCompleted(annotation);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const { color, lineWidth, lineDash } = this.getAnnotationStyle({\n                    annotation,\n                    styleSpecifier,\n                });\n                const { viewPlaneNormal, viewUp } = viewport.getCamera();\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit == null) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotationUID) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    activeHandleIndex !== undefined) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates, {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n                const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n                if (!options.visibility) {\n                    data.handles.textBox = {\n                        hasMoved: false,\n                        worldPosition: [0, 0, 0],\n                        worldBoundingBox: {\n                            topLeft: [0, 0, 0],\n                            topRight: [0, 0, 0],\n                            bottomLeft: [0, 0, 0],\n                            bottomRight: [0, 0, 0],\n                        },\n                    };\n                    continue;\n                }\n                const textLines = this.configuration.getTextLines(data, targetId);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, options);\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            if (!this.configuration.calculateStats) {\n                return;\n            }\n            const { data } = annotation;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetImageData(targetId);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, voxelManager } = image;\n                const pos1Index = transformWorldToIndex(imageData, worldPos1);\n                pos1Index[0] = Math.floor(pos1Index[0]);\n                pos1Index[1] = Math.floor(pos1Index[1]);\n                pos1Index[2] = Math.floor(pos1Index[2]);\n                const pos2Index = transformWorldToIndex(imageData, worldPos2);\n                pos2Index[0] = Math.floor(pos2Index[0]);\n                pos2Index[1] = Math.floor(pos2Index[1]);\n                pos2Index[2] = Math.floor(pos2Index[2]);\n                if (this._isInsideVolume(pos1Index, pos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(pos1Index[0], pos2Index[0]);\n                    const iMax = Math.max(pos1Index[0], pos2Index[0]);\n                    const jMin = Math.min(pos1Index[1], pos2Index[1]);\n                    const jMax = Math.max(pos1Index[1], pos2Index[1]);\n                    const kMin = Math.min(pos1Index[2], pos2Index[2]);\n                    const kMax = Math.max(pos1Index[2], pos2Index[2]);\n                    const boundsIJK = [\n                        [iMin, iMax],\n                        [jMin, jMax],\n                        [kMin, kMax],\n                    ];\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const handles = [pos1Index, pos2Index];\n                    const { scale, areaUnit } = getCalibratedLengthUnitsAndScale(image, handles);\n                    const area = Math.abs(worldWidth * worldHeight) / (scale * scale);\n                    const pixelUnitsOptions = {\n                        isPreScaled: isViewportPreScaled(viewport, targetId),\n                        isSuvScaled: this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId),\n                    };\n                    const modalityUnit = getPixelValueUnits(metadata.Modality, annotation.metadata.referencedImageId, pixelUnitsOptions);\n                    let pointsInShape;\n                    if (voxelManager) {\n                        pointsInShape = voxelManager.forEach(this.configuration.statsCalculator.statsCallback, {\n                            boundsIJK,\n                            imageData,\n                            returnPoints: this.configuration.storePointData,\n                        });\n                    }\n                    const stats = this.configuration.statsCalculator.getStatistics();\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean: stats.mean?.value,\n                        stdDev: stats.stdDev?.value,\n                        max: stats.max?.value,\n                        min: stats.min?.value,\n                        statsArray: stats.array,\n                        pointsInShape: pointsInShape,\n                        areaUnit,\n                        modalityUnit,\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            const invalidated = annotation.invalidated;\n            annotation.invalidated = false;\n            if (invalidated) {\n                triggerAnnotationModified(annotation, element, ChangeTypes.StatsUpdated);\n            }\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n    static { this.hydrate = (viewportId, points, options) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            return;\n        }\n        const { FrameOfReferenceUID, referencedImageId, viewPlaneNormal, instance, viewport, } = this.hydrateBase(RectangleROITool, enabledElement, points, options);\n        const { toolInstance, ...serializableOptions } = options || {};\n        const annotation = {\n            annotationUID: options?.annotationUID || csUtils.uuidv4(),\n            data: {\n                handles: {\n                    points,\n                    activeHandleIndex: null,\n                },\n                label: '',\n                cachedStats: {},\n            },\n            highlighted: false,\n            autoGenerated: false,\n            invalidated: false,\n            isLocked: false,\n            isVisible: true,\n            metadata: {\n                toolName: instance.getToolName(),\n                viewPlaneNormal,\n                FrameOfReferenceUID,\n                referencedImageId,\n                ...serializableOptions,\n            },\n        };\n        addAnnotation(annotation, viewport.element);\n        triggerAnnotationRenderForViewportIds([viewport.id]);\n    }; }\n}\nfunction defaultGetTextLines(data, targetId) {\n    const cachedVolumeStats = data.cachedStats[targetId];\n    const { area, mean, max, stdDev, areaUnit, modalityUnit, min } = cachedVolumeStats;\n    if (mean === undefined || mean === null) {\n        return;\n    }\n    const textLines = [];\n    if (csUtils.isNumber(area)) {\n        textLines.push(`Area: ${csUtils.roundNumber(area)} ${areaUnit}`);\n    }\n    if (csUtils.isNumber(mean)) {\n        textLines.push(`Mean: ${csUtils.roundNumber(mean)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(max)) {\n        textLines.push(`Max: ${csUtils.roundNumber(max)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(min)) {\n        textLines.push(`Max: ${csUtils.roundNumber(min)} ${modalityUnit}`);\n    }\n    if (csUtils.isNumber(stdDev)) {\n        textLines.push(`Std Dev: ${csUtils.roundNumber(stdDev)} ${modalityUnit}`);\n    }\n    return textLines;\n}\nexport default RectangleROITool;\n","import { getEnabledElement, eventTarget } from '@cornerstonejs/core';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { Events, ToolModes, StrategyCallbacks } from '../../enums';\nimport { fillInsideSphere, thresholdInsideSphere, thresholdInsideSphereIsland, } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { thresholdInsideCircle, fillInsideCircle, } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport LabelmapBaseTool from './LabelmapBaseTool';\nimport { getStrategyData } from './strategies/utils/getStrategyData';\nclass BrushTool extends LabelmapBaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE_CIRCLE: fillInsideCircle,\n                ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n                FILL_INSIDE_SPHERE: fillInsideSphere,\n                ERASE_INSIDE_SPHERE: eraseInsideSphere,\n                THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n                THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,\n                THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL: thresholdInsideSphereIsland,\n            },\n            defaultStrategy: 'FILL_INSIDE_CIRCLE',\n            activeStrategy: 'FILL_INSIDE_CIRCLE',\n            brushSize: 25,\n            useCenterSegmentIndex: false,\n            preview: {\n                enabled: false,\n                previewColors: {\n                    0: [255, 255, 255, 128],\n                },\n                previewTimeMs: 250,\n                previewMoveDistance: 8,\n                dragMoveDistance: 4,\n                dragTimeMs: 500,\n            },\n            actions: {\n                [StrategyCallbacks.AcceptPreview]: {\n                    method: StrategyCallbacks.AcceptPreview,\n                    bindings: [\n                        {\n                            key: 'Enter',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.RejectPreview]: {\n                    method: StrategyCallbacks.RejectPreview,\n                    bindings: [\n                        {\n                            key: 'Escape',\n                        },\n                    ],\n                },\n                [StrategyCallbacks.Interpolate]: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'i',\n                        },\n                    ],\n                    configuration: {\n                        useBallStructuringElement: true,\n                        noUseDistanceTransform: true,\n                        noUseExtrapolation: true,\n                    },\n                },\n                interpolateExtrapolation: {\n                    method: StrategyCallbacks.Interpolate,\n                    bindings: [\n                        {\n                            key: 'e',\n                        },\n                    ],\n                    configuration: {},\n                },\n            },\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolPassive = (evt) => {\n            this.disableCursor();\n        };\n        this.onSetToolEnabled = () => {\n            this.disableCursor();\n        };\n        this.onSetToolDisabled = (evt) => {\n            this.disableCursor();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this._editData = this.createEditData(element);\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            this._previewData.isDrag = false;\n            this._previewData.timerStart = Date.now();\n            const hoverData = this._hoverData || this.createHoverData(element);\n            triggerAnnotationRenderForViewportUIDs(hoverData.viewportIdsToRender);\n            const operationData = this.getOperationData(element);\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionStart);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.updateCursor(evt);\n                if (!this.configuration.preview.enabled) {\n                    return;\n                }\n                const { previewTimeMs, previewMoveDistance, dragMoveDistance } = this.configuration.preview;\n                const { currentPoints, element } = evt.detail;\n                const { canvas } = currentPoints;\n                const { startPoint, timer, timerStart, isDrag } = this._previewData;\n                if (isDrag) {\n                    return;\n                }\n                const delta = vec2.distance(canvas, startPoint);\n                const time = Date.now() - timerStart;\n                if (delta > previewMoveDistance ||\n                    (time > previewTimeMs && delta > dragMoveDistance)) {\n                    if (timer) {\n                        window.clearTimeout(timer);\n                        this._previewData.timer = null;\n                    }\n                    if (!isDrag) {\n                        this.rejectPreview(element);\n                    }\n                }\n                if (!this._previewData.timer) {\n                    const timer = window.setTimeout(this.previewCallback, 250);\n                    Object.assign(this._previewData, {\n                        timerStart: Date.now(),\n                        timer,\n                        startPoint: canvas,\n                        element,\n                    });\n                }\n            }\n        };\n        this.previewCallback = () => {\n            if (this._previewData.isDrag) {\n                this._previewData.timer = null;\n                return;\n            }\n            this._previewData.timer = null;\n            const operationData = this.getOperationData(this._previewData.element);\n            const enabledElement = getEnabledElement(this._previewData.element);\n            if (!enabledElement) {\n                return;\n            }\n            const { viewport } = enabledElement;\n            const activeStrategy = this.configuration.activeStrategy;\n            const strategyData = getStrategyData({\n                operationData,\n                viewport,\n                strategy: activeStrategy,\n            });\n            if (!operationData) {\n                return;\n            }\n            const memo = this.createMemo(operationData.segmentationId, strategyData.segmentationVoxelManager);\n            this._previewData.preview = this.applyActiveStrategyCallback(getEnabledElement(this._previewData.element), {\n                ...operationData,\n                ...strategyData,\n                memo,\n            }, StrategyCallbacks.Preview);\n        };\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element, currentPoints } = eventData;\n            const enabledElement = getEnabledElement(element);\n            this.updateCursor(evt);\n            const { viewportIdsToRender } = this._hoverData;\n            triggerAnnotationRenderForViewportUIDs(viewportIdsToRender);\n            const delta = vec2.distance(currentPoints.canvas, this._previewData.startPoint);\n            const { dragTimeMs, dragMoveDistance } = this.configuration.preview;\n            if (!this._previewData.isDrag &&\n                Date.now() - this._previewData.timerStart < dragTimeMs &&\n                delta < dragMoveDistance) {\n                return;\n            }\n            if (this._previewData.timer) {\n                window.clearTimeout(this._previewData.timer);\n                this._previewData.timer = null;\n            }\n            this._previewData.preview = this.applyActiveStrategy(enabledElement, this.getOperationData(element));\n            this._previewData.element = element;\n            this._previewData.timerStart = Date.now() + dragTimeMs;\n            this._previewData.isDrag = true;\n            this._previewData.startPoint = currentPoints.canvas;\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const operationData = this.getOperationData(element);\n            if (!this._previewData.preview && !this._previewData.isDrag) {\n                this.applyActiveStrategy(enabledElement, operationData);\n            }\n            this.doneEditMemo();\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            this.updateCursor(evt);\n            this._editData = null;\n            this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.OnInteractionEnd);\n            if (!this._previewData.isDrag) {\n                this.acceptPreview(element);\n            }\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    disableCursor() {\n        this._hoverData = undefined;\n        this.rejectPreview();\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const { element } = eventData;\n        const { currentPoints } = eventData;\n        const centerCanvas = currentPoints.canvas;\n        this._hoverData = this.createHoverData(element, centerCanvas);\n        this._calculateCursor(element, centerCanvas);\n        if (!this._hoverData) {\n            return;\n        }\n        triggerAnnotationRenderForViewportUIDs(this._hoverData.viewportIdsToRender);\n    }\n    _calculateCursor(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvasToWorld } = viewport;\n        const camera = viewport.getCamera();\n        const { brushSize } = this.configuration;\n        const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n        const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n        const viewRight = vec3.create();\n        vec3.cross(viewRight, viewUp, viewPlaneNormal);\n        const centerCursorInWorld = canvasToWorld([\n            centerCanvas[0],\n            centerCanvas[1],\n        ]);\n        const bottomCursorInWorld = vec3.create();\n        const topCursorInWorld = vec3.create();\n        const leftCursorInWorld = vec3.create();\n        const rightCursorInWorld = vec3.create();\n        for (let i = 0; i <= 2; i++) {\n            bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;\n            topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;\n            leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;\n            rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;\n        }\n        if (!this._hoverData) {\n            return;\n        }\n        const { brushCursor } = this._hoverData;\n        const { data } = brushCursor;\n        if (data.handles === undefined) {\n            data.handles = {};\n        }\n        data.handles.points = [\n            bottomCursorInWorld,\n            topCursorInWorld,\n            leftCursorInWorld,\n            rightCursorInWorld,\n        ];\n        const activeStrategy = this.configuration.activeStrategy;\n        const strategy = this.configuration.strategies[activeStrategy];\n        if (typeof strategy?.computeInnerCircleRadius === 'function') {\n            strategy.computeInnerCircleRadius({\n                configuration: this.configuration,\n                viewport,\n            });\n        }\n        data.invalidated = false;\n    }\n    getStatistics(element, segmentIndices) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        const stats = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.GetStatistics, segmentIndices);\n        return stats;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        if (!enabledElement) {\n            return;\n        }\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        super.acceptPreview(element);\n    }\n    interpolate(element, config) {\n        if (!element) {\n            return;\n        }\n        const enabledElement = getEnabledElement(element);\n        this._previewData.preview = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.Interpolate, config.configuration);\n        this._previewData.isDrag = true;\n    }\n    invalidateBrushCursor() {\n        if (this._hoverData === undefined) {\n            return;\n        }\n        const { data } = this._hoverData.brushCursor;\n        const { viewport } = this._hoverData;\n        data.invalidated = true;\n        const { segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        this._hoverData.brushCursor.metadata.segmentColor = segmentColor;\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._hoverData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n        if (!viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const brushCursor = this._hoverData.brushCursor;\n        if (brushCursor.data.invalidated === true) {\n            const { centerCanvas } = this._hoverData;\n            const { element } = viewport;\n            this._calculateCursor(element, centerCanvas);\n        }\n        const toolMetadata = brushCursor.metadata;\n        if (!toolMetadata) {\n            return;\n        }\n        const annotationUID = toolMetadata.brushCursorUID;\n        const data = brushCursor.data;\n        const { points } = data.handles;\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const bottom = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const center = [\n            Math.floor((bottom[0] + top[0]) / 2),\n            Math.floor((bottom[1] + top[1]) / 2),\n        ];\n        const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n        const color = `rgb(${toolMetadata.segmentColor?.slice(0, 3) || [0, 0, 0]})`;\n        if (!viewport.getRenderingEngine()) {\n            console.warn('Rendering Engine has been destroyed');\n            return;\n        }\n        const circleUID = '0';\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n            color,\n            lineDash: this.centerSegmentIndexInfo.segmentIndex === 0 ? [1, 2] : null,\n        });\n        const { dynamicRadiusInCanvas } = this.configuration?.threshold || {\n            dynamicRadiusInCanvas: 0,\n        };\n        if (dynamicRadiusInCanvas) {\n            const circleUID1 = '1';\n            drawCircleSvg(svgDrawingHelper, annotationUID, circleUID1, center, dynamicRadiusInCanvas, {\n                color,\n            });\n        }\n    }\n}\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { getEnabledElement, cache, utilities as csUtils, Enums, eventTarget, BaseVolumeViewport, StackViewport, } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport { getActiveSegmentation } from '../../stateManagement/segmentation/getActiveSegmentation';\nimport { getLockedSegmentIndices } from '../../stateManagement/segmentation/segmentLocking';\nimport { getSegmentation } from '../../stateManagement/segmentation/getSegmentation';\nimport { getCurrentLabelmapImageIdForViewport } from '../../stateManagement/segmentation/getCurrentLabelmapImageIdForViewport';\nimport { getSegmentIndexColor } from '../../stateManagement/segmentation/config/segmentationColor';\nimport { getActiveSegmentIndex } from '../../stateManagement/segmentation/getActiveSegmentIndex';\nimport { StrategyCallbacks } from '../../enums';\nimport * as LabelmapMemo from '../../utilities/segmentation/createLabelmapMemo';\nimport { getAllAnnotations, removeAnnotation, } from '../../stateManagement/annotation/annotationState';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport { isPointInsidePolyline3D } from '../../utilities/math/polyline';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { fillInsideCircle } from './strategies';\nexport default class LabelmapBaseTool extends BaseTool {\n    static { this.previewData = {\n        preview: null,\n        element: null,\n        timerStart: 0,\n        timer: null,\n        startPoint: [NaN, NaN],\n        isDrag: false,\n    }; }\n    constructor(toolProps, defaultToolProps) {\n        super(toolProps, defaultToolProps);\n        this.memoMap = new Map();\n        this.acceptedMemoIds = new Map();\n        this.centerSegmentIndexInfo = {\n            segmentIndex: null,\n            hasSegmentIndex: false,\n            hasPreviewIndex: false,\n            changedIndices: [],\n        };\n    }\n    _historyRedoHandler(evt) {\n        const { id, operationType } = evt.detail;\n        if (operationType !== 'labelmap') {\n            return;\n        }\n        if (this.acceptedMemoIds.has(id)) {\n            this._hoverData = null;\n            const memoData = this.acceptedMemoIds.get(id);\n            const element = memoData?.element;\n            const operationData = this.getOperationData(element);\n            operationData.segmentIndex = memoData?.segmentIndex;\n            if (element) {\n                this.applyActiveStrategyCallback(getEnabledElement(element), operationData, StrategyCallbacks.AcceptPreview);\n            }\n        }\n        this._previewData.isDrag = true;\n    }\n    get _previewData() {\n        return LabelmapBaseTool.previewData;\n    }\n    createMemo(segmentationId, segmentationVoxelManager) {\n        const voxelManagerId = segmentationVoxelManager.id;\n        if (this.memo &&\n            this.memo.segmentationVoxelManager === segmentationVoxelManager) {\n            return this.memo;\n        }\n        let memo = this.memoMap.get(voxelManagerId);\n        if (!memo) {\n            memo = LabelmapMemo.createLabelmapMemo(segmentationId, segmentationVoxelManager);\n            this.memoMap.set(voxelManagerId, memo);\n        }\n        else {\n            if (memo.redoVoxelManager) {\n                memo = LabelmapMemo.createLabelmapMemo(segmentationId, segmentationVoxelManager);\n                this.memoMap.set(voxelManagerId, memo);\n            }\n        }\n        this.memo = memo;\n        return memo;\n    }\n    createEditData(element) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const activeSegmentation = getActiveSegmentation(viewport.id);\n        if (!activeSegmentation) {\n            const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n                detail: {\n                    type: 'Segmentation',\n                    message: 'No active segmentation detected, create a segmentation representation before using the brush tool',\n                },\n                cancelable: true,\n            });\n            eventTarget.dispatchEvent(event);\n            return null;\n        }\n        const { segmentationId } = activeSegmentation;\n        const segmentsLocked = getLockedSegmentIndices(segmentationId);\n        const { representationData } = getSegmentation(segmentationId);\n        const editData = this.getEditData({\n            viewport,\n            representationData,\n            segmentsLocked,\n            segmentationId,\n        });\n        return editData;\n    }\n    getEditData({ viewport, representationData, segmentsLocked, segmentationId, }) {\n        if (viewport instanceof BaseVolumeViewport) {\n            const { volumeId } = representationData[SegmentationRepresentations.Labelmap];\n            const actors = viewport.getActors();\n            const isStackViewport = viewport instanceof StackViewport;\n            if (isStackViewport) {\n                const event = new CustomEvent(Enums.Events.ERROR_EVENT, {\n                    detail: {\n                        type: 'Segmentation',\n                        message: 'Cannot perform brush operation on the selected viewport',\n                    },\n                    cancelable: true,\n                });\n                eventTarget.dispatchEvent(event);\n                return null;\n            }\n            const volumes = actors.map((actorEntry) => cache.getVolume(actorEntry.referencedId));\n            const segmentationVolume = cache.getVolume(volumeId);\n            const referencedVolumeIdToThreshold = volumes.find((volume) => csUtils.isEqual(volume.dimensions, segmentationVolume.dimensions))?.volumeId || volumes[0]?.volumeId;\n            return {\n                volumeId,\n                referencedVolumeId: this.configuration.threshold?.volumeId ??\n                    referencedVolumeIdToThreshold,\n                segmentsLocked,\n            };\n        }\n        else {\n            const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n            if (!segmentationImageId) {\n                return;\n            }\n            return {\n                imageId: segmentationImageId,\n                segmentsLocked,\n            };\n        }\n    }\n    createHoverData(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const viewportIdsToRender = [viewport.id];\n        const { segmentIndex, segmentationId, segmentColor } = this.getActiveSegmentationData(viewport) || {};\n        const brushCursor = {\n            metadata: {\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                referencedImageId: '',\n                toolName: this.getToolName(),\n                segmentColor,\n            },\n            data: {},\n        };\n        return {\n            brushCursor,\n            centerCanvas,\n            segmentIndex,\n            viewport,\n            segmentationId,\n            segmentColor,\n            viewportIdsToRender,\n        };\n    }\n    getActiveSegmentationData(viewport) {\n        const viewportId = viewport.id;\n        const activeRepresentation = getActiveSegmentation(viewportId);\n        if (!activeRepresentation) {\n            return;\n        }\n        const { segmentationId } = activeRepresentation;\n        const segmentIndex = getActiveSegmentIndex(segmentationId);\n        if (!segmentIndex) {\n            return;\n        }\n        const segmentColor = getSegmentIndexColor(viewportId, segmentationId, segmentIndex);\n        return {\n            segmentIndex,\n            segmentationId,\n            segmentColor,\n        };\n    }\n    getOperationData(element) {\n        const editData = this._editData || this.createEditData(element);\n        const { segmentIndex, segmentationId, brushCursor } = this._hoverData || this.createHoverData(element);\n        const { data, metadata = {} } = brushCursor || {};\n        const { viewPlaneNormal, viewUp } = metadata;\n        const configColor = this.configuration.preview?.previewColors?.[segmentIndex];\n        const { viewport } = getEnabledElement(element);\n        const segmentColor = getSegmentIndexColor(viewport.id, segmentationId, segmentIndex);\n        if (!configColor && !segmentColor) {\n            return;\n        }\n        let previewColor = null, previewSegmentIndex = null;\n        if (this.configuration.preview?.enabled) {\n            previewColor = configColor || lightenColor(...segmentColor);\n            previewSegmentIndex = 255;\n        }\n        const operationData = {\n            ...editData,\n            points: data?.handles?.points,\n            segmentIndex,\n            viewPlaneNormal,\n            previewOnHover: !this._previewData.isDrag,\n            toolGroupId: this.toolGroupId,\n            segmentationId,\n            viewUp,\n            centerSegmentIndexInfo: this.centerSegmentIndexInfo,\n            activeStrategy: this.configuration.activeStrategy,\n            configuration: this.configuration,\n            previewColor,\n            previewSegmentIndex,\n            createMemo: this.createMemo.bind(this),\n        };\n        return operationData;\n    }\n    addPreview(element = this._previewData.element, options) {\n        const { _previewData } = this;\n        const acceptReject = options?.acceptReject;\n        if (acceptReject === true) {\n            this.acceptPreview(element);\n        }\n        else if (acceptReject === false) {\n            this.rejectPreview(element);\n        }\n        const enabledElement = getEnabledElement(element);\n        const results = this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.AddPreview);\n        _previewData.isDrag = true;\n        return results;\n    }\n    rejectPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        this.doneEditMemo();\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, this.getOperationData(element), StrategyCallbacks.RejectPreview);\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    acceptPreview(element = this._previewData.element) {\n        if (!element) {\n            return;\n        }\n        const operationData = this.getOperationData(element);\n        if (this.memo && this.memo.id) {\n            this.acceptedMemoIds.set(this.memo.id, {\n                element,\n                segmentIndex: operationData.segmentIndex,\n            });\n        }\n        const enabledElement = getEnabledElement(element);\n        this.applyActiveStrategyCallback(enabledElement, operationData, StrategyCallbacks.AcceptPreview);\n        this.doneEditMemo();\n        this._previewData.preview = null;\n        this._previewData.isDrag = false;\n    }\n    static viewportContoursToLabelmap(viewport, options) {\n        const removeContours = options?.removeContours ?? true;\n        const annotations = getAllAnnotations();\n        const viewAnnotations = filterAnnotationsForDisplay(viewport, annotations);\n        if (!viewAnnotations?.length) {\n            return;\n        }\n        const contourAnnotations = viewAnnotations.filter((annotation) => annotation.data.contour?.polyline?.length);\n        if (!contourAnnotations.length) {\n            return;\n        }\n        const brushInstance = new LabelmapBaseTool({}, {\n            configuration: {\n                strategies: {\n                    FILL_INSIDE_CIRCLE: fillInsideCircle,\n                },\n                activeStrategy: 'FILL_INSIDE_CIRCLE',\n            },\n        });\n        const preview = brushInstance.addPreview(viewport.element);\n        const { memo, segmentationId } = preview;\n        const previewVoxels = memo?.voxelManager;\n        const segmentationVoxels = previewVoxels.sourceVoxelManager || previewVoxels;\n        const { dimensions } = previewVoxels;\n        const imageData = viewport\n            .getDefaultActor()\n            .actor.getMapper()\n            .getInputData();\n        for (const annotation of contourAnnotations) {\n            const boundsIJK = [\n                [Infinity, -Infinity],\n                [Infinity, -Infinity],\n                [Infinity, -Infinity],\n            ];\n            const { polyline } = annotation.data.contour;\n            for (const point of polyline) {\n                const indexPoint = imageData.worldToIndex(point);\n                indexPoint.forEach((v, idx) => {\n                    boundsIJK[idx][0] = Math.min(boundsIJK[idx][0], v);\n                    boundsIJK[idx][1] = Math.max(boundsIJK[idx][1], v);\n                });\n            }\n            boundsIJK.forEach((bound, idx) => {\n                bound[0] = Math.round(Math.max(0, bound[0]));\n                bound[1] = Math.round(Math.min(dimensions[idx] - 1, bound[1]));\n            });\n            const activeIndex = getActiveSegmentIndex(segmentationId);\n            const startPoint = annotation.data.handles?.[0] || polyline[0];\n            const startIndex = imageData.worldToIndex(startPoint).map(Math.round);\n            const startValue = segmentationVoxels.getAtIJKPoint(startIndex) || 0;\n            let hasZeroIndex = false;\n            let hasPositiveIndex = false;\n            for (const polyPoint of polyline) {\n                const polyIndex = imageData.worldToIndex(polyPoint).map(Math.round);\n                const polyValue = segmentationVoxels.getAtIJKPoint(polyIndex);\n                if (polyValue === startValue) {\n                    hasZeroIndex = true;\n                }\n                else if (polyValue >= 0) {\n                    hasPositiveIndex = true;\n                }\n            }\n            const hasBoth = hasZeroIndex && hasPositiveIndex;\n            const segmentIndex = hasBoth\n                ? startValue\n                : startValue === 0\n                    ? activeIndex\n                    : 0;\n            for (let i = boundsIJK[0][0]; i <= boundsIJK[0][1]; i++) {\n                for (let j = boundsIJK[1][0]; j <= boundsIJK[1][1]; j++) {\n                    for (let k = boundsIJK[2][0]; k <= boundsIJK[2][1]; k++) {\n                        const worldPoint = imageData.indexToWorld([i, j, k]);\n                        const isContained = isPointInsidePolyline3D(worldPoint, polyline);\n                        if (isContained) {\n                            previewVoxels.setAtIJK(i, j, k, segmentIndex);\n                        }\n                    }\n                }\n            }\n            if (removeContours) {\n                removeAnnotation(annotation.annotationUID);\n            }\n        }\n        const slices = previewVoxels.getArrayOfModifiedSlices();\n        triggerSegmentationDataModified(segmentationId, slices);\n    }\n}\nfunction lightenColor(r, g, b, a, factor = 0.4) {\n    return [\n        Math.round(r + (255 - r) * factor),\n        Math.round(g + (255 - g) * factor),\n        Math.round(b + (255 - b) * factor),\n        a,\n    ];\n}\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getCanvasEllipseCorners, precalculatePointInEllipse, } from '../../../utilities/math/ellipse';\nimport { getBoundingBoxAroundShapeIJK } from '../../../utilities/boundingBox';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nimport { pointInSphere } from '../../../utilities/math/sphere';\nconst { transformWorldToIndex, isEqual } = csUtils;\nconst initializeCircle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, viewport, segmentationImageData, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const [topLeftCanvas, bottomRightCanvas] = getCanvasEllipseCorners(canvasCoordinates);\n        const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n        const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n        const circleCornersIJK = points.map((world) => {\n            return transformWorldToIndex(segmentationImageData, world);\n        });\n        const boundsIJK = getBoundingBoxAroundShapeIJK(circleCornersIJK, segmentationImageData.getDimensions());\n        operationData.isInObject = createPointInEllipse({\n            topLeftWorld,\n            bottomRightWorld,\n            center,\n        });\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInEllipse(worldInfo) {\n    const { topLeftWorld, bottomRightWorld, center } = worldInfo;\n    const xRadius = Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2;\n    const yRadius = Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2;\n    const zRadius = Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2;\n    const radius = Math.max(xRadius, yRadius, zRadius);\n    if (isEqual(xRadius, radius) &&\n        isEqual(yRadius, radius) &&\n        isEqual(zRadius, radius)) {\n        const sphereObj = {\n            center,\n            radius,\n            radius2: radius * radius,\n        };\n        return (pointLPS) => pointInSphere(sphereObj, pointLPS);\n    }\n    const ellipseObj = {\n        center: center,\n        xRadius,\n        yRadius,\n        zRadius,\n    };\n    const { precalculated } = precalculatePointInEllipse(ellipseObj, {});\n    return precalculated;\n}\nconst CIRCLE_STRATEGY = new BrushStrategy('Circle', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst CIRCLE_THRESHOLD_STRATEGY = new BrushStrategy('CircleThreshold', compositions.regionFill, compositions.setValue, initializeCircle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideCircle = CIRCLE_STRATEGY.strategyFunction;\nconst thresholdInsideCircle = CIRCLE_THRESHOLD_STRATEGY.strategyFunction;\nexport function fillOutsideCircle() {\n    throw new Error('Not yet implemented');\n}\nexport { CIRCLE_STRATEGY, CIRCLE_THRESHOLD_STRATEGY, fillInsideCircle, thresholdInsideCircle, createPointInEllipse as createEllipseInPoint, };\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils, StackViewport } from '@cornerstonejs/core';\nimport { getBoundingBoxAroundShapeIJK, getBoundingBoxAroundShapeWorld, } from '../../../utilities/boundingBox';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { getStrategyData } from './utils/getStrategyData';\nimport { isAxisAlignedRectangle } from '../../../utilities/rectangleROITool/isAxisAlignedRectangle';\nimport BrushStrategy from './BrushStrategy';\nimport { StrategyCallbacks } from '../../../enums';\nimport compositions from './compositions';\nconst { transformWorldToIndex } = csUtils;\nconst initializeRectangle = {\n    [StrategyCallbacks.Initialize]: (operationData) => {\n        const { points, imageVoxelManager, viewport, segmentationImageData, segmentationVoxelManager, } = operationData;\n        if (!points) {\n            return;\n        }\n        const center = vec3.fromValues(0, 0, 0);\n        points.forEach((point) => {\n            vec3.add(center, center, point);\n        });\n        vec3.scale(center, center, 1 / points.length);\n        operationData.centerWorld = center;\n        operationData.centerIJK = transformWorldToIndex(segmentationImageData, center);\n        const { boundsIJK, pointInShapeFn } = createPointInRectangle(viewport, points, segmentationImageData);\n        operationData.isInObject = pointInShapeFn;\n        operationData.isInObjectBoundsIJK = boundsIJK;\n    },\n};\nfunction createPointInRectangle(viewport, points, segmentationImageData) {\n    let rectangleCornersIJK = points.map((world) => {\n        return transformWorldToIndex(segmentationImageData, world);\n    });\n    rectangleCornersIJK = rectangleCornersIJK.map((point) => {\n        return point.map((coord) => {\n            return Math.round(coord);\n        });\n    });\n    const boundsIJK = getBoundingBoxAroundShapeIJK(rectangleCornersIJK, segmentationImageData.getDimensions());\n    const isStackViewport = viewport instanceof StackViewport;\n    const isAligned = isStackViewport || isAxisAlignedRectangle(rectangleCornersIJK);\n    const direction = segmentationImageData.getDirection();\n    const spacing = segmentationImageData.getSpacing();\n    const { viewPlaneNormal } = viewport.getCamera();\n    const EPS = csUtils.getSpacingInNormalDirection({\n        direction,\n        spacing,\n    }, viewPlaneNormal);\n    const pointsBoundsLPS = getBoundingBoxAroundShapeWorld(points);\n    let [[xMin, xMax], [yMin, yMax], [zMin, zMax]] = pointsBoundsLPS;\n    xMin -= EPS;\n    xMax += EPS;\n    yMin -= EPS;\n    yMax += EPS;\n    zMin -= EPS;\n    zMax += EPS;\n    const pointInShapeFn = isAligned\n        ? () => true\n        : (pointLPS) => {\n            const [x, y, z] = pointLPS;\n            const xInside = x >= xMin && x <= xMax;\n            const yInside = y >= yMin && y <= yMax;\n            const zInside = z >= zMin && z <= zMax;\n            return xInside && yInside && zInside;\n        };\n    return { boundsIJK, pointInShapeFn };\n}\nconst RECTANGLE_STRATEGY = new BrushStrategy('Rectangle', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.preview, compositions.labelmapStatistics);\nconst RECTANGLE_THRESHOLD_STRATEGY = new BrushStrategy('RectangleThreshold', compositions.regionFill, compositions.setValue, initializeRectangle, compositions.determineSegmentIndex, compositions.dynamicThreshold, compositions.threshold, compositions.preview, compositions.islandRemoval, compositions.labelmapStatistics);\nconst fillInsideRectangle = RECTANGLE_STRATEGY.strategyFunction;\nconst thresholdInsideRectangle = RECTANGLE_THRESHOLD_STRATEGY.strategyFunction;\nexport { RECTANGLE_STRATEGY, RECTANGLE_THRESHOLD_STRATEGY, fillInsideRectangle, thresholdInsideRectangle, };\n","import { utilities, BaseVolumeViewport, StackViewport, cache, metaData, } from '@cornerstonejs/core';\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\nimport { vec3 } from 'gl-matrix';\nfunction annotationHydration(viewport, toolName, worldPoints, options) {\n    const viewReference = viewport.getViewReference();\n    const { viewPlaneNormal, FrameOfReferenceUID } = viewReference;\n    const annotation = {\n        annotationUID: options?.annotationUID || utilities.uuidv4(),\n        data: {\n            handles: {\n                points: worldPoints,\n            },\n        },\n        highlighted: false,\n        autoGenerated: false,\n        invalidated: false,\n        isLocked: false,\n        isVisible: true,\n        metadata: {\n            toolName,\n            viewPlaneNormal,\n            FrameOfReferenceUID,\n            referencedImageId: getReferencedImageId(viewport, worldPoints[0], viewPlaneNormal),\n            ...options,\n        },\n    };\n    addAnnotation(annotation, viewport.element);\n    return annotation;\n}\nfunction getReferencedImageId(viewport, worldPos, viewPlaneNormal) {\n    let referencedImageId;\n    if (viewport instanceof StackViewport) {\n        referencedImageId = getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal);\n    }\n    else if (viewport instanceof BaseVolumeViewport) {\n        const targetId = getTargetId(viewport);\n        const volumeId = utilities.getVolumeId(targetId);\n        const imageVolume = cache.getVolume(volumeId);\n        referencedImageId = utilities.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n    }\n    else {\n        throw new Error('getReferencedImageId: viewport must be a StackViewport or BaseVolumeViewport');\n    }\n    return referencedImageId;\n}\nfunction getTargetId(viewport) {\n    const targetId = viewport.getViewReferenceId?.();\n    if (targetId) {\n        return targetId;\n    }\n    if (viewport instanceof BaseVolumeViewport) {\n        return `volumeId:${getTargetVolumeId(viewport)}`;\n    }\n    throw new Error('getTargetId: viewport must have a getTargetId method');\n}\nfunction getTargetVolumeId(viewport) {\n    const actorEntries = viewport.getActors();\n    if (!actorEntries) {\n        return;\n    }\n    return actorEntries.find((actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume')?.uid;\n}\nfunction getClosestImageIdForStackViewport(viewport, worldPos, viewPlaneNormal) {\n    const imageIds = viewport.getImageIds();\n    if (!imageIds || !imageIds.length) {\n        return;\n    }\n    const distanceImagePairs = imageIds.map((imageId) => {\n        const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n        const distance = calculateDistanceToImage(worldPos, imagePositionPatient, viewPlaneNormal);\n        return { imageId, distance };\n    });\n    distanceImagePairs.sort((a, b) => a.distance - b.distance);\n    return distanceImagePairs[0].imageId;\n}\nfunction calculateDistanceToImage(worldPos, ImagePositionPatient, viewPlaneNormal) {\n    const dir = vec3.create();\n    vec3.sub(dir, worldPos, ImagePositionPatient);\n    const dot = vec3.dot(dir, viewPlaneNormal);\n    return Math.abs(dot);\n}\nexport { annotationHydration, getClosestImageIdForStackViewport };\n","function extend2DBoundingBoxInViewAxis(boundsIJK, numSlicesToProject) {\n    const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);\n    if (sliceNormalIndex === -1) {\n        throw new Error('3D bounding boxes not supported in an oblique plane');\n    }\n    boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;\n    boundsIJK[sliceNormalIndex][1] += numSlicesToProject;\n    return boundsIJK;\n}\nexport default extend2DBoundingBoxInViewAxis;\n","import { utilities } from '@cornerstonejs/core';\nimport { addAnnotation, removeAnnotation } from '../../stateManagement';\nimport { removeContourSegmentationAnnotation } from './removeContourSegmentationAnnotation';\nimport { addContourSegmentationAnnotation } from './addContourSegmentationAnnotation';\nconst DEFAULT_CONTOUR_SEG_TOOL_NAME = 'PlanarFreehandContourSegmentationTool';\nexport default function convertContourSegmentationAnnotation(annotation) {\n    const { polyline } = annotation.data?.contour || {};\n    if (!polyline || polyline.length < 3) {\n        console.warn('Skipping creation of new annotation due to invalid polyline:', polyline);\n        return;\n    }\n    removeAnnotation(annotation.annotationUID);\n    removeContourSegmentationAnnotation(annotation);\n    const startPointWorld = polyline[0];\n    const endPointWorld = polyline[polyline.length - 1];\n    const newAnnotation = {\n        metadata: {\n            ...annotation.metadata,\n            toolName: DEFAULT_CONTOUR_SEG_TOOL_NAME,\n            originalToolName: annotation.metadata.originalToolName || annotation.metadata.toolName,\n        },\n        data: {\n            cachedStats: {},\n            handles: {\n                points: [startPointWorld, endPointWorld],\n                textBox: annotation.data.handles.textBox\n                    ? { ...annotation.data.handles.textBox }\n                    : undefined,\n            },\n            contour: {\n                ...annotation.data.contour,\n            },\n            spline: annotation.data.spline,\n            segmentation: {\n                ...annotation.data.segmentation,\n            },\n        },\n        annotationUID: utilities.uuidv4(),\n        highlighted: true,\n        invalidated: true,\n        isLocked: false,\n        isVisible: undefined,\n        interpolationUID: annotation.interpolationUID,\n        interpolationCompleted: annotation.interpolationCompleted,\n    };\n    addAnnotation(newAnnotation, annotation.metadata.FrameOfReferenceUID);\n    addContourSegmentationAnnotation(newAnnotation);\n    return newAnnotation;\n}\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nconst { isEqual } = csUtils;\nexport default function findHandlePolylineIndex(annotation, handleIndex) {\n    const { polyline } = annotation.data.contour;\n    const { points } = annotation.data.handles;\n    const { length } = points;\n    if (handleIndex === length) {\n        return polyline.length;\n    }\n    if (handleIndex < 0) {\n        handleIndex = (handleIndex + length) % length;\n    }\n    if (handleIndex === 0) {\n        return 0;\n    }\n    const handle = points[handleIndex];\n    const index = polyline.findIndex((point) => isEqual(handle, point));\n    if (index !== -1) {\n        return index;\n    }\n    let closestDistance = Infinity;\n    return polyline.reduce((closestIndex, point, testIndex) => {\n        const distance = vec3.squaredDistance(point, handle);\n        if (distance < closestDistance) {\n            closestDistance = distance;\n            return testIndex;\n        }\n        return closestIndex;\n    }, -1);\n}\n","import isObject from './isObject';\nfunction debounce(func, wait, options) {\n    let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;\n    let lastInvokeTime = 0;\n    let leading = false;\n    let maxing = false;\n    let trailing = true;\n    const useRAF = !wait && wait !== 0 && typeof window.requestAnimationFrame === 'function';\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = Number(wait) || 0;\n    if (isObject(options)) {\n        leading = Boolean(options.leading);\n        maxing = 'maxWait' in options;\n        maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : maxWait;\n        trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n    }\n    function invokeFunc(time) {\n        const args = lastArgs;\n        const thisArg = lastThis;\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n    }\n    function startTimer(pendingFunc, wait) {\n        if (useRAF) {\n            return window.requestAnimationFrame(pendingFunc);\n        }\n        return setTimeout(pendingFunc, wait);\n    }\n    function cancelTimer(id) {\n        if (useRAF) {\n            return window.cancelAnimationFrame(id);\n        }\n        clearTimeout(id);\n    }\n    function leadingEdge(time) {\n        lastInvokeTime = time;\n        timerId = startTimer(timerExpired, wait);\n        return leading ? invokeFunc(time) : result;\n    }\n    function remainingWait(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        const timeWaiting = wait - timeSinceLastCall;\n        return maxing\n            ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n            : timeWaiting;\n    }\n    function shouldInvoke(time) {\n        const timeSinceLastCall = time - lastCallTime;\n        const timeSinceLastInvoke = time - lastInvokeTime;\n        return (lastCallTime === undefined ||\n            timeSinceLastCall >= wait ||\n            timeSinceLastCall < 0 ||\n            (maxing && timeSinceLastInvoke >= maxWait));\n    }\n    function timerExpired() {\n        const time = Date.now();\n        if (shouldInvoke(time)) {\n            return trailingEdge(time);\n        }\n        timerId = startTimer(timerExpired, remainingWait(time));\n    }\n    function trailingEdge(time) {\n        timerId = undefined;\n        if (trailing && lastArgs) {\n            return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n    }\n    function cancel() {\n        if (timerId !== undefined) {\n            cancelTimer(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n    }\n    function flush() {\n        return timerId === undefined ? result : trailingEdge(Date.now());\n    }\n    function pending() {\n        return timerId !== undefined;\n    }\n    function debounced(...args) {\n        const time = Date.now();\n        const isInvoking = shouldInvoke(time);\n        lastArgs = args;\n        lastThis = this;\n        lastCallTime = time;\n        if (isInvoking) {\n            if (timerId === undefined) {\n                return leadingEdge(lastCallTime);\n            }\n            if (maxing) {\n                timerId = startTimer(timerExpired, wait);\n                return invokeFunc(lastCallTime);\n            }\n        }\n        if (timerId === undefined) {\n            timerId = startTimer(timerExpired, wait);\n        }\n        return result;\n    }\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    debounced.pending = pending;\n    return debounced;\n}\nexport default debounce;\n","export default function getTextBoxCoordsCanvas(annotationCanvasPoints) {\n    const corners = _determineCorners(annotationCanvasPoints);\n    const centerY = (corners.top[1] + corners.bottom[1]) / 2;\n    const textBoxCanvas = [corners.right[0], centerY];\n    return textBoxCanvas;\n}\nfunction _determineCorners(canvasPoints) {\n    const handlesLeftToRight = [canvasPoints[0], canvasPoints[1]].sort(_compareX);\n    const handlesTopToBottom = [canvasPoints[0], canvasPoints[1]].sort(_compareY);\n    const right = handlesLeftToRight[handlesLeftToRight.length - 1];\n    const top = handlesTopToBottom[0];\n    const bottom = handlesTopToBottom[handlesTopToBottom.length - 1];\n    return {\n        top,\n        bottom,\n        right,\n    };\n    function _compareX(a, b) {\n        return a[0] < b[0] ? -1 : 1;\n    }\n    function _compareY(a, b) {\n        return a[1] < b[1] ? -1 : 1;\n    }\n}\n","import { Enums, utilities } from '@cornerstonejs/core';\nconst { CalibrationTypes } = Enums;\nconst PIXEL_UNITS = 'px';\nconst VOXEL_UNITS = 'voxels';\nconst SUPPORTED_REGION_DATA_TYPES = [\n    1,\n    2,\n    3,\n    4,\n];\nconst SUPPORTED_LENGTH_VARIANT = [\n    '3,3',\n    '4,7',\n];\nconst SUPPORTED_PROBE_VARIANT = [\n    '4,3',\n    '4,7',\n];\nconst UNIT_MAPPING = {\n    0: 'px',\n    1: 'percent',\n    2: 'dB',\n    3: 'cm',\n    4: 'seconds',\n    5: 'hertz',\n    6: 'dB/seconds',\n    7: 'cm/sec',\n    8: 'cm\\xb2',\n    9: 'cm\\xb2/s',\n    0xc: 'degrees',\n};\nconst EPS = 1e-3;\nconst SQUARE = '\\xb2';\nconst getCalibratedLengthUnitsAndScale = (image, handles) => {\n    const { calibration, hasPixelSpacing } = image;\n    let unit = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n    const volumeUnit = hasPixelSpacing ? 'mm\\xb3' : VOXEL_UNITS;\n    let areaUnit = unit + SQUARE;\n    let scale = 1;\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { unit, areaUnit, scale, volumeUnit };\n    }\n    if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n        return {\n            unit: PIXEL_UNITS,\n            areaUnit: PIXEL_UNITS + SQUARE,\n            scale,\n            volumeUnit: VOXEL_UNITS,\n        };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        let imageIndex1, imageIndex2;\n        if (Array.isArray(handles) && handles.length === 2) {\n            [imageIndex1, imageIndex2] = handles;\n        }\n        else if (typeof handles === 'function') {\n            const points = handles();\n            imageIndex1 = points[0];\n            imageIndex2 = points[1];\n        }\n        let regions = calibration.sequenceOfUltrasoundRegions.filter((region) => imageIndex1[0] >= region.regionLocationMinX0 &&\n            imageIndex1[0] <= region.regionLocationMaxX1 &&\n            imageIndex1[1] >= region.regionLocationMinY0 &&\n            imageIndex1[1] <= region.regionLocationMaxY1 &&\n            imageIndex2[0] >= region.regionLocationMinX0 &&\n            imageIndex2[0] <= region.regionLocationMaxX1 &&\n            imageIndex2[1] >= region.regionLocationMinY0 &&\n            imageIndex2[1] <= region.regionLocationMaxY1);\n        if (!regions?.length) {\n            return { unit, areaUnit, scale, volumeUnit };\n        }\n        regions = regions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_LENGTH_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!regions.length) {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n        const region = regions[0];\n        const physicalDeltaX = Math.abs(region.physicalDeltaX);\n        const physicalDeltaY = Math.abs(region.physicalDeltaY);\n        const isSamePhysicalDelta = utilities.isEqual(physicalDeltaX, physicalDeltaY, EPS);\n        if (isSamePhysicalDelta) {\n            scale = 1 / physicalDeltaX;\n            calibrationType = 'US Region';\n            unit = UNIT_MAPPING[region.physicalUnitsXDirection] || 'unknown';\n            areaUnit = unit + SQUARE;\n        }\n        else {\n            return {\n                unit: PIXEL_UNITS,\n                areaUnit: PIXEL_UNITS + SQUARE,\n                scale,\n                volumeUnit: VOXEL_UNITS,\n            };\n        }\n    }\n    else if (calibration.scale) {\n        scale = calibration.scale;\n    }\n    const types = [\n        CalibrationTypes.ERMF,\n        CalibrationTypes.USER,\n        CalibrationTypes.ERROR,\n        CalibrationTypes.PROJECTION,\n        CalibrationTypes.CALIBRATED,\n        CalibrationTypes.UNKNOWN,\n    ];\n    if (types.includes(calibration?.type)) {\n        calibrationType = calibration.type;\n    }\n    return {\n        unit: unit + (calibrationType ? ` ${calibrationType}` : ''),\n        areaUnit: areaUnit + (calibrationType ? ` ${calibrationType}` : ''),\n        scale,\n        volumeUnit: volumeUnit + (calibrationType ? ` ${calibrationType}` : ''),\n    };\n};\nconst getCalibratedProbeUnitsAndValue = (image, handles) => {\n    const [imageIndex] = handles;\n    const { calibration } = image;\n    let units = ['raw'];\n    let values = [null];\n    let calibrationType = '';\n    if (!calibration ||\n        (!calibration.type && !calibration.sequenceOfUltrasoundRegions)) {\n        return { units, values };\n    }\n    if (calibration.sequenceOfUltrasoundRegions) {\n        const supportedRegionsMetadata = calibration.sequenceOfUltrasoundRegions.filter((region) => SUPPORTED_REGION_DATA_TYPES.includes(region.regionDataType) &&\n            SUPPORTED_PROBE_VARIANT.includes(`${region.physicalUnitsXDirection},${region.physicalUnitsYDirection}`));\n        if (!supportedRegionsMetadata?.length) {\n            return { units, values };\n        }\n        const region = supportedRegionsMetadata.find((region) => imageIndex[0] >= region.regionLocationMinX0 &&\n            imageIndex[0] <= region.regionLocationMaxX1 &&\n            imageIndex[1] >= region.regionLocationMinY0 &&\n            imageIndex[1] <= region.regionLocationMaxY1);\n        if (!region) {\n            return { units, values };\n        }\n        const { referencePixelX0 = 0, referencePixelY0 = 0 } = region;\n        const { physicalDeltaX, physicalDeltaY } = region;\n        const yValue = (imageIndex[1] - region.regionLocationMinY0 - referencePixelY0) *\n            physicalDeltaY;\n        const xValue = (imageIndex[0] - region.regionLocationMinX0 - referencePixelX0) *\n            physicalDeltaX;\n        calibrationType = 'US Region';\n        values = [xValue, yValue];\n        units = [\n            UNIT_MAPPING[region.physicalUnitsXDirection],\n            UNIT_MAPPING[region.physicalUnitsYDirection],\n        ];\n    }\n    return {\n        units,\n        values,\n        calibrationType,\n    };\n};\nconst getCalibratedAspect = (image) => image.calibration?.aspect || 1;\nexport { getCalibratedLengthUnitsAndScale, getCalibratedAspect, getCalibratedProbeUnitsAndValue, };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { getBoundingBoxAroundShapeIJK } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nfunction _getSphereBoundsInfo(circlePoints, imageData, directionVectors) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    const { boundsIJK, topLeftWorld, bottomRightWorld } = _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n        topLeftWorld: topLeftWorld,\n        bottomRightWorld: bottomRightWorld,\n    };\n}\nfunction getSphereBoundsInfo(circlePoints, imageData) {\n    const direction = imageData.getDirection();\n    const rowCosine = vec3.fromValues(direction[0], direction[1], direction[2]);\n    const columnCosine = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const scanAxis = vec3.fromValues(direction[6], direction[7], direction[8]);\n    const viewPlaneNormal = vec3.negate(vec3.create(), scanAxis);\n    const directionVectors = {\n        row: rowCosine,\n        column: columnCosine,\n        normal: viewPlaneNormal,\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction getSphereBoundsInfoFromViewport(circlePoints, imageData, viewport) {\n    if (!viewport) {\n        throw new Error('viewport is required in order to calculate the sphere bounds');\n    }\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const directionVectors = {\n        row: viewRight,\n        normal: viewPlaneNormal,\n        column: vec3.negate(vec3.create(), viewUp),\n    };\n    return _getSphereBoundsInfo(circlePoints, imageData, directionVectors);\n}\nfunction _computeBoundsIJK(imageData, directionVectors, circlePoints, centerWorld, radiusWorld) {\n    const dimensions = imageData.getDimensions();\n    const { row: rowCosine, column: columnCosine, normal: vecNormal, } = directionVectors;\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, centerWorld, vecNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, centerWorld, vecNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, columnCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, columnCosine, radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, rowCosine, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, rowCosine, radiusWorld);\n    const topLeftIJK = transformWorldToIndex(imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(imageData, bottomRightWorld);\n    const pointsIJK = circlePoints.map((p) => transformWorldToIndex(imageData, p));\n    const boundsIJK = getBoundingBoxAroundShapeIJK([topLeftIJK, bottomRightIJK, ...pointsIJK], dimensions);\n    return { boundsIJK, topLeftWorld, bottomRightWorld };\n}\nexport { getSphereBoundsInfo, getSphereBoundsInfoFromViewport };\n","import getViewportsForAnnotation from './getViewportsForAnnotation';\nexport default function getViewportForAnnotation(annotation) {\n    const viewports = getViewportsForAnnotation(annotation);\n    return viewports.length ? viewports[0] : undefined;\n}\n","function isObject(value) {\n    const type = typeof value;\n    return value !== null && (type === 'object' || type === 'function');\n}\nexport default isObject;\n","export default function pointInSphere(sphere, pointLPS) {\n    const { center, radius } = sphere;\n    const radius2 = sphere.radius2 || radius * radius;\n    return ((pointLPS[0] - center[0]) * (pointLPS[0] - center[0]) +\n        (pointLPS[1] - center[1]) * (pointLPS[1] - center[1]) +\n        (pointLPS[2] - center[2]) * (pointLPS[2] - center[2]) <=\n        radius2);\n}\n","import { interpolatePoints } from './algorithms/bspline';\nfunction getContinuousUniformDistributionValues(minDistributionDistance, closedInterval) {\n    const result = [];\n    const [intervalIni, intervalEnd] = closedInterval;\n    const intervalSize = intervalEnd - intervalIni + 1;\n    const intensity = Math.floor(intervalSize / minDistributionDistance);\n    let x = 0;\n    let continuosDistributionValue = Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n    while (continuosDistributionValue <= intervalEnd) {\n        result.push(continuosDistributionValue);\n        x++;\n        continuosDistributionValue =\n            Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n    }\n    return result;\n}\nexport default function interpolateSegmentPoints(points, iniIndex, endIndex, knotsRatioPercentage) {\n    const segmentSize = endIndex - iniIndex + 1;\n    const amountOfKnots = Math.floor((knotsRatioPercentage / 100) * segmentSize) ?? 1;\n    const minKnotDistance = Math.floor(segmentSize / amountOfKnots) ?? 1;\n    if (isNaN(segmentSize) || !segmentSize || !minKnotDistance) {\n        return points;\n    }\n    if (segmentSize / minKnotDistance < 2) {\n        return points;\n    }\n    const interpolationIniIndex = Math.max(0, iniIndex);\n    const interpolationEndIndex = Math.min(points.length - 1, endIndex);\n    const segmentPointsUnchangedBeg = points.slice(0, interpolationIniIndex);\n    const segmentPointsUnchangedEnd = points.slice(interpolationEndIndex + 1, points.length);\n    const knotsIndexes = getContinuousUniformDistributionValues(minKnotDistance, [\n        interpolationIniIndex,\n        interpolationEndIndex,\n    ]);\n    const interpolatedPoints = interpolatePoints(points, knotsIndexes);\n    return [\n        ...segmentPointsUnchangedBeg,\n        ...interpolatedPoints,\n        ...segmentPointsUnchangedEnd,\n    ];\n}\n","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nconst { isEqual } = csUtils;\nconst iAxis = vec3.fromValues(1, 0, 0);\nconst jAxis = vec3.fromValues(0, 1, 0);\nconst kAxis = vec3.fromValues(0, 0, 1);\nconst axisList = [iAxis, jAxis, kAxis];\nfunction isAxisAlignedRectangle(rectangleCornersIJK) {\n    const rectangleVec1 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[1]);\n    const rectangleVec2 = vec3.subtract(vec3.create(), rectangleCornersIJK[0], rectangleCornersIJK[2]);\n    const anglesVec1 = calculateAnglesWithAxes(rectangleVec1, axisList);\n    const anglesVec2 = calculateAnglesWithAxes(rectangleVec2, axisList);\n    const isAligned = [...anglesVec1, ...anglesVec2].every((angle) => isEqual(angle, 0) ||\n        isEqual(angle, 90) ||\n        isEqual(angle, 180) ||\n        isEqual(angle, 270));\n    return isAligned;\n}\nfunction calculateAnglesWithAxes(vec, axes) {\n    return axes.map((axis) => (vec3.angle(vec, axis) * 180) / Math.PI);\n}\nexport { isAxisAlignedRectangle };\n","import { InstanceVolumetricCalculator } from './VolumetricCalculator';\nexport default class SegmentStatsCalculator {\n    static { this.calculators = new Map(); }\n    static { this.indices = []; }\n    static { this.mode = 'collective'; }\n    static statsInit(options) {\n        const { storePointData, indices, mode } = options;\n        this.mode = mode;\n        this.indices = indices;\n        this.calculators.clear();\n        if (this.mode === 'individual') {\n            indices.forEach((index) => {\n                this.calculators.set(index, new InstanceVolumetricCalculator({ storePointData }));\n            });\n        }\n        else {\n            this.calculators.set(indices, new InstanceVolumetricCalculator({ storePointData }));\n        }\n    }\n    static statsCallback(data) {\n        const { segmentIndex, ...statsData } = data;\n        if (!segmentIndex) {\n            throw new Error('Segment index is required for stats calculation');\n        }\n        const calculator = this.mode === 'individual'\n            ? this.calculators.get(segmentIndex)\n            : this.calculators.get(this.indices);\n        if (!calculator) {\n            throw new Error(`No calculator found for segment ${segmentIndex}`);\n        }\n        calculator.statsCallback(statsData);\n    }\n    static getStatistics(options) {\n        if (this.mode === 'individual') {\n            const result = {};\n            this.calculators.forEach((calculator, segmentIndex) => {\n                result[segmentIndex] = calculator.getStatistics(options);\n            });\n            return result;\n        }\n        const calculator = this.calculators.get(this.indices);\n        return calculator.getStatistics(options);\n    }\n}\n","function floodFill(getter, seed, options = {}) {\n    const onFlood = options.onFlood;\n    const onBoundary = options.onBoundary;\n    const equals = options.equals;\n    const filter = options.filter;\n    const diagonals = options.diagonals || false;\n    const startNode = get(seed);\n    const permutations = prunedPermutations();\n    const stack = [];\n    const flooded = [];\n    const visits = new Set();\n    const bounds = options.bounds;\n    stack.push({ currentArgs: seed });\n    while (stack.length > 0) {\n        flood(stack.pop());\n    }\n    return {\n        flooded,\n    };\n    function flood(job) {\n        const getArgs = job.currentArgs;\n        const prevArgs = job.previousArgs;\n        if (visited(getArgs)) {\n            return;\n        }\n        markAsVisited(getArgs);\n        if (member(getArgs)) {\n            markAsFlooded(getArgs);\n            pushAdjacent(getArgs);\n        }\n        else {\n            markAsBoundary(prevArgs);\n        }\n    }\n    function visited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        return visits.has(iKey);\n    }\n    function markAsVisited(key) {\n        const [x, y, z = 0] = key;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        visits.add(iKey);\n    }\n    function member(getArgs) {\n        const node = get(getArgs);\n        return equals ? equals(node, startNode) : node === startNode;\n    }\n    function markAsFlooded(getArgs) {\n        flooded.push(getArgs);\n        if (onFlood) {\n            onFlood(...getArgs);\n        }\n    }\n    function markAsBoundary(prevArgs) {\n        const [x, y, z = 0] = prevArgs;\n        const iKey = x + 32768 + 65536 * (y + 32768 + 65536 * (z + 32768));\n        bounds?.set(iKey, prevArgs);\n        if (onBoundary) {\n            onBoundary(...prevArgs);\n        }\n    }\n    function pushAdjacent(getArgs) {\n        for (let i = 0; i < permutations.length; i += 1) {\n            const perm = permutations[i];\n            const nextArgs = getArgs.slice(0);\n            for (let j = 0; j < getArgs.length; j += 1) {\n                nextArgs[j] += perm[j];\n            }\n            if (filter?.(nextArgs) === false) {\n                continue;\n            }\n            if (visited(nextArgs)) {\n                continue;\n            }\n            stack.push({\n                currentArgs: nextArgs,\n                previousArgs: getArgs,\n            });\n        }\n    }\n    function get(getArgs) {\n        return getter(...getArgs);\n    }\n    function prunedPermutations() {\n        const permutations = permute(seed.length);\n        return permutations.filter(function (perm) {\n            const count = countNonZeroes(perm);\n            return count !== 0 && (count === 1 || diagonals);\n        });\n    }\n    function permute(length) {\n        const perms = [];\n        const permutation = function (string) {\n            return string.split('').map(function (c) {\n                return parseInt(c, 10) - 1;\n            });\n        };\n        for (let i = 0; i < Math.pow(3, length); i += 1) {\n            const string = lpad(i.toString(3), '0', length);\n            perms.push(permutation(string));\n        }\n        return perms;\n    }\n}\nfunction countNonZeroes(array) {\n    let count = 0;\n    for (let i = 0; i < array.length; i += 1) {\n        if (array[i] !== 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\nfunction lpad(string, character, length) {\n    const array = new Array(length + 1);\n    const pad = array.join(character);\n    return (pad + string).slice(-length);\n}\nexport default floodFill;\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nexport function getBrushToolInstances(toolGroupId, toolName) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return;\n    }\n    if (toolName && toolInstances[toolName]) {\n        return [toolInstances[toolName]];\n    }\n    const brushBasedToolInstances = Object.values(toolInstances).filter((toolInstance) => toolInstance instanceof BrushTool);\n    return brushBasedToolInstances;\n}\n","import { getAnnotation } from '../../stateManagement';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nexport function getHoveredContourSegmentationAnnotation(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    const { annotationUIDsMap } = segmentation.representationData.Contour;\n    for (const [segmentIndex, annotationUIDs] of annotationUIDsMap.entries()) {\n        const highlightedAnnotationUID = Array.from(annotationUIDs).find((annotationUID) => getAnnotation(annotationUID).highlighted);\n        if (highlightedAnnotationUID) {\n            return segmentIndex;\n        }\n    }\n    return undefined;\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { getSegmentation, getCurrentLabelmapImageIdForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers';\nexport function getSegmentIndexAtLabelmapBorder(segmentationId, worldPoint, { viewport, searchRadius }) {\n    const segmentation = getSegmentation(segmentationId);\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const voxelManager = segmentationVolume.voxelManager;\n        const imageData = segmentationVolume.imageData;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        const segmentIndex = voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n        const canvasPoint = viewport.worldToCanvas(worldPoint);\n        const onEdge = isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius);\n        return onEdge ? segmentIndex : undefined;\n    }\n    const segmentationImageId = getCurrentLabelmapImageIdForViewport(viewport.id, segmentationId);\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    const onEdge = isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex);\n    return onEdge ? segmentIndex : undefined;\n}\nfunction isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius = 1) {\n    const neighborRange = Array.from({ length: 2 * searchRadius + 1 }, (_, i) => i - searchRadius);\n    for (const deltaI of neighborRange) {\n        for (const deltaJ of neighborRange) {\n            for (const deltaK of neighborRange) {\n                if (deltaI === 0 && deltaJ === 0 && deltaK === 0) {\n                    continue;\n                }\n                const neighborIndex = getNeighborIndex(deltaI, deltaJ, deltaK);\n                if (neighborIndex !== undefined && segmentIndex !== neighborIndex) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction isSegmentOnEdgeIJK(indexIJK, dimensions, voxelManager, segmentIndex, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ, deltaK) => {\n        const neighborIJK = [\n            indexIJK[0] + deltaI,\n            indexIJK[1] + deltaJ,\n            indexIJK[2] + deltaK,\n        ];\n        return voxelManager.getAtIJK(neighborIJK[0], neighborIJK[1], neighborIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\nfunction isSegmentOnEdgeCanvas(canvasPoint, segmentIndex, viewport, imageData, searchRadius) {\n    const getNeighborIndex = (deltaI, deltaJ) => {\n        const neighborCanvas = [canvasPoint[0] + deltaI, canvasPoint[1] + deltaJ];\n        const worldPoint = viewport.canvasToWorld(neighborCanvas);\n        const voxelManager = imageData.get('voxelManager').voxelManager;\n        const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n        return voxelManager.getAtIJK(indexIJK[0], indexIJK[1], indexIJK[2]);\n    };\n    return isSegmentOnEdge(getNeighborIndex, segmentIndex, searchRadius);\n}\n","import { BaseVolumeViewport, cache, utilities } from '@cornerstonejs/core';\nimport { SegmentationRepresentations } from '../../enums';\nimport { getSegmentation, getCurrentLabelmapImageIdsForViewport, } from '../../stateManagement/segmentation/segmentationState';\nimport { getAnnotation } from '../../stateManagement';\nimport { isPointInsidePolyline3D } from '../math/polyline';\nimport { getLabelmapActorEntry } from '../../stateManagement/segmentation/helpers/getSegmentationActor';\nexport function getSegmentIndexAtWorldPoint(segmentationId, worldPoint, options = {}) {\n    const segmentation = getSegmentation(segmentationId);\n    const representationData = segmentation.representationData;\n    const desiredRepresentation = options?.representationType ?? Object.keys(representationData)[0];\n    if (!desiredRepresentation) {\n        throw new Error(`Segmentation ${segmentationId} does not have any representations`);\n    }\n    switch (desiredRepresentation) {\n        case SegmentationRepresentations.Labelmap:\n            return getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, options);\n        case SegmentationRepresentations.Contour:\n            return getSegmentIndexAtWorldForContour(segmentation, worldPoint, options);\n        default:\n            return;\n    }\n}\nexport function getSegmentIndexAtWorldForLabelmap(segmentation, worldPoint, { viewport }) {\n    const labelmapData = segmentation.representationData.Labelmap;\n    if (viewport instanceof BaseVolumeViewport) {\n        const { volumeId } = labelmapData;\n        const segmentationVolume = cache.getVolume(volumeId);\n        if (!segmentationVolume) {\n            return;\n        }\n        const segmentIndex = segmentationVolume.imageData.getScalarValueFromWorld(worldPoint);\n        return segmentIndex;\n    }\n    const segmentationImageIds = getCurrentLabelmapImageIdsForViewport(viewport.id, segmentation.segmentationId);\n    if (segmentationImageIds.length > 1) {\n        console.warn('Segment selection for labelmaps with multiple imageIds in stack viewports is not supported yet.');\n        return;\n    }\n    const segmentationImageId = segmentationImageIds[0];\n    const image = cache.getImage(segmentationImageId);\n    if (!image) {\n        return;\n    }\n    const segmentationActorEntry = getLabelmapActorEntry(viewport.id, segmentation.segmentationId);\n    const imageData = segmentationActorEntry?.actor.getMapper().getInputData();\n    const indexIJK = utilities.transformWorldToIndex(imageData, worldPoint);\n    const dimensions = imageData.getDimensions();\n    const voxelManager = (imageData.voxelManager ||\n        utilities.VoxelManager.createScalarVolumeVoxelManager({\n            dimensions,\n            scalarData: imageData.getPointData().getScalars().getData(),\n        }));\n    const segmentIndex = voxelManager.getAtIJKPoint(indexIJK);\n    return segmentIndex;\n}\nexport function getSegmentIndexAtWorldForContour(segmentation, worldPoint, { viewport }) {\n    const contourData = segmentation.representationData.Contour;\n    const segmentIndices = Array.from(contourData.annotationUIDsMap.keys());\n    const { viewPlaneNormal } = viewport.getCamera();\n    for (const segmentIndex of segmentIndices) {\n        const annotationsSet = contourData.annotationUIDsMap.get(segmentIndex);\n        if (!annotationsSet) {\n            continue;\n        }\n        for (const annotationUID of annotationsSet) {\n            const annotation = getAnnotation(annotationUID);\n            if (!annotation) {\n                continue;\n            }\n            const { polyline } = annotation.data.contour;\n            if (!utilities.isEqual(viewPlaneNormal, annotation.metadata.viewPlaneNormal)) {\n                continue;\n            }\n            if (isPointInsidePolyline3D(worldPoint, polyline)) {\n                return Number(segmentIndex);\n            }\n        }\n    }\n}\n","const shader = `\nconst MAX_STRENGTH = 65535f;\n\n// Workgroup size - X*Y*Z must be multiple of 32 for better performance\noverride workGroupSizeX = 1u;\noverride workGroupSizeY = 1u;\noverride workGroupSizeZ = 1u;\n\n// Compare the current voxel to neighbors using a 9x9x9 window\noverride windowSize = 9i;\n\nstruct Params {\n  size: vec3u,\n  iteration: u32,\n}\n\n// New structure to track bounds of modified voxels\nstruct Bounds {\n  minX: atomic<i32>,\n  minY: atomic<i32>,\n  minZ: atomic<i32>,\n  maxX: atomic<i32>,\n  maxY: atomic<i32>,\n  maxZ: atomic<i32>,\n}\n\n@group(0) @binding(0) var<uniform> params: Params;\n@group(0) @binding(1) var<storage> volumePixelData: array<f32>;\n@group(0) @binding(2) var<storage, read_write> labelmap: array<u32>;\n@group(0) @binding(3) var<storage, read_write> strengthData: array<f32>;\n@group(0) @binding(4) var<storage> prevLabelmap: array<u32>;\n@group(0) @binding(5) var<storage> prevStrengthData: array<f32>;\n@group(0) @binding(6) var<storage, read_write> updatedVoxelsCounter: array<atomic<u32>>;\n@group(0) @binding(7) var<storage, read_write> modifiedBounds: Bounds;\n\nfn getPixelIndex(ijkPos: vec3u) -> u32 {\n  let numPixelsPerSlice = params.size.x * params.size.y;\n  return ijkPos.x + ijkPos.y * params.size.x + ijkPos.z * numPixelsPerSlice;\n}\n\nfn updateBounds(position: vec3i) {\n  // Atomically update min bounds (use min operation)\n  let oldMinX = atomicMin(&modifiedBounds.minX, position.x);\n  let oldMinY = atomicMin(&modifiedBounds.minY, position.y);\n  let oldMinZ = atomicMin(&modifiedBounds.minZ, position.z);\n\n  // Atomically update max bounds (use max operation)\n  let oldMaxX = atomicMax(&modifiedBounds.maxX, position.x);\n  let oldMaxY = atomicMax(&modifiedBounds.maxY, position.y);\n  let oldMaxZ = atomicMax(&modifiedBounds.maxZ, position.z);\n}\n\n@compute @workgroup_size(workGroupSizeX, workGroupSizeY, workGroupSizeZ)\nfn main(\n  @builtin(global_invocation_id) globalId: vec3u,\n) {\n  // Make sure it will not get out of bounds for volume with sizes that\n  // are not multiple of workGroupSize\n  if (\n    globalId.x >= params.size.x ||\n    globalId.y >= params.size.y ||\n    globalId.z >= params.size.z\n  ) {\n    return;\n  }\n\n  // Initialize bounds for the first iteration\n  if (params.iteration == 0 && globalId.x == 0 && globalId.y == 0 && globalId.z == 0) {\n    // Initialize to opposite extremes to ensure any update will improve the bounds\n    atomicStore(&modifiedBounds.minX, i32(params.size.x));\n    atomicStore(&modifiedBounds.minY, i32(params.size.y));\n    atomicStore(&modifiedBounds.minZ, i32(params.size.z));\n    atomicStore(&modifiedBounds.maxX, -1);\n    atomicStore(&modifiedBounds.maxY, -1);\n    atomicStore(&modifiedBounds.maxZ, -1);\n  }\n\n  let currentCoord = vec3i(globalId);\n  let currentPixelIndex = getPixelIndex(globalId);\n\n  let numPixels = arrayLength(&volumePixelData);\n  let currentPixelValue = volumePixelData[currentPixelIndex];\n\n  if (params.iteration == 0) {\n    // All non-zero initial labels are given maximum strength\n    strengthData[currentPixelIndex] = select(MAX_STRENGTH, 0., labelmap[currentPixelIndex] == 0);\n\n    // Update bounds for non-zero initial labels\n    if (labelmap[currentPixelIndex] != 0) {\n      updateBounds(currentCoord);\n    }\n    return;\n  }\n\n  // It should at least copy the values from previous state\n  var newLabel = prevLabelmap[currentPixelIndex];\n  var newStrength = prevStrengthData[currentPixelIndex];\n\n  let window = i32(ceil(f32(windowSize - 1) * .5));\n  let minWindow = -1i * window;\n  let maxWindow = 1i * window;\n\n  for (var k = minWindow; k <= maxWindow; k++) {\n    for (var j = minWindow; j <= maxWindow; j++) {\n      for (var i = minWindow; i <= maxWindow; i++) {\n        // Skip current voxel\n        if (i == 0 && j == 0 && k == 0) {\n          continue;\n        }\n\n        let neighborCoord = currentCoord + vec3i(i, j, k);\n\n        //  Boundary conditions. Do not grow outside of the volume\n        if (\n          neighborCoord.x < 0i || neighborCoord.x >= i32(params.size.x) ||\n          neighborCoord.y < 0i || neighborCoord.y >= i32(params.size.y) ||\n          neighborCoord.z < 0i || neighborCoord.z >= i32(params.size.z)\n        ) {\n          continue;\n        }\n\n        let neighborIndex = getPixelIndex(vec3u(neighborCoord));\n        let neighborPixelValue = volumePixelData[neighborIndex];\n        let prevNeighborStrength = prevStrengthData[neighborIndex];\n        let strengthCost = abs(neighborPixelValue - currentPixelValue);\n        let takeoverStrength = prevNeighborStrength - strengthCost;\n\n        if (takeoverStrength > newStrength) {\n          newLabel = prevLabelmap[neighborIndex];\n          newStrength = takeoverStrength;\n        }\n      }\n    }\n  }\n\n  if (labelmap[currentPixelIndex] != newLabel) {\n    atomicAdd(&updatedVoxelsCounter[params.iteration], 1u);\n\n    // Update bounds for modified voxels\n    updateBounds(currentCoord);\n  }\n\n  labelmap[currentPixelIndex] = newLabel;\n  strengthData[currentPixelIndex] = newStrength;\n}\n`;\nexport default shader;\n","import { cache } from '@cornerstonejs/core';\nimport shaderCode from './growCutShader';\nconst GB = 1024 * 1024 * 1024;\nconst WEBGPU_MEMORY_LIMIT = 1.99 * GB;\nconst DEFAULT_GROWCUT_OPTIONS = {\n    windowSize: 3,\n    maxProcessingTime: 30000,\n    inspection: {\n        numCyclesInterval: 5,\n        numCyclesBelowThreshold: 3,\n        threshold: 1e-4,\n    },\n};\nasync function runGrowCut(referenceVolumeId, labelmapVolumeId, options = DEFAULT_GROWCUT_OPTIONS) {\n    const workGroupSize = [8, 8, 4];\n    const { windowSize, maxProcessingTime } = Object.assign({}, DEFAULT_GROWCUT_OPTIONS, options);\n    const inspection = Object.assign({}, DEFAULT_GROWCUT_OPTIONS.inspection, options.inspection);\n    const volume = cache.getVolume(referenceVolumeId);\n    const labelmap = cache.getVolume(labelmapVolumeId);\n    const [columns, rows, numSlices] = volume.dimensions;\n    if (labelmap.dimensions[0] !== columns ||\n        labelmap.dimensions[1] !== rows ||\n        labelmap.dimensions[2] !== numSlices) {\n        throw new Error('Volume and labelmap must have the same size');\n    }\n    let numIterations = Math.floor(Math.sqrt(rows ** 2 + columns ** 2 + numSlices ** 2) / 2);\n    numIterations = Math.min(numIterations, 500);\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    let volumePixelData = volume.voxelManager.getCompleteScalarDataArray();\n    if (!(volumePixelData instanceof Float32Array)) {\n        volumePixelData = new Float32Array(volumePixelData);\n    }\n    const requiredLimits = {\n        maxStorageBufferBindingSize: WEBGPU_MEMORY_LIMIT,\n        maxBufferSize: WEBGPU_MEMORY_LIMIT,\n    };\n    const adapter = await navigator.gpu?.requestAdapter();\n    const device = await adapter.requestDevice({ requiredLimits });\n    const BUFFER_SIZE = volumePixelData.byteLength;\n    const UPDATED_VOXELS_COUNTER_BUFFER_SIZE = numIterations * Uint32Array.BYTES_PER_ELEMENT;\n    const BOUNDS_BUFFER_SIZE = 6 * Int32Array.BYTES_PER_ELEMENT;\n    const shaderModule = device.createShaderModule({\n        code: shaderCode,\n    });\n    const numIterationIndex = 3;\n    const paramsArrayValues = new Uint32Array([\n        columns,\n        rows,\n        numSlices,\n        0,\n    ]);\n    const gpuParamsBuffer = device.createBuffer({\n        size: paramsArrayValues.byteLength,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    const gpuVolumePixelDataBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST,\n    });\n    device.queue.writeBuffer(gpuVolumePixelDataBuffer, 0, volumePixelData);\n    const gpuLabelmapBuffers = [0, 1].map(() => device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    }));\n    device.queue.writeBuffer(gpuLabelmapBuffers[0], 0, new Uint32Array(labelmapData));\n    const gpuStrengthBuffers = [0, 1].map(() => {\n        const strengthBuffer = device.createBuffer({\n            size: BUFFER_SIZE,\n            usage: GPUBufferUsage.STORAGE |\n                GPUBufferUsage.COPY_SRC |\n                GPUBufferUsage.COPY_DST,\n        });\n        return strengthBuffer;\n    });\n    const gpuCounterBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const gpuBoundsBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.STORAGE |\n            GPUBufferUsage.COPY_SRC |\n            GPUBufferUsage.COPY_DST,\n    });\n    const initialBounds = new Int32Array([\n        columns,\n        rows,\n        numSlices,\n        -1,\n        -1,\n        -1,\n    ]);\n    device.queue.writeBuffer(gpuBoundsBuffer, 0, initialBounds);\n    const bindGroupLayout = device.createBindGroupLayout({\n        entries: [\n            {\n                binding: 0,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'uniform',\n                },\n            },\n            {\n                binding: 1,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 2,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 3,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 4,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 5,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'read-only-storage',\n                },\n            },\n            {\n                binding: 6,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n            {\n                binding: 7,\n                visibility: GPUShaderStage.COMPUTE,\n                buffer: {\n                    type: 'storage',\n                },\n            },\n        ],\n    });\n    const bindGroups = [0, 1].map((i) => {\n        const outputLabelmapBuffer = gpuLabelmapBuffers[i];\n        const outputStrengthBuffer = gpuStrengthBuffers[i];\n        const previouLabelmapBuffer = gpuLabelmapBuffers[(i + 1) % 2];\n        const previousStrengthBuffer = gpuStrengthBuffers[(i + 1) % 2];\n        return device.createBindGroup({\n            layout: bindGroupLayout,\n            entries: [\n                {\n                    binding: 0,\n                    resource: {\n                        buffer: gpuParamsBuffer,\n                    },\n                },\n                {\n                    binding: 1,\n                    resource: {\n                        buffer: gpuVolumePixelDataBuffer,\n                    },\n                },\n                {\n                    binding: 2,\n                    resource: {\n                        buffer: outputLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 3,\n                    resource: {\n                        buffer: outputStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 4,\n                    resource: {\n                        buffer: previouLabelmapBuffer,\n                    },\n                },\n                {\n                    binding: 5,\n                    resource: {\n                        buffer: previousStrengthBuffer,\n                    },\n                },\n                {\n                    binding: 6,\n                    resource: {\n                        buffer: gpuCounterBuffer,\n                    },\n                },\n                {\n                    binding: 7,\n                    resource: {\n                        buffer: gpuBoundsBuffer,\n                    },\n                },\n            ],\n        });\n    });\n    const pipeline = device.createComputePipeline({\n        layout: device.createPipelineLayout({\n            bindGroupLayouts: [bindGroupLayout],\n        }),\n        compute: {\n            module: shaderModule,\n            entryPoint: 'main',\n            constants: {\n                workGroupSizeX: workGroupSize[0],\n                workGroupSizeY: workGroupSize[1],\n                workGroupSizeZ: workGroupSize[2],\n                windowSize,\n            },\n        },\n    });\n    const numWorkGroups = [\n        Math.ceil(columns / workGroupSize[0]),\n        Math.ceil(rows / workGroupSize[1]),\n        Math.ceil(numSlices / workGroupSize[2]),\n    ];\n    const gpuUpdatedVoxelsCounterStagingBuffer = device.createBuffer({\n        size: UPDATED_VOXELS_COUNTER_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const limitProcessingTime = maxProcessingTime\n        ? performance.now() + maxProcessingTime\n        : 0;\n    let currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n    let belowThresholdCounter = 0;\n    for (let i = 0; i < numIterations; i++) {\n        paramsArrayValues[numIterationIndex] = i;\n        device.queue.writeBuffer(gpuParamsBuffer, 0, paramsArrayValues);\n        const commandEncoder = device.createCommandEncoder();\n        const passEncoder = commandEncoder.beginComputePass();\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroups[i % 2]);\n        passEncoder.dispatchWorkgroups(numWorkGroups[0], numWorkGroups[1], numWorkGroups[2]);\n        passEncoder.end();\n        commandEncoder.copyBufferToBuffer(gpuCounterBuffer, i * Uint32Array.BYTES_PER_ELEMENT, gpuUpdatedVoxelsCounterStagingBuffer, i * Uint32Array.BYTES_PER_ELEMENT, Uint32Array.BYTES_PER_ELEMENT);\n        device.queue.submit([commandEncoder.finish()]);\n        const inspect = i > 0 && !(i % currentInspectionNumCyclesInterval);\n        if (inspect) {\n            await gpuUpdatedVoxelsCounterStagingBuffer.mapAsync(GPUMapMode.READ, 0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterResultBuffer = gpuUpdatedVoxelsCounterStagingBuffer.getMappedRange(0, UPDATED_VOXELS_COUNTER_BUFFER_SIZE);\n            const updatedVoxelsCounterBufferData = new Uint32Array(updatedVoxelsCounterResultBuffer.slice(0));\n            const updatedVoxelsRatio = updatedVoxelsCounterBufferData[i] / volumePixelData.length;\n            gpuUpdatedVoxelsCounterStagingBuffer.unmap();\n            if (i >= 1 && updatedVoxelsRatio < inspection.threshold) {\n                currentInspectionNumCyclesInterval = 1;\n                belowThresholdCounter++;\n                if (belowThresholdCounter === inspection.numCyclesBelowThreshold) {\n                    break;\n                }\n            }\n            else {\n                currentInspectionNumCyclesInterval = inspection.numCyclesInterval;\n            }\n        }\n        if (limitProcessingTime && performance.now() > limitProcessingTime) {\n            console.warn(`Exceeded processing time limit (${maxProcessingTime})ms`);\n            break;\n        }\n    }\n    const commandEncoder = device.createCommandEncoder();\n    const outputLabelmapBufferIndex = (numIterations + 1) % 2;\n    const labelmapStagingBuffer = device.createBuffer({\n        size: BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    const boundsStagingBuffer = device.createBuffer({\n        size: BOUNDS_BUFFER_SIZE,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    commandEncoder.copyBufferToBuffer(gpuLabelmapBuffers[outputLabelmapBufferIndex], 0, labelmapStagingBuffer, 0, BUFFER_SIZE);\n    commandEncoder.copyBufferToBuffer(gpuBoundsBuffer, 0, boundsStagingBuffer, 0, BOUNDS_BUFFER_SIZE);\n    device.queue.submit([commandEncoder.finish()]);\n    await labelmapStagingBuffer.mapAsync(GPUMapMode.READ, 0, BUFFER_SIZE);\n    const labelmapResultBuffer = labelmapStagingBuffer.getMappedRange(0, BUFFER_SIZE);\n    const labelmapResult = new Uint32Array(labelmapResultBuffer);\n    labelmapData.set(labelmapResult);\n    labelmapStagingBuffer.unmap();\n    await boundsStagingBuffer.mapAsync(GPUMapMode.READ, 0, BOUNDS_BUFFER_SIZE);\n    const boundsResultBuffer = boundsStagingBuffer.getMappedRange(0, BOUNDS_BUFFER_SIZE);\n    const boundsResult = new Int32Array(boundsResultBuffer.slice(0));\n    boundsStagingBuffer.unmap();\n    const minX = boundsResult[0];\n    const minY = boundsResult[1];\n    const minZ = boundsResult[2];\n    const maxX = boundsResult[3];\n    const maxY = boundsResult[4];\n    const maxZ = boundsResult[5];\n    labelmap.voxelManager.setCompleteScalarDataArray(labelmapData);\n    labelmap.voxelManager.clearBounds();\n    labelmap.voxelManager.setBounds([\n        [minX, maxX],\n        [minY, maxY],\n        [minZ, maxZ],\n    ]);\n}\nexport { runGrowCut as default, runGrowCut as run };\n","import { volumeLoader, utilities as csUtils } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst NEGATIVE_PIXEL_RANGE = [-Infinity, -995];\nconst POSITIVE_PIXEL_RANGE = [0, 1900];\nfunction _setNegativeSeedValues(subVolume, labelmap, options) {\n    const { negativeSeedValue = NEGATIVE_SEED_VALUE, negativePixelRange = NEGATIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const visited = new Array(width * height).fill(false);\n    const sliceOffset = middleSliceIndex * width * height;\n    const bfs = (startX, startY) => {\n        const queue = [[startX, startY]];\n        while (queue.length) {\n            const [x, y] = queue.shift();\n            const slicePixelIndex = y * width + x;\n            if (x < 0 ||\n                x >= width ||\n                y < 0 ||\n                y >= height ||\n                visited[slicePixelIndex]) {\n                continue;\n            }\n            visited[slicePixelIndex] = true;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(volumeVoxelIndex, negativeSeedValue);\n            queue.push([x - 1, y]);\n            queue.push([x + 1, y]);\n            queue.push([x, y - 1]);\n            queue.push([x, y + 1]);\n        }\n    };\n    const scanLine = (startX, limitX, incX, y) => {\n        for (let x = startX; x !== limitX; x += incX) {\n            const slicePixelIndex = y * width + x;\n            const volumeVoxelIndex = sliceOffset + slicePixelIndex;\n            const volumeVoxelValue = subVolPixelData[volumeVoxelIndex];\n            if (volumeVoxelValue < negativePixelRange[0] ||\n                volumeVoxelValue > negativePixelRange[1]) {\n                break;\n            }\n            if (!visited[slicePixelIndex]) {\n                bfs(x, y);\n            }\n        }\n    };\n    for (let y = 0; y < height; y++) {\n        scanLine(0, width - 1, 1, y);\n        scanLine(width - 1, 0, -1, y);\n    }\n}\nfunction _setPositiveSeedValues(subVolume, labelmap, options) {\n    const { positiveSeedValue = POSITIVE_SEED_VALUE, positivePixelRange = POSITIVE_PIXEL_RANGE, } = options;\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const labelmapData = labelmap.voxelManager.getCompleteScalarDataArray();\n    const [width, height, numSlices] = labelmap.dimensions;\n    const middleSliceIndex = Math.floor(numSlices / 2);\n    const startSliceIndex = Math.max(middleSliceIndex - 3, 0);\n    const stopSliceIndex = Math.max(startSliceIndex + 5, numSlices);\n    const pixelsPerSlice = width * height;\n    for (let z = startSliceIndex; z < stopSliceIndex; z++) {\n        const zOffset = z * pixelsPerSlice;\n        for (let y = 0; y < height; y++) {\n            const yOffset = y * width;\n            for (let x = 0; x < width; x++) {\n                const index = zOffset + yOffset + x;\n                const pixelValue = subVolPixelData[index];\n                const isPositiveValue = pixelValue >= positivePixelRange[0] &&\n                    pixelValue <= positivePixelRange[1];\n                if (isPositiveValue) {\n                    labelmap.voxelManager.setAtIndex(index, positiveSeedValue);\n                }\n            }\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options) {\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, options);\n    _setNegativeSeedValues(subVolume, labelmap, options);\n    return labelmap;\n}\nasync function runGrowCutForBoundingBox(referencedVolumeId, boundingBoxInfo, options) {\n    const { boundingBox } = boundingBoxInfo;\n    const { ijkTopLeft, ijkBottomRight } = boundingBox;\n    const subVolumeBoundsIJK = {\n        minX: ijkTopLeft[0],\n        maxX: ijkBottomRight[0],\n        minY: ijkTopLeft[1],\n        maxY: ijkBottomRight[1],\n        minZ: ijkTopLeft[2],\n        maxZ: ijkBottomRight[2],\n    };\n    const subVolume = csUtils.createSubVolume(referencedVolumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n    const labelmap = await _createAndCacheSegmentationSubVolumeForBoundingBox(subVolume, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForBoundingBox as default, runGrowCutForBoundingBox };\n","import { quat, vec3 } from 'gl-matrix';\nimport { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { getSphereBoundsInfo } from '../../getSphereBoundsInfo';\nconst { transformWorldToIndex } = csUtils;\nconst POSITIVE_SEED_VALUE = 254;\nconst NEGATIVE_SEED_VALUE = 255;\nconst POSITIVE_SEED_VARIANCE = 0.1;\nconst NEGATIVE_SEED_VARIANCE = 0.8;\nfunction _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo) {\n    const { topLeftWorld, bottomRightWorld } = sphereBoundsInfo;\n    const topLeftIJK = transformWorldToIndex(referencedVolume.imageData, topLeftWorld);\n    const bottomRightIJK = transformWorldToIndex(referencedVolume.imageData, bottomRightWorld);\n    return {\n        ...sphereBoundsInfo,\n        topLeftIJK,\n        bottomRightIJK,\n    };\n}\nfunction _getSphereBoundsInfo(referencedVolume, sphereInfo) {\n    const direction = referencedVolume.imageData.getDirection();\n    const vecColumn = vec3.fromValues(direction[3], direction[4], direction[5]);\n    const { center: sphereCenterPoint, radius: sphereRadius } = sphereInfo;\n    const refVolImageData = referencedVolume.imageData;\n    const topCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, -sphereRadius);\n    const bottomCirclePoint = vec3.scaleAndAdd(vec3.create(), sphereCenterPoint, vecColumn, sphereRadius);\n    const sphereBoundsInfo = getSphereBoundsInfo([bottomCirclePoint, topCirclePoint], refVolImageData);\n    return _getGrowCutSphereBoundsInfo(referencedVolume, sphereBoundsInfo);\n}\nfunction _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport) {\n    const refVolImageData = referencedVolume.imageData;\n    const camera = viewport.getCamera();\n    const { ijkVecRowDir, ijkVecColDir } = csUtils.getVolumeDirectionVectors(refVolImageData, camera);\n    const obliqueView = [ijkVecRowDir, ijkVecColDir].some((vec) => !csUtils.isEqual(Math.abs(vec[0]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[1]), 1) &&\n        !csUtils.isEqual(Math.abs(vec[2]), 1));\n    if (obliqueView) {\n        console.warn('Oblique view is not supported!');\n        return;\n    }\n    const { boundsIJK: sphereBoundsIJK } = _getSphereBoundsInfo(referencedVolume, sphereInfo);\n    const subVolumeBoundsIJK = {\n        minX: sphereBoundsIJK[0][0],\n        maxX: sphereBoundsIJK[0][1] + 1,\n        minY: sphereBoundsIJK[1][0],\n        maxY: sphereBoundsIJK[1][1] + 1,\n        minZ: sphereBoundsIJK[2][0],\n        maxZ: sphereBoundsIJK[2][1] + 1,\n    };\n    return csUtils.createSubVolume(referencedVolume.volumeId, subVolumeBoundsIJK, {\n        targetBuffer: {\n            type: 'Float32Array',\n        },\n    });\n}\nfunction _setPositiveSeedValues(referencedVolume, labelmap, sphereInfo, options) {\n    const refVolumePixelData = referencedVolume.voxelManager.getCompleteScalarDataArray();\n    const worldStartPos = sphereInfo.center;\n    const [width, height, numSlices] = referencedVolume.dimensions;\n    const numPixelsPerSlice = width * height;\n    const ijkStartPosition = transformWorldToIndex(referencedVolume.imageData, worldStartPos);\n    const referencePixelValue = refVolumePixelData[ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0]];\n    const positiveSeedValue = options.positiveSeedValue ?? POSITIVE_SEED_VALUE;\n    const positiveSeedVariance = options.positiveSeedVariance ?? POSITIVE_SEED_VARIANCE;\n    const positiveSeedVarianceValue = Math.abs(referencePixelValue * positiveSeedVariance);\n    const minPositivePixelValue = referencePixelValue - positiveSeedVarianceValue;\n    const maxPositivePixelValue = referencePixelValue + positiveSeedVarianceValue;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    const startVoxelIndex = ijkStartPosition[2] * numPixelsPerSlice +\n        ijkStartPosition[1] * width +\n        ijkStartPosition[0];\n    labelmap.voxelManager.setAtIndex(startVoxelIndex, positiveSeedValue);\n    const queue = [ijkStartPosition];\n    while (queue.length) {\n        const ijkVoxel = queue.shift();\n        const [x, y, z] = ijkVoxel;\n        for (let i = 0, len = neighborsCoordDelta.length; i < len; i++) {\n            const neighborCoordDelta = neighborsCoordDelta[i];\n            const nx = x + neighborCoordDelta[0];\n            const ny = y + neighborCoordDelta[1];\n            const nz = z + neighborCoordDelta[2];\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborVoxelIndex = nz * numPixelsPerSlice + ny * width + nx;\n            const neighborPixelValue = refVolumePixelData[neighborVoxelIndex];\n            const neighborLabelmapValue = labelmap.voxelManager.getAtIndex(neighborVoxelIndex);\n            if (neighborLabelmapValue === positiveSeedValue ||\n                neighborPixelValue < minPositivePixelValue ||\n                neighborPixelValue > maxPositivePixelValue) {\n                continue;\n            }\n            labelmap.voxelManager.setAtIndex(neighborVoxelIndex, positiveSeedValue);\n            queue.push([nx, ny, nz]);\n        }\n    }\n}\nfunction _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options) {\n    const subVolPixelData = subVolume.voxelManager.getCompleteScalarDataArray();\n    const [columns, rows, numSlices] = labelmap.dimensions;\n    const numPixelsPerSlice = columns * rows;\n    const { worldVecRowDir, worldVecSliceDir } = csUtils.getVolumeDirectionVectors(labelmap.imageData, viewport.getCamera());\n    const ijkSphereCenter = transformWorldToIndex(subVolume.imageData, sphereInfo.center);\n    const referencePixelValue = subVolPixelData[ijkSphereCenter[2] * columns * rows +\n        ijkSphereCenter[1] * columns +\n        ijkSphereCenter[0]];\n    const negativeSeedVariance = options.negativeSeedVariance ?? NEGATIVE_SEED_VARIANCE;\n    const negativeSeedValue = options?.negativeSeedValue ?? NEGATIVE_SEED_VALUE;\n    const negativeSeedVarianceValue = Math.abs(referencePixelValue * negativeSeedVariance);\n    const minNegativePixelValue = referencePixelValue - negativeSeedVarianceValue;\n    const maxNegativePixelValue = referencePixelValue + negativeSeedVarianceValue;\n    const numCirclePoints = 360;\n    const rotationAngle = (2 * Math.PI) / numCirclePoints;\n    const worldQuat = quat.setAxisAngle(quat.create(), worldVecSliceDir, rotationAngle);\n    const vecRotation = vec3.clone(worldVecRowDir);\n    for (let i = 0; i < numCirclePoints; i++) {\n        const worldCircleBorderPoint = vec3.scaleAndAdd(vec3.create(), sphereInfo.center, vecRotation, sphereInfo.radius);\n        const ijkCircleBorderPoint = transformWorldToIndex(labelmap.imageData, worldCircleBorderPoint);\n        const [x, y, z] = ijkCircleBorderPoint;\n        vec3.transformQuat(vecRotation, vecRotation, worldQuat);\n        if (x < 0 ||\n            x >= columns ||\n            y < 0 ||\n            y >= rows ||\n            z < 0 ||\n            z >= numSlices) {\n            continue;\n        }\n        const offset = x + y * columns + z * numPixelsPerSlice;\n        const pixelValue = subVolPixelData[offset];\n        if (pixelValue < minNegativePixelValue ||\n            pixelValue > maxNegativePixelValue) {\n            labelmap.voxelManager.setAtIndex(offset, negativeSeedValue);\n        }\n    }\n}\nasync function _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options) {\n    const labelmap = await volumeLoader.createAndCacheDerivedLabelmapVolume(subVolume.volumeId);\n    _setPositiveSeedValues(subVolume, labelmap, sphereInfo, options);\n    _setNegativeSeedValues(subVolume, labelmap, sphereInfo, viewport, options);\n    return labelmap;\n}\nasync function runGrowCutForSphere(referencedVolumeId, sphereInfo, viewport, options) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const subVolume = _createSubVolumeFromSphere(referencedVolume, sphereInfo, viewport);\n    const labelmap = await _createAndCacheSegmentationSubVolumeForSphere(subVolume, sphereInfo, viewport, options);\n    await run(subVolume.volumeId, labelmap.volumeId);\n    return labelmap;\n}\nexport { runGrowCutForSphere as default, runGrowCutForSphere };\n","import { utilities as csUtils, cache, volumeLoader } from '@cornerstonejs/core';\nimport { run } from './runGrowCut';\nimport { POSITIVE_SEED_LABEL, NEGATIVE_SEED_LABEL, DEFAULT_NEIGHBORHOOD_RADIUS, DEFAULT_POSITIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER, DEFAULT_NEGATIVE_SEED_MARGIN, DEFAULT_NEGATIVE_SEEDS_COUNT, MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER, } from './constants';\nconst { transformWorldToIndex } = csUtils;\nconst MAX_POSITIVE_SEEDS = 100000;\nfunction calculateGrowCutSeeds(referencedVolume, worldPosition, options) {\n    const { dimensions, imageData: refImageData } = referencedVolume;\n    const [width, height, numSlices] = dimensions;\n    const referenceVolumeVoxelManager = referencedVolume.voxelManager;\n    const scalarData = referenceVolumeVoxelManager.getCompleteScalarDataArray();\n    const numPixelsPerSlice = width * height;\n    const neighborhoodRadius = options?.initialNeighborhoodRadius ?? DEFAULT_NEIGHBORHOOD_RADIUS;\n    const positiveK = options?.positiveStdDevMultiplier ?? DEFAULT_POSITIVE_STD_DEV_MULTIPLIER;\n    const negativeK = options?.negativeStdDevMultiplier ?? DEFAULT_NEGATIVE_STD_DEV_MULTIPLIER;\n    const negativeSeedMargin = options?.negativeSeedMargin ?? DEFAULT_NEGATIVE_SEED_MARGIN;\n    const negativeSeedsTargetPatches = options?.negativeSeedsTargetPatches ?? DEFAULT_NEGATIVE_SEEDS_COUNT;\n    const ijkStart = transformWorldToIndex(refImageData, worldPosition).map(Math.round);\n    const startIndex = referenceVolumeVoxelManager.toIndex(ijkStart);\n    if (ijkStart[0] < 0 ||\n        ijkStart[0] >= width ||\n        ijkStart[1] < 0 ||\n        ijkStart[1] >= height ||\n        ijkStart[2] < 0 ||\n        ijkStart[2] >= numSlices) {\n        console.warn('Click position is outside volume bounds.');\n        return null;\n    }\n    const initialStats = csUtils.calculateNeighborhoodStats(scalarData, dimensions, ijkStart, neighborhoodRadius);\n    if (initialStats.count === 0) {\n        initialStats.mean = scalarData[startIndex];\n        initialStats.stdDev = 0;\n    }\n    const positiveIntensityMin = initialStats.mean - positiveK * initialStats.stdDev;\n    const positiveIntensityMax = initialStats.mean + positiveK * initialStats.stdDev;\n    const neighborsCoordDelta = [\n        [-1, 0, 0],\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n        [0, 0, 1],\n    ];\n    let minX = Infinity, minY = Infinity, minZ = Infinity;\n    let maxX = -Infinity, maxY = -Infinity, maxZ = -Infinity;\n    const positiveSeedIndices = new Set();\n    const queue = [];\n    const startValue = scalarData[startIndex];\n    if (startValue >= positiveIntensityMin &&\n        startValue <= positiveIntensityMax) {\n        positiveSeedIndices.add(startIndex);\n        queue.push(ijkStart);\n        minX = maxX = ijkStart[0];\n        minY = maxY = ijkStart[1];\n        minZ = maxZ = ijkStart[2];\n    }\n    else {\n        console.warn('Clicked voxel intensity is outside the calculated positive range. No positive seeds generated.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let currentQueueIndex = 0;\n    while (currentQueueIndex < queue.length &&\n        positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n        const [x, y, z] = queue[currentQueueIndex++];\n        minX = Math.min(x, minX);\n        minY = Math.min(y, minY);\n        minZ = Math.min(z, minZ);\n        maxX = Math.max(x, maxX);\n        maxY = Math.max(y, maxY);\n        maxZ = Math.max(z, maxZ);\n        for (let i = 0; i < neighborsCoordDelta.length; i++) {\n            const [dx, dy, dz] = neighborsCoordDelta[i];\n            const nx = x + dx;\n            const ny = y + dy;\n            const nz = z + dz;\n            if (nx < 0 ||\n                nx >= width ||\n                ny < 0 ||\n                ny >= height ||\n                nz < 0 ||\n                nz >= numSlices) {\n                continue;\n            }\n            const neighborIndex = nz * numPixelsPerSlice + ny * width + nx;\n            if (positiveSeedIndices.has(neighborIndex)) {\n                continue;\n            }\n            const neighborValue = scalarData[neighborIndex];\n            if (neighborValue >= positiveIntensityMin &&\n                neighborValue <= positiveIntensityMax) {\n                positiveSeedIndices.add(neighborIndex);\n                if (positiveSeedIndices.size < MAX_POSITIVE_SEEDS) {\n                    queue.push([nx, ny, nz]);\n                }\n            }\n        }\n    }\n    if (positiveSeedIndices.size >= MAX_POSITIVE_SEEDS) {\n        console.debug(`Reached maximum number of positive seeds (${MAX_POSITIVE_SEEDS}). Stopping BFS.`);\n    }\n    if (positiveSeedIndices.size === 0) {\n        console.warn('No positive seeds found after BFS.');\n        return { positiveSeedIndices: new Set(), negativeSeedIndices: new Set() };\n    }\n    let positiveSum = 0;\n    let positiveSumSq = 0;\n    positiveSeedIndices.forEach((index) => {\n        const value = scalarData[index];\n        positiveSum += value;\n        positiveSumSq += value * value;\n    });\n    const positiveCount = positiveSeedIndices.size;\n    const positiveMean = positiveSum / positiveCount;\n    const positiveVariance = positiveSumSq / positiveCount - positiveMean * positiveMean;\n    const positiveStdDev = Math.sqrt(Math.max(0, positiveVariance));\n    const negativeDiffThreshold = negativeK * positiveStdDev;\n    const minXm = Math.max(0, minX - negativeSeedMargin);\n    const minYm = Math.max(0, minY - negativeSeedMargin);\n    const minZm = Math.max(0, minZ - negativeSeedMargin);\n    const maxXm = Math.min(width - 1, maxX + negativeSeedMargin);\n    const maxYm = Math.min(height - 1, maxY + negativeSeedMargin);\n    const maxZm = Math.min(numSlices - 1, maxZ + negativeSeedMargin);\n    const negativeSeedIndices = new Set();\n    let attempts = 0;\n    let patchesAdded = 0;\n    const maxAttempts = negativeSeedsTargetPatches * MAX_NEGATIVE_SEED_ATTEMPTS_MULTIPLIER;\n    while (patchesAdded < negativeSeedsTargetPatches && attempts < maxAttempts) {\n        attempts++;\n        const rx = Math.floor(Math.random() * (maxXm - minXm + 1) + minXm);\n        const ry = Math.floor(Math.random() * (maxYm - minYm + 1) + minYm);\n        const rz = Math.floor(Math.random() * (maxZm - minZm + 1) + minZm);\n        const centerIndex = rz * numPixelsPerSlice + ry * width + rx;\n        if (positiveSeedIndices.has(centerIndex) ||\n            negativeSeedIndices.has(centerIndex)) {\n            continue;\n        }\n        const centerValue = scalarData[centerIndex];\n        if (Math.abs(centerValue - positiveMean) > negativeDiffThreshold) {\n            let patchContributed = false;\n            for (let dy = -1; dy <= 1; dy++) {\n                const ny = ry + dy;\n                if (ny < 0 || ny >= height) {\n                    continue;\n                }\n                for (let dx = -1; dx <= 1; dx++) {\n                    const nx = rx + dx;\n                    if (nx < 0 || nx >= width) {\n                        continue;\n                    }\n                    const neighborIndex = rz * numPixelsPerSlice + ny * width + nx;\n                    if (positiveSeedIndices.has(neighborIndex) ||\n                        negativeSeedIndices.has(neighborIndex)) {\n                        continue;\n                    }\n                    negativeSeedIndices.add(neighborIndex);\n                    patchContributed = true;\n                }\n            }\n            if (patchContributed) {\n                patchesAdded++;\n            }\n        }\n    }\n    if (negativeSeedIndices.size === 0) {\n        console.warn('Could not find any negative seeds. GrowCut might fail or produce poor results.');\n    }\n    console.debug('positiveSeedIndices', positiveSeedIndices.size);\n    console.debug('negativeSeedIndices', negativeSeedIndices.size);\n    return { positiveSeedIndices, negativeSeedIndices };\n}\nasync function runOneClickGrowCut({ referencedVolumeId, worldPosition, options, }) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    const labelmap = volumeLoader.createAndCacheDerivedLabelmapVolume(referencedVolumeId);\n    labelmap.voxelManager.forEach(({ index, value }) => {\n        if (value !== 0) {\n            labelmap.voxelManager.setAtIndex(index, 0);\n        }\n    });\n    const seeds = options.seeds ??\n        calculateGrowCutSeeds(referencedVolume, worldPosition, options);\n    const positiveSeedLabel = options?.positiveSeedValue ?? POSITIVE_SEED_LABEL;\n    const negativeSeedLabel = options?.negativeSeedValue ?? NEGATIVE_SEED_LABEL;\n    if (!seeds) {\n        return null;\n    }\n    const { positiveSeedIndices, negativeSeedIndices } = seeds;\n    if (positiveSeedIndices.size < 10 ||\n        positiveSeedIndices.size > MAX_POSITIVE_SEEDS ||\n        negativeSeedIndices.size < 10) {\n        console.warn('Not enough seeds found. GrowCut might fail or produce poor results.');\n        return labelmap;\n    }\n    positiveSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, positiveSeedLabel);\n    });\n    negativeSeedIndices.forEach((index) => {\n        labelmap.voxelManager.setAtIndex(index, negativeSeedLabel);\n    });\n    await run(referencedVolumeId, labelmap.volumeId, options);\n    return labelmap;\n}\nexport { runOneClickGrowCut as default, runOneClickGrowCut, calculateGrowCutSeeds, };\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getBrushToolInstances } from './getBrushToolInstances';\nexport function invalidateBrushCursor(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n    brushBasedToolInstances.forEach((tool) => {\n        tool.invalidateBrushCursor();\n    });\n    const viewportsInfo = toolGroup.getViewportsInfo();\n    const viewportsInfoArray = Object.keys(viewportsInfo).map((key) => viewportsInfo[key]);\n    if (!viewportsInfoArray.length) {\n        return;\n    }\n    const viewportIds = toolGroup.getViewportIds();\n    triggerAnnotationRenderForViewportIds(viewportIds);\n}\n","import debounce from './debounce';\nimport isObject from './isObject';\nfunction throttle(func, wait, options) {\n    let leading = true;\n    let trailing = true;\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    if (isObject(options)) {\n        leading = 'leading' in options ? Boolean(options.leading) : leading;\n        trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n    }\n    return debounce(func, wait, {\n        leading,\n        trailing,\n        maxWait: wait,\n    });\n}\nexport default throttle;\n","function getDeltaPoints(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _subtractPoints2D(curr.page, last.page),\n        client: _subtractPoints2D(curr.client, last.client),\n        canvas: _subtractPoints2D(curr.canvas, last.canvas),\n        world: _subtractPoints3D(curr.world, last.world),\n    };\n}\nfunction getDeltaDistance(currentPoints, lastPoints) {\n    const curr = getMeanPoints(currentPoints);\n    const last = getMeanPoints(lastPoints);\n    return {\n        page: _getDistance2D(curr.page, last.page),\n        client: _getDistance2D(curr.client, last.client),\n        canvas: _getDistance2D(curr.canvas, last.canvas),\n        world: _getDistance3D(curr.world, last.world),\n    };\n}\nfunction getDeltaRotation(currentPoints, lastPoints) {\n}\nfunction getDeltaDistanceBetweenIPoints(currentPoints, lastPoints) {\n    const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);\n    const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);\n    const deltaDistance = {\n        page: currentDistance.page - lastDistance.page,\n        client: currentDistance.client - lastDistance.client,\n        canvas: currentDistance.canvas - lastDistance.canvas,\n        world: currentDistance.world - lastDistance.world,\n    };\n    return deltaDistance;\n}\nfunction copyPointsList(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction copyPoints(points) {\n    return JSON.parse(JSON.stringify(points));\n}\nfunction getMeanPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n    });\n}\nfunction getMeanTouchPoints(points) {\n    return points.reduce((prev, curr) => {\n        return {\n            page: [\n                prev.page[0] + curr.page[0] / points.length,\n                prev.page[1] + curr.page[1] / points.length,\n            ],\n            client: [\n                prev.client[0] + curr.client[0] / points.length,\n                prev.client[1] + curr.client[1] / points.length,\n            ],\n            canvas: [\n                prev.canvas[0] + curr.canvas[0] / points.length,\n                prev.canvas[1] + curr.canvas[1] / points.length,\n            ],\n            world: [\n                prev.world[0] + curr.world[0] / points.length,\n                prev.world[1] + curr.world[1] / points.length,\n                prev.world[2] + curr.world[2] / points.length,\n            ],\n            touch: {\n                identifier: null,\n                radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,\n                radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,\n                force: prev.touch.force + curr.touch.force / points.length,\n                rotationAngle: prev.touch.rotationAngle + curr.touch.rotationAngle / points.length,\n            },\n        };\n    }, {\n        page: [0, 0],\n        client: [0, 0],\n        canvas: [0, 0],\n        world: [0, 0, 0],\n        touch: {\n            identifier: null,\n            radiusX: 0,\n            radiusY: 0,\n            force: 0,\n            rotationAngle: 0,\n        },\n    });\n}\nfunction _subtractPoints2D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1]];\n}\nfunction _subtractPoints3D(point0, point1) {\n    return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\nfunction _getMeanDistanceBetweenAllIPoints(points) {\n    const pairedDistance = [];\n    for (let i = 0; i < points.length; i++) {\n        for (let j = 0; j < points.length; j++) {\n            if (i < j) {\n                pairedDistance.push({\n                    page: _getDistance2D(points[i].page, points[j].page),\n                    client: _getDistance2D(points[i].client, points[j].client),\n                    canvas: _getDistance2D(points[i].canvas, points[j].canvas),\n                    world: _getDistance3D(points[i].world, points[j].world),\n                });\n            }\n        }\n    }\n    return pairedDistance.reduce((prev, curr) => {\n        return {\n            page: prev.page + curr.page / pairedDistance.length,\n            client: prev.client + curr.client / pairedDistance.length,\n            canvas: prev.canvas + curr.canvas / pairedDistance.length,\n            world: prev.world + curr.world / pairedDistance.length,\n        };\n    }, {\n        page: 0,\n        client: 0,\n        canvas: 0,\n        world: 0,\n    });\n}\nfunction _getDistance2D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2));\n}\nfunction _getDistance3D(point0, point1) {\n    return Math.sqrt(Math.pow(point0[0] - point1[0], 2) +\n        Math.pow(point0[1] - point1[1], 2) +\n        Math.pow(point0[2] - point1[2], 2));\n}\nexport { getMeanPoints, getMeanTouchPoints, copyPoints, copyPointsList, getDeltaDistanceBetweenIPoints, getDeltaPoints, getDeltaDistance, getDeltaRotation, };\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nimport { getToolGroup } from '../store/ToolGroupManager';\nexport function triggerAnnotationRenderForToolGroupIds(toolGroupIds) {\n    toolGroupIds.forEach((toolGroupId) => {\n        const toolGroup = getToolGroup(toolGroupId);\n        if (!toolGroup) {\n            console.warn(`ToolGroup not available for ${toolGroupId}`);\n            return;\n        }\n        const viewportsInfo = toolGroup.getViewportsInfo();\n        viewportsInfo.forEach((viewportInfo) => {\n            const { renderingEngineId, viewportId } = viewportInfo;\n            const renderingEngine = getRenderingEngine(renderingEngineId);\n            if (!renderingEngine) {\n                console.warn(`RenderingEngine not available for ${renderingEngineId}`);\n                return;\n            }\n            const viewport = renderingEngine.getViewport(viewportId);\n            triggerAnnotationRender(viewport.element);\n        });\n    });\n}\nexport default triggerAnnotationRenderForToolGroupIds;\n","import { getEnabledElementByViewportId } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\nexport function triggerAnnotationRenderForViewportIds(viewportIdsToRender) {\n    if (!viewportIdsToRender.length) {\n        return;\n    }\n    viewportIdsToRender.forEach((viewportId) => {\n        const enabledElement = getEnabledElementByViewportId(viewportId);\n        if (!enabledElement) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const { viewport } = enabledElement;\n        if (!viewport) {\n            console.warn(`Viewport not available for ${viewportId}`);\n            return;\n        }\n        const element = viewport.element;\n        triggerAnnotationRender(element);\n    });\n}\nexport default triggerAnnotationRenderForViewportIds;\n","import { cache, StackViewport, BaseVolumeViewport, utilities, } from '@cornerstonejs/core';\nfunction isViewportPreScaled(viewport, targetId) {\n    if (viewport instanceof BaseVolumeViewport) {\n        const volumeId = utilities.getVolumeId(targetId);\n        const volume = cache.getVolume(volumeId);\n        return !!volume?.scaling && Object.keys(volume.scaling).length > 0;\n    }\n    else if (viewport instanceof StackViewport) {\n        const { preScale } = viewport.getImageData() || {};\n        return !!preScale?.scaled;\n    }\n    else {\n        return false;\n    }\n}\nexport { isViewportPreScaled };\n","export var ColorbarRangeTextPosition;\n(function (ColorbarRangeTextPosition) {\n    ColorbarRangeTextPosition[\"Top\"] = \"top\";\n    ColorbarRangeTextPosition[\"Left\"] = \"left\";\n    ColorbarRangeTextPosition[\"Bottom\"] = \"bottom\";\n    ColorbarRangeTextPosition[\"Right\"] = \"right\";\n})(ColorbarRangeTextPosition || (ColorbarRangeTextPosition = {}));\n","const AttributeTypes = {\n  SCALARS: 0,\n  VECTORS: 1,\n  NORMALS: 2,\n  TCOORDS: 3,\n  TENSORS: 4,\n  GLOBALIDS: 5,\n  PEDIGREEIDS: 6,\n  EDGEFLAG: 7,\n  NUM_ATTRIBUTES: 8\n};\nconst AttributeLimitTypes = {\n  MAX: 0,\n  EXACT: 1,\n  NOLIMIT: 2\n};\nconst CellGhostTypes = {\n  DUPLICATECELL: 1,\n  // the cell is present on multiple processors\n  HIGHCONNECTIVITYCELL: 2,\n  // the cell has more neighbors than in a regular mesh\n  LOWCONNECTIVITYCELL: 4,\n  // the cell has less neighbors than in a regular mesh\n  REFINEDCELL: 8,\n  // other cells are present that refines it.\n  EXTERIORCELL: 16,\n  // the cell is on the exterior of the data set\n  HIDDENCELL: 32 // the cell is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst PointGhostTypes = {\n  DUPLICATEPOINT: 1,\n  // the cell is present on multiple processors\n  HIDDENPOINT: 2 // the point is needed to maintain connectivity, but the data values should be ignored.\n};\n\nconst AttributeCopyOperations = {\n  COPYTUPLE: 0,\n  INTERPOLATE: 1,\n  PASSDATA: 2,\n  ALLCOPY: 3 // all of the above\n};\n\nconst ghostArrayName = 'vtkGhostType';\nconst DesiredOutputPrecision = {\n  DEFAULT: 0,\n  // use the point type that does not truncate any data\n  SINGLE: 1,\n  // use Float32Array\n  DOUBLE: 2 // use Float64Array\n};\n\nvar Constants = {\n  AttributeCopyOperations,\n  AttributeLimitTypes,\n  AttributeTypes,\n  CellGhostTypes,\n  DesiredOutputPrecision,\n  PointGhostTypes,\n  ghostArrayName\n};\n\nexport { AttributeCopyOperations, AttributeLimitTypes, AttributeTypes, CellGhostTypes, DesiredOutputPrecision, PointGhostTypes, Constants as default, ghostArrayName };\n","import { m as macro } from '../../macros2.js';\nimport { b as roundVector, c as clampVector } from '../Core/Math/index.js';\nimport vtkBoundingBox from './BoundingBox.js';\nimport vtkDataSet from './DataSet.js';\nimport vtkStructuredData from './StructuredData.js';\nimport { StructuredType } from './StructuredData/Constants.js';\nimport { mat3, mat4, vec3 } from 'gl-matrix';\n\nconst {\n  vtkErrorMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// vtkImageData methods\n// ----------------------------------------------------------------------------\n\nfunction vtkImageData(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkImageData');\n  publicAPI.setExtent = function () {\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return false;\n    }\n    for (var _len = arguments.length, inExtent = new Array(_len), _key = 0; _key < _len; _key++) {\n      inExtent[_key] = arguments[_key];\n    }\n    const extentArray = inExtent.length === 1 ? inExtent[0] : inExtent;\n    if (extentArray.length !== 6) {\n      return false;\n    }\n    const changeDetected = model.extent.some((item, index) => item !== extentArray[index]);\n    if (changeDetected) {\n      model.extent = extentArray.slice();\n      model.dataDescription = vtkStructuredData.getDataDescriptionFromExtent(model.extent);\n      publicAPI.modified();\n    }\n    return changeDetected;\n  };\n  publicAPI.setDimensions = function () {\n    let i;\n    let j;\n    let k;\n    if (model.deleted) {\n      vtkErrorMacro('instance deleted - cannot call any method');\n      return;\n    }\n    if (arguments.length === 1) {\n      const array = arguments.length <= 0 ? undefined : arguments[0];\n      i = array[0];\n      j = array[1];\n      k = array[2];\n    } else if (arguments.length === 3) {\n      i = arguments.length <= 0 ? undefined : arguments[0];\n      j = arguments.length <= 1 ? undefined : arguments[1];\n      k = arguments.length <= 2 ? undefined : arguments[2];\n    } else {\n      vtkErrorMacro('Bad dimension specification');\n      return;\n    }\n    publicAPI.setExtent(0, i - 1, 0, j - 1, 0, k - 1);\n  };\n  publicAPI.getDimensions = () => [model.extent[1] - model.extent[0] + 1, model.extent[3] - model.extent[2] + 1, model.extent[5] - model.extent[4] + 1];\n  publicAPI.getNumberOfCells = () => {\n    const dims = publicAPI.getDimensions();\n    let nCells = 1;\n    for (let i = 0; i < 3; i++) {\n      if (dims[i] === 0) {\n        return 0;\n      }\n      if (dims[i] > 1) {\n        nCells *= dims[i] - 1;\n      }\n    }\n    return nCells;\n  };\n  publicAPI.getNumberOfPoints = () => {\n    const dims = publicAPI.getDimensions();\n    return dims[0] * dims[1] * dims[2];\n  };\n  publicAPI.getPoint = index => {\n    const dims = publicAPI.getDimensions();\n    if (dims[0] === 0 || dims[1] === 0 || dims[2] === 0) {\n      vtkErrorMacro('Requesting a point from an empty image.');\n      return null;\n    }\n    const ijk = new Float64Array(3);\n    switch (model.dataDescription) {\n      case StructuredType.EMPTY:\n        return null;\n      case StructuredType.SINGLE_POINT:\n        break;\n      case StructuredType.X_LINE:\n        ijk[0] = index;\n        break;\n      case StructuredType.Y_LINE:\n        ijk[1] = index;\n        break;\n      case StructuredType.Z_LINE:\n        ijk[2] = index;\n        break;\n      case StructuredType.XY_PLANE:\n        ijk[0] = index % dims[0];\n        ijk[1] = index / dims[0];\n        break;\n      case StructuredType.YZ_PLANE:\n        ijk[1] = index % dims[1];\n        ijk[2] = index / dims[1];\n        break;\n      case StructuredType.XZ_PLANE:\n        ijk[0] = index % dims[0];\n        ijk[2] = index / dims[0];\n        break;\n      case StructuredType.XYZ_GRID:\n        ijk[0] = index % dims[0];\n        ijk[1] = index / dims[0] % dims[1];\n        ijk[2] = index / (dims[0] * dims[1]);\n        break;\n      default:\n        vtkErrorMacro('Invalid dataDescription');\n        break;\n    }\n    const coords = [0, 0, 0];\n    publicAPI.indexToWorld(ijk, coords);\n    return coords;\n  };\n\n  // vtkCell *GetCell(vtkIdType cellId) VTK_OVERRIDE;\n  // void GetCell(vtkIdType cellId, vtkGenericCell *cell) VTK_OVERRIDE;\n  // void GetCellBounds(vtkIdType cellId, double bounds[6]) VTK_OVERRIDE;\n  // virtual vtkIdType FindPoint(double x, double y, double z)\n  // {\n  //   return this->vtkDataSet::FindPoint(x, y, z);\n  // }\n  // vtkIdType FindPoint(double x[3]) VTK_OVERRIDE;\n  // vtkIdType FindCell(\n  //   double x[3], vtkCell *cell, vtkIdType cellId, double tol2,\n  //   int& subId, double pcoords[3], double *weights) VTK_OVERRIDE;\n  // vtkIdType FindCell(\n  //   double x[3], vtkCell *cell, vtkGenericCell *gencell,\n  //   vtkIdType cellId, double tol2, int& subId,\n  //   double pcoords[3], double *weights) VTK_OVERRIDE;\n  // vtkCell *FindAndGetCell(double x[3], vtkCell *cell, vtkIdType cellId,\n  //                                 double tol2, int& subId, double pcoords[3],\n  //                                 double *weights) VTK_OVERRIDE;\n  // int GetCellType(vtkIdType cellId) VTK_OVERRIDE;\n  // void GetCellPoints(vtkIdType cellId, vtkIdList *ptIds) VTK_OVERRIDE\n  //   {vtkStructuredData::GetCellPoints(cellId,ptIds,this->DataDescription,\n  //                                     this->GetDimensions());}\n  // void GetPointCells(vtkIdType ptId, vtkIdList *cellIds) VTK_OVERRIDE\n  //   {vtkStructuredData::GetPointCells(ptId,cellIds,this->GetDimensions());}\n  // void ComputeBounds() VTK_OVERRIDE;\n  // int GetMaxCellSize() VTK_OVERRIDE {return 8;}; //voxel is the largest\n\n  publicAPI.getBounds = () => publicAPI.extentToBounds(publicAPI.getSpatialExtent());\n  publicAPI.extentToBounds = ex => vtkBoundingBox.transformBounds(ex, model.indexToWorld);\n  publicAPI.getSpatialExtent = () => vtkBoundingBox.inflate([...model.extent], 0.5);\n\n  // Internal, shouldn't need to call this manually.\n  publicAPI.computeTransforms = () => {\n    mat4.fromTranslation(model.indexToWorld, model.origin);\n    model.indexToWorld[0] = model.direction[0];\n    model.indexToWorld[1] = model.direction[1];\n    model.indexToWorld[2] = model.direction[2];\n    model.indexToWorld[4] = model.direction[3];\n    model.indexToWorld[5] = model.direction[4];\n    model.indexToWorld[6] = model.direction[5];\n    model.indexToWorld[8] = model.direction[6];\n    model.indexToWorld[9] = model.direction[7];\n    model.indexToWorld[10] = model.direction[8];\n    mat4.scale(model.indexToWorld, model.indexToWorld, model.spacing);\n    mat4.invert(model.worldToIndex, model.indexToWorld);\n  };\n  publicAPI.indexToWorld = function (ain) {\n    let aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    vec3.transformMat4(aout, ain, model.indexToWorld);\n    return aout;\n  };\n  publicAPI.indexToWorldVec3 = publicAPI.indexToWorld;\n  publicAPI.worldToIndex = function (ain) {\n    let aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    vec3.transformMat4(aout, ain, model.worldToIndex);\n    return aout;\n  };\n  publicAPI.worldToIndexVec3 = publicAPI.worldToIndex;\n  publicAPI.indexToWorldBounds = function (bin) {\n    let bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return vtkBoundingBox.transformBounds(bin, model.indexToWorld, bout);\n  };\n  publicAPI.worldToIndexBounds = function (bin) {\n    let bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return vtkBoundingBox.transformBounds(bin, model.worldToIndex, bout);\n  };\n\n  // Make sure the transform is correct\n  publicAPI.onModified(publicAPI.computeTransforms);\n  publicAPI.computeTransforms();\n  publicAPI.getCenter = () => vtkBoundingBox.getCenter(publicAPI.getBounds());\n  publicAPI.computeHistogram = function (worldBounds) {\n    let voxelFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const bounds = [0, 0, 0, 0, 0, 0];\n    publicAPI.worldToIndexBounds(worldBounds, bounds);\n    const point1 = [0, 0, 0];\n    const point2 = [0, 0, 0];\n    vtkBoundingBox.computeCornerPoints(bounds, point1, point2);\n    roundVector(point1, point1);\n    roundVector(point2, point2);\n    const dimensions = publicAPI.getDimensions();\n    clampVector(point1, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point1);\n    clampVector(point2, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point2);\n    const yStride = dimensions[0];\n    const zStride = dimensions[0] * dimensions[1];\n    const pixels = publicAPI.getPointData().getScalars().getData();\n    let maximum = -Infinity;\n    let minimum = Infinity;\n    let sumOfSquares = 0;\n    let isum = 0;\n    let inum = 0;\n    for (let z = point1[2]; z <= point2[2]; z++) {\n      for (let y = point1[1]; y <= point2[1]; y++) {\n        let index = point1[0] + y * yStride + z * zStride;\n        for (let x = point1[0]; x <= point2[0]; x++) {\n          if (!voxelFunction || voxelFunction([x, y, z], bounds)) {\n            const pixel = pixels[index];\n            if (pixel > maximum) maximum = pixel;\n            if (pixel < minimum) minimum = pixel;\n            sumOfSquares += pixel * pixel;\n            isum += pixel;\n            inum += 1;\n          }\n          ++index;\n        }\n      }\n    }\n    const average = inum > 0 ? isum / inum : 0;\n    const variance = inum ? Math.abs(sumOfSquares / inum - average * average) : 0;\n    const sigma = Math.sqrt(variance);\n    return {\n      minimum,\n      maximum,\n      average,\n      variance,\n      sigma,\n      count: inum\n    };\n  };\n\n  // TODO: use the unimplemented `vtkDataSetAttributes` for scalar length, that is currently also a TODO (GetNumberOfComponents).\n  // Scalar data could be tuples for color information?\n  publicAPI.computeIncrements = function (extent) {\n    let numberOfComponents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const increments = [];\n    let incr = numberOfComponents;\n\n    // Calculate array increment offsets\n    // similar to c++ vtkImageData::ComputeIncrements\n    for (let idx = 0; idx < 3; ++idx) {\n      increments[idx] = incr;\n      incr *= extent[idx * 2 + 1] - extent[idx * 2] + 1;\n    }\n    return increments;\n  };\n\n  /**\n   * @param {Number[]} index the localized `[i,j,k]` pixel array position. Float values will be rounded.\n   * @return {Number} the corresponding flattened index in the scalar array\n   */\n  publicAPI.computeOffsetIndex = _ref => {\n    let [i, j, k] = _ref;\n    const extent = publicAPI.getExtent();\n    const numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();\n    const increments = publicAPI.computeIncrements(extent, numberOfComponents);\n    // Use the array increments to find the pixel index\n    // similar to c++ vtkImageData::GetArrayPointer\n    // Math.floor to catch \"practically 0\" e^-15 scenarios.\n    return Math.floor((Math.round(i) - extent[0]) * increments[0] + (Math.round(j) - extent[2]) * increments[1] + (Math.round(k) - extent[4]) * increments[2]);\n  };\n\n  /**\n   * @param {Number[]} xyz the [x,y,z] Array in world coordinates\n   * @return {Number|NaN} the corresponding pixel's index in the scalar array\n   */\n  publicAPI.getOffsetIndexFromWorld = xyz => {\n    const extent = publicAPI.getExtent();\n    const index = publicAPI.worldToIndex(xyz);\n\n    // Confirm indexed i,j,k coords are within the bounds of the volume\n    for (let idx = 0; idx < 3; ++idx) {\n      if (index[idx] < extent[idx * 2] || index[idx] > extent[idx * 2 + 1]) {\n        vtkErrorMacro(`GetScalarPointer: Pixel ${index} is not in memory. Current extent = ${extent}`);\n        return NaN;\n      }\n    }\n\n    // Assumed the index here is within 0 <-> scalarData.length, but doesn't hurt to check upstream\n    return publicAPI.computeOffsetIndex(index);\n  };\n  /**\n   * @param {Number[]} xyz the [x,y,z] Array in world coordinates\n   * @param {Number?} comp the scalar component index for multi-component scalars\n   * @return {Number|NaN} the corresponding pixel's scalar value\n   */\n  publicAPI.getScalarValueFromWorld = function (xyz) {\n    let comp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();\n    if (comp < 0 || comp >= numberOfComponents) {\n      vtkErrorMacro(`GetScalarPointer: Scalar Component ${comp} is not within bounds. Current Scalar numberOfComponents: ${numberOfComponents}`);\n      return NaN;\n    }\n    const offsetIndex = publicAPI.getOffsetIndexFromWorld(xyz);\n    if (Number.isNaN(offsetIndex)) {\n      // VTK Error Macro will have been tripped already, no need to do it again,\n      return offsetIndex;\n    }\n    return publicAPI.getPointData().getScalars().getComponent(offsetIndex, comp);\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  direction: null,\n  // a mat3\n  indexToWorld: null,\n  // a mat4\n  worldToIndex: null,\n  // a mat4\n  spacing: [1.0, 1.0, 1.0],\n  origin: [0.0, 0.0, 0.0],\n  extent: [0, -1, 0, -1, 0, -1],\n  dataDescription: StructuredType.EMPTY\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkDataSet.extend(publicAPI, model, initialValues);\n  if (!model.direction) {\n    model.direction = mat3.identity(new Float64Array(9));\n  } else if (Array.isArray(model.direction)) {\n    model.direction = new Float64Array(model.direction.slice(0, 9));\n  }\n  model.indexToWorld = new Float64Array(16);\n  model.worldToIndex = new Float64Array(16);\n\n  // Set/Get methods\n  macro.get(publicAPI, model, ['indexToWorld', 'worldToIndex']);\n  macro.setGetArray(publicAPI, model, ['origin', 'spacing'], 3);\n  macro.setGetArray(publicAPI, model, ['direction'], 9);\n  macro.getArray(publicAPI, model, ['extent'], 6);\n\n  // Object specific methods\n  vtkImageData(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkImageData');\n\n// ----------------------------------------------------------------------------\n\nvar vtkImageData$1 = {\n  newInstance,\n  extend\n};\n\nexport { vtkImageData$1 as default, extend, newInstance };\n","import { m as macro } from '../../macros2.js';\nimport { h as hsv2rgb, i as isNan, K as floor, L as isInf, M as rgb2hsv, N as rgb2lab, O as lab2rgb } from '../../Common/Core/Math/index.js';\nimport vtkScalarsToColors from '../../Common/Core/ScalarsToColors.js';\nimport Constants from './ColorTransferFunction/Constants.js';\n\nconst {\n  ColorSpace,\n  Scale\n} = Constants;\nconst {\n  ScalarMappingTarget\n} = vtkScalarsToColors;\nconst {\n  vtkDebugMacro,\n  vtkErrorMacro,\n  vtkWarningMacro\n} = macro;\n\n// ----------------------------------------------------------------------------\n// Global methods\n// ----------------------------------------------------------------------------\n/* eslint-disable no-continue                                                */\n\n// Convert to and from a special polar version of CIELAB (useful for creating\n// continuous diverging color maps).\nfunction vtkColorTransferFunctionLabToMsh(lab, msh) {\n  const L = lab[0];\n  const a = lab[1];\n  const b = lab[2];\n  const M = Math.sqrt(L * L + a * a + b * b);\n  const s = M > 0.001 ? Math.acos(L / M) : 0.0;\n  const h = s > 0.001 ? Math.atan2(b, a) : 0.0;\n  msh[0] = M;\n  msh[1] = s;\n  msh[2] = h;\n}\nfunction vtkColorTransferFunctionMshToLab(msh, lab) {\n  const M = msh[0];\n  const s = msh[1];\n  const h = msh[2];\n  lab[0] = M * Math.cos(s);\n  lab[1] = M * Math.sin(s) * Math.cos(h);\n  lab[2] = M * Math.sin(s) * Math.sin(h);\n}\n\n// For the case when interpolating from a saturated color to an unsaturated\n// color, find a hue for the unsaturated color that makes sense.\nfunction vtkColorTransferFunctionAdjustHue(msh, unsatM) {\n  if (msh[0] >= unsatM - 0.1) {\n    // The best we can do is hold hue constant.\n    return msh[2];\n  }\n\n  // This equation is designed to make the perceptual change of the\n  // interpolation to be close to constant.\n  const hueSpin = msh[1] * Math.sqrt(unsatM * unsatM - msh[0] * msh[0]) / (msh[0] * Math.sin(msh[1]));\n  // Spin hue away from 0 except in purple hues.\n  if (msh[2] > -0.3 * Math.PI) {\n    return msh[2] + hueSpin;\n  }\n  return msh[2] - hueSpin;\n}\nfunction vtkColorTransferFunctionAngleDiff(a1, a2) {\n  let adiff = a1 - a2;\n  if (adiff < 0.0) {\n    adiff = -adiff;\n  }\n  while (adiff >= 2.0 * Math.PI) {\n    adiff -= 2.0 * Math.PI;\n  }\n  if (adiff > Math.PI) {\n    adiff = 2.0 * Math.PI - adiff;\n  }\n  return adiff;\n}\n\n// Interpolate a diverging color map.\nfunction vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, result) {\n  const lab1 = [];\n  const lab2 = [];\n  rgb2lab(rgb1, lab1);\n  rgb2lab(rgb2, lab2);\n  const msh1 = [];\n  const msh2 = [];\n  vtkColorTransferFunctionLabToMsh(lab1, msh1);\n  vtkColorTransferFunctionLabToMsh(lab2, msh2);\n\n  // If the endpoints are distinct saturated colors, then place white in between\n  // them.\n  let localS = s;\n  if (msh1[1] > 0.05 && msh2[1] > 0.05 && vtkColorTransferFunctionAngleDiff(msh1[2], msh2[2]) > 0.33 * Math.PI) {\n    // Insert the white midpoint by setting one end to white and adjusting the\n    // scalar value.\n    let Mmid = Math.max(msh1[0], msh2[0]);\n    Mmid = Math.max(88.0, Mmid);\n    if (s < 0.5) {\n      msh2[0] = Mmid;\n      msh2[1] = 0.0;\n      msh2[2] = 0.0;\n      localS *= 2.0;\n    } else {\n      msh1[0] = Mmid;\n      msh1[1] = 0.0;\n      msh1[2] = 0.0;\n      localS = 2.0 * localS - 1.0;\n    }\n  }\n\n  // If one color has no saturation, then its hue value is invalid.  In this\n  // case, we want to set it to something logical so that the interpolation of\n  // hue makes sense.\n  if (msh1[1] < 0.05 && msh2[1] > 0.05) {\n    msh1[2] = vtkColorTransferFunctionAdjustHue(msh2, msh1[0]);\n  } else if (msh2[1] < 0.05 && msh1[1] > 0.05) {\n    msh2[2] = vtkColorTransferFunctionAdjustHue(msh1, msh2[0]);\n  }\n  const mshTmp = [];\n  mshTmp[0] = (1 - localS) * msh1[0] + localS * msh2[0];\n  mshTmp[1] = (1 - localS) * msh1[1] + localS * msh2[1];\n  mshTmp[2] = (1 - localS) * msh1[2] + localS * msh2[2];\n\n  // Now convert back to RGB\n  const labTmp = [];\n  vtkColorTransferFunctionMshToLab(mshTmp, labTmp);\n  lab2rgb(labTmp, result);\n}\n\n// ----------------------------------------------------------------------------\n// vtkColorTransferFunction methods\n// ----------------------------------------------------------------------------\n\nfunction vtkColorTransferFunction(publicAPI, model) {\n  // Set our className\n  model.classHierarchy.push('vtkColorTransferFunction');\n\n  // Return the number of points which specify this function\n  publicAPI.getSize = () => model.nodes.length;\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in RGB\n  publicAPI.addRGBPoint = (x, r, g, b) => publicAPI.addRGBPointLong(x, r, g, b, 0.5, 0.0);\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in RGB\n  publicAPI.addRGBPointLong = function (x, r, g, b) {\n    let midpoint = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    let sharpness = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;\n    // Error check\n    if (midpoint < 0.0 || midpoint > 1.0) {\n      vtkErrorMacro('Midpoint outside range [0.0, 1.0]');\n      return -1;\n    }\n    if (sharpness < 0.0 || sharpness > 1.0) {\n      vtkErrorMacro('Sharpness outside range [0.0, 1.0]');\n      return -1;\n    }\n\n    // remove any node already at this X location\n    if (!model.allowDuplicateScalars) {\n      publicAPI.removePoint(x);\n    }\n\n    // Create the new node\n    const node = {\n      x,\n      r,\n      g,\n      b,\n      midpoint,\n      sharpness\n    };\n\n    // Add it, then sort to get everything in order\n    model.nodes.push(node);\n    publicAPI.sortAndUpdateRange();\n\n    // We need to find the index of the node we just added in order\n    // to return this value\n    let i = 0;\n    for (; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === x) {\n        break;\n      }\n    }\n\n    // If we didn't find it, something went horribly wrong so\n    // return -1\n    if (i < model.nodes.length) {\n      return i;\n    }\n    return -1;\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in HSV\n  publicAPI.addHSVPoint = (x, h, s, v) => publicAPI.addHSVPointLong(x, h, s, v, 0.5, 0.0);\n\n  //----------------------------------------------------------------------------\n  // Add a point defined in HSV\n  publicAPI.addHSVPointLong = function (x, h, s, v) {\n    let midpoint = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n    let sharpness = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;\n    const rgb = [];\n    const hsv = [h, s, v];\n    hsv2rgb(hsv, rgb);\n    return publicAPI.addRGBPoint(x, rgb[0], rgb[1], rgb[2], midpoint, sharpness);\n  };\n\n  //----------------------------------------------------------------------------\n  // Set nodes directly\n  publicAPI.setNodes = nodes => {\n    if (model.nodes !== nodes) {\n      const before = JSON.stringify(model.nodes);\n      model.nodes = nodes;\n      const after = JSON.stringify(model.nodes);\n      if (publicAPI.sortAndUpdateRange() || before !== after) {\n        publicAPI.modified();\n        return true;\n      }\n    }\n    return false;\n  };\n\n  //----------------------------------------------------------------------------\n  // Sort the vector in increasing order, then fill in\n  // the Range\n  publicAPI.sortAndUpdateRange = () => {\n    const before = JSON.stringify(model.nodes);\n    model.nodes.sort((a, b) => a.x - b.x);\n    const after = JSON.stringify(model.nodes);\n    const modifiedInvoked = publicAPI.updateRange();\n    // If range is updated, Modified() has been called, don't call it again.\n    if (!modifiedInvoked && before !== after) {\n      publicAPI.modified();\n      return true;\n    }\n    return modifiedInvoked;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.updateRange = () => {\n    const oldRange = [2];\n    oldRange[0] = model.mappingRange[0];\n    oldRange[1] = model.mappingRange[1];\n    const size = model.nodes.length;\n    if (size) {\n      model.mappingRange[0] = model.nodes[0].x;\n      model.mappingRange[1] = model.nodes[size - 1].x;\n    } else {\n      model.mappingRange[0] = 0;\n      model.mappingRange[1] = 0;\n    }\n\n    // If the range is the same, then no need to call Modified()\n    if (oldRange[0] === model.mappingRange[0] && oldRange[1] === model.mappingRange[1]) {\n      return false;\n    }\n    publicAPI.modified();\n    return true;\n  };\n\n  //----------------------------------------------------------------------------\n  // Remove a point\n  publicAPI.removePoint = x => {\n    // First find the node since we need to know its\n    // index as our return value\n    let i = 0;\n    for (; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === x) {\n        break;\n      }\n    }\n    const retVal = i;\n\n    // If the node doesn't exist, we return -1\n    if (i >= model.nodes.length) {\n      return -1;\n    }\n\n    // If the first or last point has been removed, then we update the range\n    // No need to sort here as the order of points hasn't changed.\n    let modifiedInvoked = false;\n    model.nodes.splice(i, 1);\n    if (i === 0 || i === model.nodes.length) {\n      modifiedInvoked = publicAPI.updateRange();\n    }\n    if (!modifiedInvoked) {\n      publicAPI.modified();\n    }\n    return retVal;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.movePoint = (oldX, newX) => {\n    if (oldX === newX) {\n      // Nothing to do.\n      return;\n    }\n    publicAPI.removePoint(newX);\n    for (let i = 0; i < model.nodes.length; i++) {\n      if (model.nodes[i].x === oldX) {\n        model.nodes[i].x = newX;\n        publicAPI.sortAndUpdateRange();\n        break;\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  // Remove all points\n  publicAPI.removeAllPoints = () => {\n    model.nodes = [];\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a line defined in RGB\n  publicAPI.addRGBSegment = (x1, r1, g1, b1, x2, r2, g2, b2) => {\n    // First, find all points in this range and remove them\n    publicAPI.sortAndUpdateRange();\n    for (let i = 0; i < model.nodes.length;) {\n      if (model.nodes[i].x >= x1 && model.nodes[i].x <= x2) {\n        model.nodes.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n\n    // Now add the points\n    publicAPI.addRGBPointLong(x1, r1, g1, b1, 0.5, 0.0);\n    publicAPI.addRGBPointLong(x2, r2, g2, b2, 0.5, 0.0);\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  // Add a line defined in HSV\n  publicAPI.addHSVSegment = (x1, h1, s1, v1, x2, h2, s2, v2) => {\n    const hsv1 = [h1, s1, v1];\n    const hsv2 = [h2, s2, v2];\n    const rgb1 = [];\n    const rgb2 = [];\n    hsv2rgb(hsv1, rgb1);\n    hsv2rgb(hsv2, rgb2);\n    publicAPI.addRGBSegment(x1, rgb1[0], rgb1[1], rgb1[2], x2, rgb2[0], rgb2[1], rgb2[2]);\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the RGBA color evaluated at the specified location\n  publicAPI.mapValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return [Math.floor(255.0 * rgb[0] + 0.5), Math.floor(255.0 * rgb[1] + 0.5), Math.floor(255.0 * rgb[2] + 0.5), 255];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the RGB color evaluated at the specified location\n  publicAPI.getColor = (x, rgb) => {\n    if (model.indexedLookup) {\n      const numNodes = publicAPI.getSize();\n      // todo\n      const idx = publicAPI.getAnnotatedValueIndexInternal(x);\n      if (idx < 0 || numNodes === 0) {\n        const nanColor = publicAPI.getNanColorByReference();\n        rgb[0] = nanColor[0];\n        rgb[1] = nanColor[1];\n        rgb[2] = nanColor[2];\n      } else {\n        const nodeVal = [];\n        publicAPI.getNodeValue(idx % numNodes, nodeVal);\n        // nodeVal[0] is the x value. nodeVal[1...3] is rgb.\n        rgb[0] = nodeVal[1];\n        rgb[1] = nodeVal[2];\n        rgb[2] = nodeVal[3];\n      }\n      return;\n    }\n    publicAPI.getTable(x, x, 1, rgb);\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the red color evaluated at the specified location\n  publicAPI.getRedValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[0];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the green color evaluated at the specified location\n  publicAPI.getGreenValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[1];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns the blue color evaluated at the specified location\n  publicAPI.getBlueValue = x => {\n    const rgb = [];\n    publicAPI.getColor(x, rgb);\n    return rgb[2];\n  };\n\n  //----------------------------------------------------------------------------\n  // Returns a table of RGB colors at regular intervals along the function\n  publicAPI.getTable = (xStart_, xEnd_, size, table) => {\n    // To handle BigInt limitation\n    const xStart = Number(xStart_);\n    const xEnd = Number(xEnd_);\n\n    // Special case: If either the start or end is a NaN, then all any\n    // interpolation done on them is also a NaN.  Therefore, fill the table with\n    // the NaN color.\n    if (isNan(xStart) || isNan(xEnd)) {\n      for (let i = 0; i < size; i++) {\n        table[i * 3 + 0] = model.nanColor[0];\n        table[i * 3 + 1] = model.nanColor[1];\n        table[i * 3 + 2] = model.nanColor[2];\n      }\n      return;\n    }\n    let idx = 0;\n    const numNodes = model.nodes.length;\n\n    // Need to keep track of the last value so that\n    // we can fill in table locations past this with\n    // this value if Clamping is On.\n    let lastR = 0.0;\n    let lastG = 0.0;\n    let lastB = 0.0;\n    if (numNodes !== 0) {\n      lastR = model.nodes[numNodes - 1].r;\n      lastG = model.nodes[numNodes - 1].g;\n      lastB = model.nodes[numNodes - 1].b;\n    }\n    let x = 0.0;\n    let x1 = 0.0;\n    let x2 = 0.0;\n    const rgb1 = [0.0, 0.0, 0.0];\n    const rgb2 = [0.0, 0.0, 0.0];\n    let midpoint = 0.0;\n    let sharpness = 0.0;\n    const tmpVec = [];\n\n    // If the scale is logarithmic, make sure the range is valid.\n    let usingLogScale = model.scale === Scale.LOG10;\n    if (usingLogScale) {\n      // Note: This requires range[0] <= range[1].\n      usingLogScale = model.mappingRange[0] > 0.0;\n    }\n    let logStart = 0.0;\n    let logEnd = 0.0;\n    let logX = 0.0;\n    if (usingLogScale) {\n      logStart = Math.log10(xStart);\n      logEnd = Math.log10(xEnd);\n    }\n\n    // For each table entry\n    for (let i = 0; i < size; i++) {\n      // Find our location in the table\n      const tidx = 3 * i;\n\n      // Find our X location. If we are taking only 1 sample, make\n      // it halfway between start and end (usually start and end will\n      // be the same in this case)\n      if (size > 1) {\n        if (usingLogScale) {\n          logX = logStart + i / (size - 1.0) * (logEnd - logStart);\n          x = 10.0 ** logX;\n        } else {\n          x = xStart + i / (size - 1.0) * (xEnd - xStart);\n        }\n      } else if (usingLogScale) {\n        logX = 0.5 * (logStart + logEnd);\n        x = 10.0 ** logX;\n      } else {\n        x = 0.5 * (xStart + xEnd);\n      }\n\n      // Linearly map x from mappingRange to [0, numberOfValues-1],\n      // discretize (round down to the closest integer),\n      // then map back to mappingRange\n      if (model.discretize) {\n        const range = model.mappingRange;\n        if (x >= range[0] && x <= range[1]) {\n          const numberOfValues = model.numberOfValues;\n          const deltaRange = range[1] - range[0];\n          if (numberOfValues <= 1) {\n            x = range[0] + deltaRange / 2.0;\n          } else {\n            // normalize x\n            const xn = (x - range[0]) / deltaRange;\n            // discretize\n            const discretizeIndex = floor(numberOfValues * xn);\n            // get discretized x\n            x = range[0] + discretizeIndex / (numberOfValues - 1) * deltaRange;\n          }\n        }\n      }\n\n      // Do we need to move to the next node?\n      while (idx < numNodes && x > model.nodes[idx].x) {\n        idx++;\n        // If we are at a valid point index, fill in\n        // the value at this node, and the one before (the\n        // two that surround our current sample location)\n        // idx cannot be 0 since we just incremented it.\n        if (idx < numNodes) {\n          x1 = model.nodes[idx - 1].x;\n          x2 = model.nodes[idx].x;\n          if (usingLogScale) {\n            x1 = Math.log10(x1);\n            x2 = Math.log10(x2);\n          }\n          rgb1[0] = model.nodes[idx - 1].r;\n          rgb2[0] = model.nodes[idx].r;\n          rgb1[1] = model.nodes[idx - 1].g;\n          rgb2[1] = model.nodes[idx].g;\n          rgb1[2] = model.nodes[idx - 1].b;\n          rgb2[2] = model.nodes[idx].b;\n\n          // We only need the previous midpoint and sharpness\n          // since these control this region\n          midpoint = model.nodes[idx - 1].midpoint;\n          sharpness = model.nodes[idx - 1].sharpness;\n\n          // Move midpoint away from extreme ends of range to avoid\n          // degenerate math\n          if (midpoint < 0.00001) {\n            midpoint = 0.00001;\n          }\n          if (midpoint > 0.99999) {\n            midpoint = 0.99999;\n          }\n        }\n      }\n\n      // Are we at or past the end? If so, just use the last value\n      if (x > model.mappingRange[1]) {\n        table[tidx] = 0.0;\n        table[tidx + 1] = 0.0;\n        table[tidx + 2] = 0.0;\n        if (model.clamping) {\n          if (publicAPI.getUseAboveRangeColor()) {\n            table[tidx] = model.aboveRangeColor[0];\n            table[tidx + 1] = model.aboveRangeColor[1];\n            table[tidx + 2] = model.aboveRangeColor[2];\n          } else {\n            table[tidx] = lastR;\n            table[tidx + 1] = lastG;\n            table[tidx + 2] = lastB;\n          }\n        }\n      } else if (x < model.mappingRange[0] || isInf(x) && x < 0) {\n        // we are before the first node? If so, duplicate this node's values.\n        // We have to deal with -inf here\n        table[tidx] = 0.0;\n        table[tidx + 1] = 0.0;\n        table[tidx + 2] = 0.0;\n        if (model.clamping) {\n          if (publicAPI.getUseBelowRangeColor()) {\n            table[tidx] = model.belowRangeColor[0];\n            table[tidx + 1] = model.belowRangeColor[1];\n            table[tidx + 2] = model.belowRangeColor[2];\n          } else if (numNodes > 0) {\n            table[tidx] = model.nodes[0].r;\n            table[tidx + 1] = model.nodes[0].g;\n            table[tidx + 2] = model.nodes[0].b;\n          }\n        }\n      } else if (idx === 0 && (Math.abs(x - xStart) < 1e-6 || model.discretize)) {\n        if (numNodes > 0) {\n          table[tidx] = model.nodes[0].r;\n          table[tidx + 1] = model.nodes[0].g;\n          table[tidx + 2] = model.nodes[0].b;\n        } else {\n          table[tidx] = 0.0;\n          table[tidx + 1] = 0.0;\n          table[tidx + 2] = 0.0;\n        }\n      } else {\n        // OK, we are between two nodes - interpolate\n        // Our first attempt at a normalized location [0,1] -\n        // we will be modifying this based on midpoint and\n        // sharpness to get the curve shape we want and to have\n        // it pass through (y1+y2)/2 at the midpoint.\n        let s = 0.0;\n        if (usingLogScale) {\n          s = (logX - x1) / (x2 - x1);\n        } else {\n          s = (x - x1) / (x2 - x1);\n        }\n\n        // Readjust based on the midpoint - linear adjustment\n        if (s < midpoint) {\n          s = 0.5 * s / midpoint;\n        } else {\n          s = 0.5 + 0.5 * (s - midpoint) / (1.0 - midpoint);\n        }\n\n        // override for sharpness > 0.99\n        // In this case we just want piecewise constant\n        if (sharpness > 0.99) {\n          // Use the first value since we are below the midpoint\n          if (s < 0.5) {\n            table[tidx] = rgb1[0];\n            table[tidx + 1] = rgb1[1];\n            table[tidx + 2] = rgb1[2];\n            continue;\n          } else {\n            // Use the second value at or above the midpoint\n            table[tidx] = rgb2[0];\n            table[tidx + 1] = rgb2[1];\n            table[tidx + 2] = rgb2[2];\n            continue;\n          }\n        }\n\n        // Override for sharpness < 0.01\n        // In this case we want piecewise linear\n        if (sharpness < 0.01) {\n          // Simple linear interpolation\n          if (model.colorSpace === ColorSpace.RGB) {\n            table[tidx] = (1 - s) * rgb1[0] + s * rgb2[0];\n            table[tidx + 1] = (1 - s) * rgb1[1] + s * rgb2[1];\n            table[tidx + 2] = (1 - s) * rgb1[2] + s * rgb2[2];\n          } else if (model.colorSpace === ColorSpace.HSV) {\n            const hsv1 = [];\n            const hsv2 = [];\n            rgb2hsv(rgb1, hsv1);\n            rgb2hsv(rgb2, hsv2);\n            if (model.hSVWrap && (hsv1[0] - hsv2[0] > 0.5 || hsv2[0] - hsv1[0] > 0.5)) {\n              if (hsv1[0] > hsv2[0]) {\n                hsv1[0] -= 1.0;\n              } else {\n                hsv2[0] -= 1.0;\n              }\n            }\n            const hsvTmp = [];\n            hsvTmp[0] = (1.0 - s) * hsv1[0] + s * hsv2[0];\n            if (hsvTmp[0] < 0.0) {\n              hsvTmp[0] += 1.0;\n            }\n            hsvTmp[1] = (1.0 - s) * hsv1[1] + s * hsv2[1];\n            hsvTmp[2] = (1.0 - s) * hsv1[2] + s * hsv2[2];\n\n            // Now convert this back to RGB\n            hsv2rgb(hsvTmp, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else if (model.colorSpace === ColorSpace.LAB) {\n            const lab1 = [];\n            const lab2 = [];\n            rgb2lab(rgb1, lab1);\n            rgb2lab(rgb2, lab2);\n            const labTmp = [];\n            labTmp[0] = (1 - s) * lab1[0] + s * lab2[0];\n            labTmp[1] = (1 - s) * lab1[1] + s * lab2[1];\n            labTmp[2] = (1 - s) * lab1[2] + s * lab2[2];\n\n            // Now convert back to RGB\n            lab2rgb(labTmp, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else if (model.colorSpace === ColorSpace.DIVERGING) {\n            vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, tmpVec);\n            table[tidx] = tmpVec[0];\n            table[tidx + 1] = tmpVec[1];\n            table[tidx + 2] = tmpVec[2];\n          } else {\n            vtkErrorMacro('ColorSpace set to invalid value.', model.colorSpace);\n          }\n          continue;\n        }\n\n        // We have a sharpness between [0.01, 0.99] - we will\n        // used a modified hermite curve interpolation where we\n        // derive the slope based on the sharpness, and we compress\n        // the curve non-linearly based on the sharpness\n\n        // First, we will adjust our position based on sharpness in\n        // order to make the curve sharper (closer to piecewise constant)\n        if (s < 0.5) {\n          s = 0.5 * (s * 2.0) ** (1.0 + 10.0 * sharpness);\n        } else if (s > 0.5) {\n          s = 1.0 - 0.5 * ((1.0 - s) * 2) ** (1 + 10.0 * sharpness);\n        }\n\n        // Compute some coefficients we will need for the hermite curve\n        const ss = s * s;\n        const sss = ss * s;\n        const h1 = 2.0 * sss - 3 * ss + 1;\n        const h2 = -2 * sss + 3 * ss;\n        const h3 = sss - 2 * ss + s;\n        const h4 = sss - ss;\n        let slope;\n        let t;\n        if (model.colorSpace === ColorSpace.RGB) {\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = rgb2[j] - rgb1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            table[tidx + j] = h1 * rgb1[j] + h2 * rgb2[j] + h3 * t + h4 * t;\n          }\n        } else if (model.colorSpace === ColorSpace.HSV) {\n          const hsv1 = [];\n          const hsv2 = [];\n          rgb2hsv(rgb1, hsv1);\n          rgb2hsv(rgb2, hsv2);\n          if (model.hSVWrap && (hsv1[0] - hsv2[0] > 0.5 || hsv2[0] - hsv1[0] > 0.5)) {\n            if (hsv1[0] > hsv2[0]) {\n              hsv1[0] -= 1.0;\n            } else {\n              hsv2[0] -= 1.0;\n            }\n          }\n          const hsvTmp = [];\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = hsv2[j] - hsv1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            hsvTmp[j] = h1 * hsv1[j] + h2 * hsv2[j] + h3 * t + h4 * t;\n            if (j === 0 && hsvTmp[j] < 0.0) {\n              hsvTmp[j] += 1.0;\n            }\n          }\n          // Now convert this back to RGB\n          hsv2rgb(hsvTmp, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else if (model.colorSpace === ColorSpace.LAB) {\n          const lab1 = [];\n          const lab2 = [];\n          rgb2lab(rgb1, lab1);\n          rgb2lab(rgb2, lab2);\n          const labTmp = [];\n          for (let j = 0; j < 3; j++) {\n            // Use one slope for both end points\n            slope = lab2[j] - lab1[j];\n            t = (1.0 - sharpness) * slope;\n\n            // Compute the value\n            labTmp[j] = h1 * lab1[j] + h2 * lab2[j] + h3 * t + h4 * t;\n          }\n          // Now convert this back to RGB\n          lab2rgb(labTmp, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else if (model.colorSpace === ColorSpace.DIVERGING) {\n          // I have not implemented proper interpolation by a hermite curve for\n          // the diverging color map, but I cannot think of a good use case for\n          // that anyway.\n          vtkColorTransferFunctionInterpolateDiverging(s, rgb1, rgb2, tmpVec);\n          table[tidx] = tmpVec[0];\n          table[tidx + 1] = tmpVec[1];\n          table[tidx + 2] = tmpVec[2];\n        } else {\n          vtkErrorMacro('ColorSpace set to invalid value.');\n        }\n\n        // Final error check to make sure we don't go outside [0,1]\n        for (let j = 0; j < 3; j++) {\n          table[tidx + j] = table[tidx + j] < 0.0 ? 0.0 : table[tidx + j];\n          table[tidx + j] = table[tidx + j] > 1.0 ? 1.0 : table[tidx + j];\n        }\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getUint8Table = function (xStart, xEnd, size) {\n    let withAlpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (publicAPI.getMTime() <= model.buildTime && model.tableSize === size && model.tableWithAlpha !== withAlpha) {\n      return model.table;\n    }\n    if (model.nodes.length === 0) {\n      vtkErrorMacro('Attempting to lookup a value with no points in the function');\n      return model.table;\n    }\n    const nbChannels = withAlpha ? 4 : 3;\n    if (model.tableSize !== size || model.tableWithAlpha !== withAlpha) {\n      model.table = new Uint8Array(size * nbChannels);\n      model.tableSize = size;\n      model.tableWithAlpha = withAlpha;\n    }\n    const tmpTable = [];\n    publicAPI.getTable(xStart, xEnd, size, tmpTable);\n    for (let i = 0; i < size; i++) {\n      model.table[i * nbChannels + 0] = Math.floor(tmpTable[i * 3 + 0] * 255.0 + 0.5);\n      model.table[i * nbChannels + 1] = Math.floor(tmpTable[i * 3 + 1] * 255.0 + 0.5);\n      model.table[i * nbChannels + 2] = Math.floor(tmpTable[i * 3 + 2] * 255.0 + 0.5);\n      if (withAlpha) {\n        model.table[i * nbChannels + 3] = 255;\n      }\n    }\n    model.buildTime.modified();\n    return model.table;\n  };\n  publicAPI.buildFunctionFromArray = array => {\n    publicAPI.removeAllPoints();\n    const numComponents = array.getNumberOfComponents();\n    for (let i = 0; i < array.getNumberOfTuples(); i++) {\n      switch (numComponents) {\n        case 3:\n          {\n            model.nodes.push({\n              x: i,\n              r: array.getComponent(i, 0),\n              g: array.getComponent(i, 1),\n              b: array.getComponent(i, 2),\n              midpoint: 0.5,\n              sharpness: 0.0\n            });\n            break;\n          }\n        case 4:\n          {\n            model.nodes.push({\n              x: array.getComponent(i, 0),\n              r: array.getComponent(i, 1),\n              g: array.getComponent(i, 2),\n              b: array.getComponent(i, 3),\n              midpoint: 0.5,\n              sharpness: 0.0\n            });\n            break;\n          }\n        case 5:\n          {\n            model.nodes.push({\n              x: i,\n              r: array.getComponent(i, 0),\n              g: array.getComponent(i, 1),\n              b: array.getComponent(i, 2),\n              midpoint: array.getComponent(i, 4),\n              sharpness: array.getComponent(i, 5)\n            });\n            break;\n          }\n        case 6:\n          {\n            model.nodes.push({\n              x: array.getComponent(i, 0),\n              r: array.getComponent(i, 1),\n              g: array.getComponent(i, 2),\n              b: array.getComponent(i, 3),\n              midpoint: array.getComponent(i, 4),\n              sharpness: array.getComponent(i, 5)\n            });\n            break;\n          }\n      }\n    }\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.buildFunctionFromTable = (xStart, xEnd, size, table) => {\n    let inc = 0.0;\n    publicAPI.removeAllPoints();\n    if (size > 1) {\n      inc = (xEnd - xStart) / (size - 1.0);\n    }\n    for (let i = 0; i < size; i++) {\n      const node = {\n        x: xStart + inc * i,\n        r: table[i * 3],\n        g: table[i * 3 + 1],\n        b: table[i * 3 + 2],\n        sharpness: 0.0,\n        midpoint: 0.5\n      };\n      model.nodes.push(node);\n    }\n    publicAPI.sortAndUpdateRange();\n  };\n\n  //----------------------------------------------------------------------------\n  // For a specified index value, get the node parameters\n  publicAPI.getNodeValue = (index, val) => {\n    if (index < 0 || index >= model.nodes.length) {\n      vtkErrorMacro('Index out of range!');\n      return -1;\n    }\n    val[0] = model.nodes[index].x;\n    val[1] = model.nodes[index].r;\n    val[2] = model.nodes[index].g;\n    val[3] = model.nodes[index].b;\n    val[4] = model.nodes[index].midpoint;\n    val[5] = model.nodes[index].sharpness;\n    return 1;\n  };\n\n  //----------------------------------------------------------------------------\n  // For a specified index value, get the node parameters\n  publicAPI.setNodeValue = (index, val) => {\n    if (index < 0 || index >= model.nodes.length) {\n      vtkErrorMacro('Index out of range!');\n      return -1;\n    }\n    const oldX = model.nodes[index].x;\n    model.nodes[index].x = val[0];\n    model.nodes[index].r = val[1];\n    model.nodes[index].g = val[2];\n    model.nodes[index].b = val[3];\n    model.nodes[index].midpoint = val[4];\n    model.nodes[index].sharpness = val[5];\n    if (oldX !== val[0]) {\n      // The point has been moved, the order of points or the range might have\n      // been modified.\n      publicAPI.sortAndUpdateRange();\n      // No need to call Modified() here because SortAndUpdateRange() has done it\n      // already.\n    } else {\n      publicAPI.modified();\n    }\n    return 1;\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getNumberOfAvailableColors = () => {\n    if (model.indexedLookup && publicAPI.getSize()) {\n      return publicAPI.getSize();\n    }\n    if (model.tableSize) {\n      // Not sure if this is correct since it is only set if\n      // \"const unsigned char *::GetTable(double xStart, double xEnd,int size)\"\n      // has been called.\n      return model.tableSize;\n    }\n    const nNodes = model.nodes?.length ?? 0;\n    // The minimum is 4094 colors so that it fills in the 4096 texels texture in `mapScalarsToTexture`\n    return Math.max(4094, nNodes);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.getIndexedColor = (idx, rgba) => {\n    const n = publicAPI.getSize();\n    if (n > 0 && idx >= 0) {\n      const nodeValue = [];\n      publicAPI.getNodeValue(idx % n, nodeValue);\n      for (let j = 0; j < 3; ++j) {\n        rgba[j] = nodeValue[j + 1];\n      }\n      rgba[3] = 1.0; // NodeColor is RGB-only.\n      return;\n    }\n    const nanColor = publicAPI.getNanColorByReference();\n    rgba[0] = nanColor[0];\n    rgba[1] = nanColor[1];\n    rgba[2] = nanColor[2];\n    rgba[3] = 1.0; // NanColor is RGB-only.\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.fillFromDataPointer = (nb, ptr) => {\n    if (nb <= 0 || !ptr) {\n      return;\n    }\n    publicAPI.removeAllPoints();\n    for (let i = 0; i < nb; i++) {\n      publicAPI.addRGBPoint(ptr[i * 4], ptr[i * 4 + 1], ptr[i * 4 + 2], ptr[i * 4 + 3]);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.setMappingRange = (min, max) => {\n    const range = [min, max];\n    const originalRange = publicAPI.getRange();\n    if (originalRange[1] === range[1] && originalRange[0] === range[0]) {\n      return;\n    }\n    if (range[1] === range[0]) {\n      vtkErrorMacro('attempt to set zero width color range');\n      return;\n    }\n    const scale = (range[1] - range[0]) / (originalRange[1] - originalRange[0]);\n    const shift = range[0] - originalRange[0] * scale;\n    for (let i = 0; i < model.nodes.length; ++i) {\n      model.nodes[i].x = model.nodes[i].x * scale + shift;\n    }\n    model.mappingRange[0] = range[0];\n    model.mappingRange[1] = range[1];\n    publicAPI.modified();\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.adjustRange = range => {\n    const functionRange = publicAPI.getRange();\n\n    // Make sure we have points at each end of the range\n    const rgb = [];\n    if (functionRange[0] < range[0]) {\n      publicAPI.getColor(range[0], rgb);\n      publicAPI.addRGBPoint(range[0], rgb[0], rgb[1], rgb[2]);\n    } else {\n      publicAPI.getColor(functionRange[0], rgb);\n      publicAPI.addRGBPoint(range[0], rgb[0], rgb[1], rgb[2]);\n    }\n    if (functionRange[1] > range[1]) {\n      publicAPI.getColor(range[1], rgb);\n      publicAPI.addRGBPoint(range[1], rgb[0], rgb[1], rgb[2]);\n    } else {\n      publicAPI.getColor(functionRange[1], rgb);\n      publicAPI.addRGBPoint(range[1], rgb[0], rgb[1], rgb[2]);\n    }\n\n    // Remove all points out-of-range\n    publicAPI.sortAndUpdateRange();\n    for (let i = 0; i < model.nodes.length;) {\n      if (model.nodes[i].x >= range[0] && model.nodes[i].x <= range[1]) {\n        model.nodes.splice(i, 1);\n      } else {\n        ++i;\n      }\n    }\n    return 1;\n  };\n\n  //--------------------------------------------------------------------------\n  publicAPI.estimateMinNumberOfSamples = (x1, x2) => {\n    const d = publicAPI.findMinimumXDistance();\n    return Math.ceil((x2 - x1) / d);\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.findMinimumXDistance = () => {\n    if (model.nodes.length < 2) {\n      return -1.0;\n    }\n    let distance = Number.MAX_VALUE;\n    for (let i = 0; i < model.nodes.length - 1; i++) {\n      const currentDist = model.nodes[i + 1].x - model.nodes[i].x;\n      if (currentDist < distance) {\n        distance = currentDist;\n      }\n    }\n    return distance;\n  };\n  publicAPI.mapScalarsThroughTable = (input, output, outFormat, inputOffset) => {\n    if (publicAPI.getSize() === 0) {\n      vtkDebugMacro('Transfer Function Has No Points!');\n      return;\n    }\n    if (model.indexedLookup) {\n      publicAPI.mapDataIndexed(input, output, outFormat, inputOffset);\n    } else {\n      publicAPI.mapData(input, output, outFormat, inputOffset);\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.mapData = (input, output, outFormat, inputOffset) => {\n    if (publicAPI.getSize() === 0) {\n      vtkWarningMacro('Transfer Function Has No Points!');\n      return;\n    }\n    const alpha = Math.floor(publicAPI.getAlpha() * 255.0 + 0.5);\n    const length = input.getNumberOfTuples();\n    const inIncr = input.getNumberOfComponents();\n    const outputV = output.getData();\n    const inputV = input.getData();\n    const rgb = [];\n    if (outFormat === ScalarMappingTarget.RGBA) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 4] = Math.floor(rgb[0] * 255.0 + 0.5);\n        outputV[i * 4 + 1] = Math.floor(rgb[1] * 255.0 + 0.5);\n        outputV[i * 4 + 2] = Math.floor(rgb[2] * 255.0 + 0.5);\n        outputV[i * 4 + 3] = alpha;\n      }\n    }\n    if (outFormat === ScalarMappingTarget.RGB) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 3] = Math.floor(rgb[0] * 255.0 + 0.5);\n        outputV[i * 3 + 1] = Math.floor(rgb[1] * 255.0 + 0.5);\n        outputV[i * 3 + 2] = Math.floor(rgb[2] * 255.0 + 0.5);\n      }\n    }\n    if (outFormat === ScalarMappingTarget.LUMINANCE) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i] = Math.floor(rgb[0] * 76.5 + rgb[1] * 150.45 + rgb[2] * 28.05 + 0.5);\n      }\n    }\n    if (outFormat === ScalarMappingTarget.LUMINANCE_ALPHA) {\n      for (let i = 0; i < length; i++) {\n        const x = inputV[i * inIncr + inputOffset];\n        publicAPI.getColor(x, rgb);\n        outputV[i * 2] = Math.floor(rgb[0] * 76.5 + rgb[1] * 150.45 + rgb[2] * 28.05 + 0.5);\n        outputV[i * 2 + 1] = alpha;\n      }\n    }\n  };\n\n  //----------------------------------------------------------------------------\n  publicAPI.applyColorMap = colorMap => {\n    const oldColorSpace = JSON.stringify(model.colorSpace);\n    if (colorMap.ColorSpace) {\n      model.colorSpace = ColorSpace[colorMap.ColorSpace.toUpperCase()];\n      if (model.colorSpace === undefined) {\n        vtkErrorMacro(`ColorSpace ${colorMap.ColorSpace} not supported, using RGB instead`);\n        model.colorSpace = ColorSpace.RGB;\n      }\n    }\n    let isModified = oldColorSpace !== JSON.stringify(model.colorSpace);\n    const oldNanColor = isModified || JSON.stringify(model.nanColor);\n    if (colorMap.NanColor) {\n      model.nanColor = [].concat(colorMap.NanColor);\n      while (model.nanColor.length < 4) {\n        model.nanColor.push(1.0);\n      }\n    }\n    isModified = isModified || oldNanColor !== JSON.stringify(model.nanColor);\n    const oldNodes = isModified || JSON.stringify(model.nodes);\n    if (colorMap.RGBPoints) {\n      const size = colorMap.RGBPoints.length;\n      model.nodes = [];\n      const midpoint = 0.5;\n      const sharpness = 0.0;\n      for (let i = 0; i < size; i += 4) {\n        model.nodes.push({\n          x: colorMap.RGBPoints[i],\n          r: colorMap.RGBPoints[i + 1],\n          g: colorMap.RGBPoints[i + 2],\n          b: colorMap.RGBPoints[i + 3],\n          midpoint,\n          sharpness\n        });\n      }\n    }\n    const modifiedInvoked = publicAPI.sortAndUpdateRange();\n    const callModified = !modifiedInvoked && (isModified || oldNodes !== JSON.stringify(model.nodes));\n    if (callModified) publicAPI.modified();\n    return modifiedInvoked || callModified;\n  };\n}\n\n// ----------------------------------------------------------------------------\n// Object factory\n// ----------------------------------------------------------------------------\n\nconst DEFAULT_VALUES = {\n  clamping: true,\n  colorSpace: ColorSpace.RGB,\n  hSVWrap: true,\n  scale: Scale.LINEAR,\n  nanColor: null,\n  belowRangeColor: null,\n  aboveRangeColor: null,\n  useAboveRangeColor: false,\n  useBelowRangeColor: false,\n  allowDuplicateScalars: false,\n  table: null,\n  tableSize: 0,\n  buildTime: null,\n  nodes: null,\n  discretize: false,\n  numberOfValues: 256\n};\n\n// ----------------------------------------------------------------------------\n\nfunction extend(publicAPI, model) {\n  let initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  Object.assign(model, DEFAULT_VALUES, initialValues);\n\n  // Inheritance\n  vtkScalarsToColors.extend(publicAPI, model, initialValues);\n\n  // Internal objects initialization\n  model.table = [];\n  model.nodes = [];\n  model.nanColor = [0.5, 0.0, 0.0, 1.0];\n  model.belowRangeColor = [0.0, 0.0, 0.0, 1.0];\n  model.aboveRangeColor = [1.0, 1.0, 1.0, 1.0];\n  model.buildTime = {};\n  macro.obj(model.buildTime);\n\n  // Create get-only macros\n  macro.get(publicAPI, model, ['buildTime', 'mappingRange']);\n\n  // Create get-set macros\n  macro.setGet(publicAPI, model, ['useAboveRangeColor', 'useBelowRangeColor', 'discretize', 'numberOfValues', {\n    type: 'enum',\n    name: 'colorSpace',\n    enum: ColorSpace\n  }, {\n    type: 'enum',\n    name: 'scale',\n    enum: Scale\n  }]);\n  macro.setArray(publicAPI, model, ['nanColor', 'belowRangeColor', 'aboveRangeColor'], 4);\n\n  // Create get macros for array\n  macro.getArray(publicAPI, model, ['nanColor', 'belowRangeColor', 'aboveRangeColor']);\n\n  // For more macro methods, see \"Sources/macros.js\"\n\n  // Object specific methods\n  vtkColorTransferFunction(publicAPI, model);\n}\n\n// ----------------------------------------------------------------------------\n\nconst newInstance = macro.newInstance(extend, 'vtkColorTransferFunction');\n\n// ----------------------------------------------------------------------------\n\nvar vtkColorTransferFunction$1 = {\n  newInstance,\n  extend,\n  ...Constants\n};\n\nexport { vtkColorTransferFunction$1 as default, extend, newInstance };\n","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import transpose from \"./transpose.js\";\n\nexport default function zip() {\n  return transpose(arguments);\n}\n","export default function(interpolator, n) {\n  var samples = new Array(n);\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n  return samples;\n}\n"],"names":["enabledElement","invalidated","image","canvas","start","stats","lastGetPixelDataTime","lastStoredPixelDataToCanvasImageDataTime","lastPutImageDataTime","lastRenderTime","lastLutGenerateTime","render","viewport","colormap","color","renderTimeInMs","invalid","needsRedraw","scale","transform","displayedArea","translate","width","height","angle","rotation","rotate","Math","PI","widthScale","heightScale","brhc","x","tlhc","y","presentationSizeMode","rowPixelSpacing","columnPixelSpacing","verticalScale","horizontalScale","min","translation","undefined","hflip","vflip","modality","Error","scaleFactor","voi","isPreScaled","windowWidth","windowCenter","Array","isArray","invert","pixelReplication","modalityLUT","voiLUT","columns","rows","GenerateImageType","DEFAULT_SETTINGS","Symbol","RUNTIME_SETTINGS","OBJECT_SETTINGS_MAP","DICTIONARY","Settings","constructor","base","dictionary","Object","create","seal","defineProperty","this","value","set","key","get","unset","name","endsWith","deleteCount","namespace","slice","deleteAll","length","prototype","hasOwnProperty","call","startsWith","forEach","callback","iterate","extend","import","root","isPlainObject","keys","dump","context","deepSet","assert","subject","getRuntimeSettings","getDefaultSettings","subfield","defaultSettings","settingObj","setting","split","runtimeSettings","getObjectSettings","from","settings","objectSettingsMap","WeakMap","extendRuntimeSettings","references","last","current","previous","indexOf","isValidKey","prefix","record","failCount","has","add","field","delete","setAll","WeakSet","getPrototypeOf","separator","subKey","subContext","subContextValue","imageLoaders","unknownImageLoader","loadImageFromImageLoader","imageId","options","cachedImageLoadObject","getImageLoadObject","handleImageLoadPromise","promise","scheme","loader","imageLoadObject","imagePromise","Promise","resolve","then","voxelManager","numberOfComponents","createImageVoxelManager","scalarData","getPixelData","getScalarData","imageFrame","pixelData","ensureVoxelManager","IMAGE_LOADED","catch","error","errorDetails","IMAGE_LOAD_FAILED","loadImage","priority","requestType","loadAndCacheImage","putImageLoadObject","loadAndCacheImages","imageIds","map","createAndCacheDerivedImage","referencedImageId","skipCreateBuffer","onCacheAdd","voxelRepresentation","imagePlaneModule","TypedArrayConstructor","targetBuffer","type","imageScalarData","derivedImageId","referencedImagePlaneMetadata","metadata","referencedImageGeneralSeriesMetadata","instanceNumber","imagePixelModule","bitsAllocated","bitsStored","highBit","samplesPerPixel","pixelRepresentation","localImage","createAndCacheLocalImage","dimensions","spacing","origin","imagePositionPatient","direction","imageOrientationPatient","frameOfReferenceUID","putImageSync","createAndCacheDerivedImages","referencedImageIds","derivedImageIds","index","newOptions","getDerivedImageId","push","rowCosines","columnCosines","pixelSpacing","scalarDataToUse","Uint8Array","Float32Array","Uint16Array","Int16Array","photometricInterpretation","id","RLE","createRLEImageVoxelManager","minPixelValue","maxPixelValue","i","intercept","dataType","slope","getCanvas","rgba","FrameOfReferenceUID","sizeInBytes","byteLength","cancelLoadImage","filterRequests","additionalDetails","cancelFn","cancelLoadImages","cancelLoadAll","requestPool","getRequestPool","requests","requestDetails","pop","volumeId","loadObject","getVolumeLoadObject","cancel","clearRequestStack","registerImageLoader","imageLoader","registerUnknownImageLoader","oldImageLoader","unregisterAllImageLoaders","createAndCacheDerivedLabelmapImages","createAndCacheDerivedLabelmapImage","FrameRange","frameRangeExtractor","imageIdToFrames","match","range","it","Number","imageIdToFrameEnd","imageIdToFrameStart","framesToString","String","framesToImageId","newRangeString","replace","PointsManager","configuration","_dimensions","_length","_byteSize","growSize","initialSize","itemLength","array","ArrayBuffer","data","func","getPoint","dimensionLength","offset","subarray","getPointArray","grow","additionalSize","newSize","newArray","newData","reverse","midLength","floor","indexStart","indexEnd","dimension","valueStart","getTypedArray","point","f","mapData","points","p","toXYZ","xyz","z","fromXYZ","create3","subselect","count","selected","max","newPoints","create2","ProgressiveIterator","as","iterator","v","e","reject","reason","done","nextValue","waiting","rejectReason","getRecent","asyncIterator","errorCallback","console","warn","generate","processFunction","bind","nextPromise","donePromise","getNextPromise","getDonePromise","ADJACENT_ALL","ADJACENT_SINGLE_PLANE","ADJACENT_IN","ADJACENT_OUT","RLEVoxelMap","copyMap","destination","source","row","structuredClone","depth","Map","jMultiple","kMultiple","numComps","pixelDataConstructor","updateScalarData","fill","rle","end","j","getRLE","defaultValue","getRun","k","runIndex","rleIndex","findIndex","rle1","rle0","oldValue","rleInsert","isAfter","insertIndex","rlePrev","rleNext","splice","nextnext","ArrayType","Uint8ClampedArray","frameSize","toIJK","toIndex","newRle","iEnd","rowModified","baseIndex","rowToUse","forEachRow","clear","rowOffset","comp","floodFill","stack","replaceValue","flood","sourceValue","sum","planar","diagonals","singlePlane","childOptions","top","adjacents","findAdjacents","filter","adjacent","fillFrom","getter","boundsIJK","item","adjacentsDelta","leftRle","rightRle","delta","delta1","delta2","testJ","testK","testRle","newAdjacentDelta","isImageActor","actorEntry","actorIsA","actorType","actorToCheck","actor","isA","applyPreset","preset","colorTransferArray","colorTransfer","parseFloat","shiftRange","Infinity","center","getShiftRange","cfun","normColorTransferValuePoints","r","g","b","rescaled","removeAllPoints","addRGBPoint","applyPointsToRGBFunction","getProperty","setRGBTransferFunction","scalarOpacityArray","scalarOpacity","ofun","normPoints","opacity","pwf","addPoint","applyPointsToPiecewiseFunction","property","setScalarOpacity","gradientMinValue","gradientMinOpacity","gradientMaxValue","gradientMaxOpacity","gradientOpacity","setUseGradientOpacity","setGradientOpacityMinimumValue","setGradientOpacityMinimumOpacity","setGradientOpacityMaximumValue","setGradientOpacityMaximumOpacity","interpolation","setInterpolationTypeToFastLinear","setShade","shade","ambient","diffuse","specular","specularPower","setAmbient","setDiffuse","setSpecular","setSpecularPower","renderingEngineAndViewportIds","renderingEnginesArray","renderingEngine","viewports","viewportIds","getRenderingEngineAndViewportsContainingVolume","hasBeenDestroyed","renderViewports","getImagePlaneModule","newImagePlaneModule","MetadataModules","IMAGE_PLANE","buildMetadata","voiLUTFunction","imageIdScalingFactor","calibration","CALIBRATION","voiLUTFunctionEnum","values","VOILUTFunctionType","includes","LINEAR","getValidVOILUTFunction","scalingFactor","calculateSpacingBetweenImageIds","referenceImagePositionPatient","rowCosineVec","colCosineVec","scanAxisNormal","refIppVec","getDistance","positionVector","ippVec","prefetchedImageIds","metadataForMiddleImage","middleIppVec","distanceBetweenFirstAndMiddleImages","abs","distanceImagePairs","distance","sort","a","numImages","sliceThickness","spacingBetweenSlices","strictZSpacingForVolumeViewport","rendering","isNaN","debug","clamp","_colormaps","registerColormap","Name","getColormap","getColormapNames","findMatchingColormap","rgbPoints","colormapsVTK","rgbPresetNames","presetName","getPresetByName","colormapsCS3D","colormapName","matchedColormap","concat","find","RGBPoints","presetRGBPoints","opacityPoints","getScalarOpacity","getDataPointer","setColorMapTransferFunctionForVolumeActor","volumeInfo","volumeActor","threshold","colorRange","getMapper","setSampleDistance","presetToUse","applyColorMap","setMappingRange","updateOpacityWithThreshold","updateOpacity","newOpacity","getThresholdValue","updateThreshold","newThreshold","getMaxOpacity","meta","getInputData","getRange","thresholdValue","opacityFunction","dataArray","y1","x2","y2","maxOpacity","createLinearRGBTransferFunction","voiRange","lower","upper","createSigmoidRGBTransferFunction","approximationNodes","table","_","flatMap","buildFunctionFromArray","decimate","list","interleave","interleaveIndices","deepClone","obj","clonedObj","fnv1aHash","str","hash","charCodeAt","toString","log","coreLog","getLogger","getClosestImageId","imageVolume","worldPos","viewPlaneNormal","ignoreSpacing","kVector","dotProduct","EPSILON","halfSpacingInNormalDirection","closestImageId","minDistance","dir","getImageDataMetadata","xSpacing","ySpacing","xVoxels","yVoxels","zSpacing","_getNumCompsFromPhotometricInterpretation","numVoxels","camera","getCamera","spacingInNormalDirection","focalPoint","getActors","referencedId","uid","sliceRange","numberOfSlices","round","imageIndex","getScalingParameters","modalityLutModule","generalSeriesModule","scalingParameters","rescaleSlope","rescaleIntercept","scalingModules","suvbw","suvbsa","suvlbm","doseGridScaling","DoseGridScaling","doseSummation","DoseSummation","doseType","DoseType","doseUnit","DoseUnit","SMALL_EPSILON","isOne","isUnit","off","isOrthonormal","getSliceRange","imageData","corners","getDirection","dx","dy","dz","getDimensions","indexToWorld","buildFromDegree","identity","rotateFromDirections","pt","apply","transformedFocalPoint","currentSlice","minX","maxX","getSpacingInNormalDirection","iVector","jVector","dotProducts","projectedSpacing","EPSILON_PART","isPrimaryVolume","volume","getVolumeLoaderSchemes","starts","substring","getTargetVolumeAndSpacingInNormalDir","targetId","useSlabThickness","volumeActors","actorUID","imageVolumes","va","getVolume","iv","targetVolumeId","imageVolumeIndex","getSpacingInNormal","smallest","hasPrimaryVolume","slabThickness","getProperties","renderingEngines","targetViewports","filteredViewports","getVolumeViewports","vp","hasVolumeId","getVoiFromSigmoidRGBTransferFunction","cfunRange","getTable","cfunDomain","logy1","x1","logy2","ww","wc","getVolumeActorCorners","bounds","extentToBounds","getExtent","getVolumeId","getActor","numScrollSteps","floatingStepNumber","currentStepIndex","sliceRangeInfo","hasFloatScalingParameters","some","isInteger","hasNaNValues","input","imageIdToURI","colonIndex","retrieveConfigurationState","IMAGE_RETRIEVE_CONFIGURATION","imageRetrieveMetadataProvider","payload","clone","restore","state","queries","query","addProvider","EventListenerPhases","TargetEventListeners","target","_eventListeners","_children","_target","isEmpty","size","addEventListener","dotIndex","namespaceToken","childElementEventListener","_addEventListener","removeEventListener","_removeEventListener","reset","entries","child","_unregisterAllEvents","listenersMap","listenerPhase","capture","Capture","Bubble","registeredPhases","None","callbackItem","newListenerPhase","_unregisterAllListeners","listener","eventPhases","currentPhase","useCapture","MultiTargetEventListenerManager","_targetsEventListeners","eventListeners","targetEventListeners","scaleRGBTransferFunction","rgbTransferFunction","getSize","nodeValue1","getNodeValue","setNodeValue","getMinMax","storedPixelData","storedPixel","numPixels","LAST_RUNTIME_ID","GLOBAL_CONTEXT","DEFAULT_MAX","DEFAULT_SEPARATOR","getRuntimeId","symbol","idComponents","carry","n","getNextRuntimeId","join","imageURI","isOpposite","v1","v2","tolerance","indexWithinDimensions","targetViewport","renderingEngineId","getRenderingEngine","sameVolumesViewports","targetActors","vpActors","every","vpActor","preScale","scaled","renderToCanvasGPU","imageOrVolume","viewportOptions","displayArea","imageArea","HTMLCanvasElement","isVolume","viewportId","element","document","createElement","devicePixelRatio","window","originalWidth","originalHeight","style","visibility","position","body","appendChild","uniqueId","setAttribute","temporaryCanvas","getOrCreateCanvas","RenderingEngine","getViewport","viewportInput","ViewportType","ORTHOGRAPHIC","STACK","defaultOptions","suppressEvents","enableElement","elementRendered","viewReference","onImageRendered","eventDetail","useViewRef","setViewReference","getContext","drawImage","canvasToWorld","topRight","bottomLeft","rightVector","downVector","Events","IMAGE_RENDERED","setTimeout","disableElement","querySelectorAll","remove","thicknessMm","setVolumes","renderImageObject","resetCamera","setProperties","renderToCanvasCPU","_renderingEngineId","_viewportOptions","getDefaultViewport","renderingTools","calculateTransform","drawImageSync","loadImageToCanvas","RequestType","Thumbnail","useCPURendering","thumbnail","imageAspect","baseViewportOptions","renderFn","successCallback","metaData","useRGBA","cache","imageLoadPoolManager","addRequest","imageIdIndex","HistoryMemo","label","redoAvailable","undoAvailable","ring","_size","undo","items","restoreMemo","eventTarget","dispatchEvent","CustomEvent","detail","isUndo","operationType","memo","undoIf","condition","redo","newPosition","createMemo","DefaultHistoryMemo","worldCoords","newOrigin","sub","imageToWorldCoords","imageCoords","imageCoordsInWorld","getViewportsWithImageURI","getViewports","hasImageURI","getClosestStackImageIndexForPoint","minimalDistance","getImageIds","currentImageIdIndex","getCurrentImageIdIndex","planeMetadata","targetImagePlane","rowVec","colVec","planeNormal","getPlaneMetadata","plane","planeEquation","planeDistanceToPoint","closestStack","higherImageIds","lowerImageIds","calculateMinimalDistanceForStackViewport","getCurrentVolumeViewportSlice","canvasWidth","canvasHeight","sliceToIndexMatrix","indexToSliceMatrix","getSliceViewInfo","ijkOriginPoint","transformCanvasToIJK","ijkRowPoint","ijkColPoint","ijkRowVec","ijkColVec","ijkSliceVec","maxIJKRowVec","maxIJKColVec","getImageData","sliceViewInfo","getSliceData","spatialRegistrationMetadataProvider","viewportId1","viewportId2","entryId","entryIdReverse","viewport1","viewport2","imageId1","getSliceIndex","imageId2","imagePlaneModule1","imagePlaneModule2","iop2","imagePositionPatient1","imagePositionPatient2","mat","getViewportImageCornersInWorld","ratio","topRightCanvas","bottomRightCanvas","bottomLeftCanvas","topLeftWorld","topRightWorld","bottomRightWorld","bottomLeftWorld","topLeftImage","worldToIndex","topRightImage","bottomRightImage","bottomLeftImage","topLeftImageWorld","_isInBounds","topRightImageWorld","bottomRightImageWorld","bottomLeftImageWorld","_getStackViewportImageCorners","imageCoord","getEnabledElement","StackViewport","getCornerstoneImage","isValidVolume","imageId0","seriesInstanceUID","usingDefaultValues","baseMetadata","validVolume","isEqual","videoUIDs","Set","isVideoTransferSyntax","uidOrUids","async","convertStackToVolumeViewport","uuidv4","getUnknownVolumeLoaderSchema","prevViewPresentation","getViewPresentation","prevViewReference","getViewReference","background","orientation","createAndCacheVolume","load","volumeViewport","volumeViewportNewVolumeHandler","VOLUME_VIEWPORT_NEW_VOLUME","setViewPresentation","convertVolumeToStackViewport","ImageVolume","prevView","stackViewport","setStack","roundToPrecision","roundNumber","precision","absValue","fixedPrecision","toFixed","convertToGrayscale","isRGBA","isRGB","newScalarData","destOffset","increment","getRandomSampleFromArray","clonedArray","shuffleArray","random","componentToHex","c","hex","rgbToHex","hexToRgb","result","exec","parseInt","deepEqual","obj1","obj2","JSON","stringify","test4DTag","IPPGroups","value_getter","frame_groups","first_frame_value_set","positions","frame_value_set","frames","frame_value","setEquals","getTagValue","tag","getPhilipsPrivateBValue","InlineBinary","value_bytes","atob","ary_buf","dv","DataView","setUint8","getSiemensPrivateBValue","getGEPrivateBValue","set_a","set_b","getPetFrameReferenceTime","moduleInfo","positionGroups","ippMetadata","reduce","rv","frame_count","getIPPGroups","imageIdGroups","splittingTag","tags","fncList2","timePoints","isDynamicVolume","scaleArray","arrayLength","clip","val","low","high","scrollSlabs","getVolumeViewportScrollInfo","newFocalPoint","snapFocalPointToSlice","setCamera","desiredStepIndex","VolumeScrollEventDetail","currentImageId","getCurrentImageId","triggerEvent","VOLUME_VIEWPORT_SCROLL_OUT_OF_BOUNDS","VOLUME_VIEWPORT_SCROLL","scrollVolume","eventData","STACK_SCROLL_OUT_OF_BOUNDS","scroll","debounceLoading","loop","jumpToSlice","currentImageIndex","getTargetImageIdIndex","getNumberOfSlices","_getImageSliceData","imageIndexToJump","lastSliceIndex","_getImageIndexToJump","createSubVolume","referencedVolumeId","referencedVolume","refVolumeDim","minY","maxY","minZ","maxZ","ijkTopLeft","boundingBoxOriginWorld","transformIndexToWorld","subVolumeOptions","subVolume","createLocalVolume","subVolumeData","getCompleteScalarDataArray","subVolumeSliceSize","refVolumeSliceSize","refVolumeData","rowStartWorld","refVolumeRowStartIJK","transformWorldToIndex","refVolumeRowStartOffset","rowData","subVolumeLineStartOffset","setCompleteScalarDataArray","getVolumeDirectionVectors","viewUp","ijkOrigin","worldVecColDir","worldVecSliceDir","worldVecRowDir","ijkVecColDir","ijkVecSliceDir","ijkVecRowDir","calculateNeighborhoodStats","centerIjk","radius","numSlices","numPixelsPerSlice","sumSq","cx","cy","cz","centerIndex","mean","stdDev","variance","sqrt","projectionRadiographSOPClassUIDs","getPixelSpacingInformation","instance","PixelSpacing","SOPClassUID","SequenceOfUltrasoundRegions","isArrayOfSequences","PhysicalDeltaX","PhysicalDeltaY","calculateUSPixelSpacing","ImagerPixelSpacing","EstimatedRadiographicMagnificationFactor","PixelSpacingCalibrationType","PixelSpacingCalibrationDescription","isProjection","CalibrationTypes","UNKNOWN","ERMF","PROJECTION","CALIBRATED","calculateRadiographicPixelSpacing","NOT_APPLICABLE","getViewportModality","Modality","_getViewportModality","invertRgbTransferFunction","areNumbersEqualWithTolerance","num1","num2","isNumberType","isNumberArrayLike","arr1","arr2","areArraysEqual","negative","isEqualNegative","isEqualAbs","isNumber","isFinite","loglevel","getRootLogger","logger","names","cs3dLog","toolsLog","loaderLog","aiLog","examplesLog","dicomConsistencyLog","imageConsistencyLog","makeVolumeMetadata","voiLut","voiLutModule","BitsAllocated","BitsStored","SamplesPerPixel","HighBit","PhotometricInterpretation","PixelRepresentation","ImageOrientationPatient","Columns","Rows","VOILUTFunction","SeriesInstanceUID","linePlaneIntersection","p0","p1","x0","y0","z0","z1","A","B","C","D","t","normal","normalized","threePlaneIntersection","firstPlane","secondPlane","thirdPlane","A1","B1","C1","D1","A2","B2","C2","D2","A3","B3","C3","D3","m0","m1","m2","m3","signed","numerator","sign","isPointOnPlane","deltaFrames","posDiffFromFocalPoint","steps","frameIndex","newSlicePosFromMin","sortImageIdsAndGetSpacing","usingWadoUri","sortedImageIds","getTransferFunctionNodes","transferFunction","setTransferFunctionNodes","nodes","node","canvasPoint","vtkImageData","worldPoint","voxelPos","transformWorldToIndexContinuous","updateVTKImageDataWithCornerstoneImage","sourceImageData","getPointData","getScalars","getData","newPixelData","modified","toWindowLevel","toLowHighRange","LINEAR_EXACT","SAMPLED_SIGMOID","Active","Passive","Enabled","ToolModes","CAMERA_MODIFIED","Enums","STACK_NEW_IMAGE","VOLUME_NEW_IMAGE","calibratedPixelSpacingMetadataProvider","utilities","ViewportStatus","sumOverDimensionGroups","dimensionGroups","getScalarDataLength","resultArray","dimensionGroupNumber","getDimensionGroupScalarData","SUM","AVERAGE","SUBTRACT","idx","idx3","getPolyDataPointIndexes","polyData","linesData","getLines","lineSegments","segmentSize","segment","contours","findStartingPoint","startPoint","contour","nextPoint","getPolyDataPoints","contoursIndexes","rawPointsData","getPoints","contourIndexes","ColorbarRangeTextPosition","Right","Widget","extractWindowLevelRegionToolData","VolumeViewport","extractImageDataVolume","extractImageDataStack","setAnnotationLabel","annotation","updatedLabel","triggerAnnotationModified","ChangeTypes","LabelChange","calculateFanShapeCorners","imageBuffer","hull","roughContour","rough","slack","next","walk","to","i2","i3","P2","P3","pathA","pathB","globalYmin","upperPath","topY","arcPts","P1","best","P4","pickPoints","refined","edgeBuf","opts","maxDist","directions","snapQuadrant","xmin","xmax","ymin","ymax","xi","yi","xAlign","yAlign","refineCornersDirectional","step","angleRad","atan2","getImage","calculateFanGeometry","buffer","totalPixels","channelCount","mask","isForeground","labels","currentLabel","regionSizes","px","py","pixelCount","onFlood","largestLabel","isBorder","nx","ny","outer","dirs","prev","dx0","dy0","startDir","d","nextPt","bdx","bdy","segmentLargestUSOutlineFromBuffer","simplified","generateConvexHullFromContour","fanGeometry","params","centerResult","intersectLine","startAngle","endAngle","tempAngle","d1","hypot","d4","d2","d3","innerRadius","outerRadius","deriveFanGeometry","props","_controlPoints","_invalidated","_resolution","resolution","_fixedResolution","fixedResolution","_closed","closed","controlPoints","numControlPoints","aabb","_update","_aabb","hasTangentPoints","addControlPoint","addControlPoints","addControlPointAtU","u","lineSegment","_getLineSegmentAt","endPoint","curveSegmentIndex","curveSegment","_curveSegments","controlPointPos","deleteControlPointByIndex","minControlPoints","clearControlPoints","setControlPoints","updateControlPoint","newControlPoint","getControlPoints","controlPoint","getClosestControlPoint","minSquaredDist","closestPointIndex","len","squaredDist","getClosestControlPointWithinDistance","closestControlPoint","getClosestPoint","curveSegmentsDistInfo","_getCurveSegmmentsDistanceSquaredInfo","closestPoint","csA","csB","distanceSquared","minDistCurveSegment","minDistLineSegment","closestPointCurveSegmentIndex","minDistSquared","curveSegmentDistInfo","lineSegPoint","lineSegDistSquared","math","distanceToPointSquaredInfo","uValue","previousLineSegmentsLength","distanceToPoint","getClosestPointOnControlPointLines","linePoints","getPolylinePoints","_convertCurveSegmentsToPolyline","getPreviewPolylinePoints","controlPointPreview","closeDistance","closeSpline","previewCurveSegments","getPreviewCurveSegments","isPointNearCurve","curveSegments","_getCurveSegmmentsWithinDistance","maxDistSquared","distanceToPointSquared","containsPoint","closingCurveSegment","_getClosingCurveSegmentWithStraightLineSegment","numIntersections","curveSegAABB","lineSegmentAABB","p2","isVerticalLine","xIntersection","getSplineCurves","curveSegLength","polylinePoints","curveSegIndex","lineSegIndex","curveSegmentsDistanceSquared","curveSegmentsDistance","curveSegmentsWithinRange","curveSegmentDistSquared","pointLength","lengthEnd","startControlPoint","endControlPoint","closingLineSegment","CubicSpline","previewNumCurveSegments","_getNumCurveSegments","startCurveSegIndex","endCurveSegIndex","transformMatrix","getTransformMatrix","_getCurveSegment","numCurveSegments","previousCurveSegmentsLength","_getPoint","uInt","p3","_getCurveSegmentPoints","tt","ttt","tValues","qValues","p0Index","p2Index","p3Index","mirror","_getLineSegments","numLineSegments","inc","maxU","curveSegmentLength","lineSegAABB","lineSegLength","TRANSFORM_MATRIX","BSpline","CardinalSpline","super","_scale","_fixedScale","fixedScale","s","s2","CatmullRomSpline","LinearSpline","PanTool","toolProps","defaultToolProps","supportedInteractionTypes","touchDragCallback","evt","_dragCallback","mouseDragCallback","deltaPoints","deltaPointsWorld","world","updatedPosition","updatedFocalPoint","toolName","TrackballRotateTool","rotateIncrementDegrees","rotateSampleDistanceFactor","_resizeObservers","_hasResolutionChanged","preMouseDownCallback","mapper","getDefaultActor","originalSampleDistance","getSampleDistance","cleanUp","once","_getViewportsInfo","getToolGroup","toolGroupId","viewportsInfo","onSetToolActive","subscribeToElementResize","getEnabledElementByIds","resizeObserver","ResizeObserver","viewPresentation","observe","_viewportAddedListener","TOOLGROUP_VIEWPORT_ADDED","onSetToolDisabled","disconnect","rotateCamera","centerWorld","axis","vtkCamera","getVtkActiveCamera","getViewUp","getFocalPoint","getPosition","newViewUp","currentPoints","lastPoints","currentPointsCanvas","lastPointsCanvas","clientWidth","clientHeight","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","noe","dot","angleX","acos","upVec","atV","rightV","forwardV","angleY","WindowLevelTool","_getImageDynamicRangeFromMiddleSlice","middleSliceIndex","frameLength","bytesPerVoxel","frame","_getMinMax","newRange","viewportsContainingVolumeUID","properties","scaling","getPTScaledNewRange","deltaPointsCanvas","getNewRange","multiplier","_getMultiplierFromDynamicRange","wwDelta","wcDelta","voiLutFunction","imageDynamicRange","calculatedDynamicRange","getMiddleSliceData","acc","pixel","metadataDynamicRange","_getImageDynamicRangeFromViewport","imageDataRange","voxel","WindowLevelRegionTool","minWindowWidth","addNewAnnotation","isDrawing","getReferencedImageId","getFrameOfReferenceUID","highlighted","getToolName","handles","cachedStats","viewportIdsToRender","getViewportIdsWithToolToRender","editData","_activateDraw","hideElementCursor","preventDefault","triggerAnnotationRenderForViewportIds","_endCallback","_deactivateDraw","resetElementCursor","annotationUID","triggerAnnotationCompleted","applyWindowLevelRegion","worldToCanvas","topLeftCanvas","isInteractingWithTool","MOUSE_UP","MOUSE_DRAG","MOUSE_MOVE","MOUSE_CLICK","TOUCH_END","TOUCH_DRAG","TOUCH_TAP","renderAnnotation","svgDrawingHelper","renderStatus","annotations","filterInteractableAnnotationsForElement","styleSpecifier","canvasCoordinates","lineWidth","lineDash","getAnnotationStyle","dataId","rectangleUID","drawRect","startCanvas","endCanvas","left","pixelLuminanceData","luminance","spIndex","column","red","green","blue","minMaxMean","pixelLuminance","globalMin","globalMax","spv","isPointNearTool","toolSelectedCallback","handleSelectedCallback","_activateModify","_deactivateModify","StackScrollTool","debounceIfNotLoaded","deltaY","mouseWheelCallback","_scroll","_scrollDrag","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","wheel","BaseVolumeViewport","offsetHeight","PlanarRotateTool","setAngle","startPoints","currentPointWorld","startPointWorld","centerCanvas","angleBetweenLines","cross","rotAngle","rotMat","rotatedViewUp","ZoomTool","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","pan","initialMousePosWorld","dirVec","preTouchStartCallback","_dragParallelProjection","pinch","deltaDistance","parallelScale","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","cappedParallelScale","thresholdExceeded","imageWidth","imageHeight","canvasAspect","scaledImageWidth","scaledImageHeight","minParallelScaleRequired","minScaleInWorld","maxScaleInWorld","_dragPerspectiveProjection","zoomScale","directionOfProjection","tmp","_pinchCallback","_zoom","currentPointsList","parallelProjection","_panCallback","eventDetails","eventName","MOUSE_WHEEL","page","client","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","maxIntensity","brightestPoint","getPointInLineOfSightWithCriteria","intensity","foundToolGroup","getToolGroupForViewport","jumpToWorld","RENDERING_DEFAULTS","CONSTANTS","defaultReferenceLineColor","defaultReferenceLineControllable","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","OPERATION","CrosshairsTool","shadow","viewportIndicators","viewportIndicatorsConfig","autoPan","enabled","panSize","handleRadius","enableHDPIHandles","referenceLinesCenterGapRadius","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","MAXIMUM_INTENSITY_BLEND","mobile","toolCenter","initializeViewport","_getAnnotations","removeAnnotation","cameraPosition","cameraFocalPoint","rotationPoints","slabThicknessPoints","activeOperation","activeViewportIds","addAnnotation","resetCrosshairs","viewportInfo","resetPan","resetZoom","resetToCenter","resetRotation","resetSlabThickness","_computeToolCenter","computeToolCenter","firstViewport","secondViewport","thirdViewport","normal1","point1","normal2","point2","normal3","point3","setToolCenter","jumpWorld","_jump","filteredAnnotations","viewportIdArray","otherViewport","viewportControllable","_getReferenceLineControllable","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","canvasCoords","proximity","_pointNearTool","interactionType","onCameraModified","viewportAnnotation","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","CROSSHAIR_TOOL_CENTER_CHANGED","getViewportIds","_autoPanViewportIfNecessary","onResetCamera","mouseMoveCallback","filteredToolAnnotations","imageNeedsUpdate","isAnnotationLocked","previousActiveOperation","previousActiveViewportIds","near","getHandleNearImagePoint","_areViewportIdArraysEqual","viewportUIDSpecificCrosshairs","canvasDiagonalLength","canvasMinDimensionLength","crosshairCenterCanvas","otherViewportAnnotations","_filterAnnotationsByUniqueViewportOrientations","referenceLines","canvasBox","otherCamera","otherViewportControllable","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","pointWorld0","pointWorld1","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","liangBarksyClip","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","matrix","worldUnitOrthoVectorFromCenter","slabThicknessValue","getSlabThickness","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportColor","_getReferenceLineColor","line","lineIndex","viewportSlabThicknessControlsOn","selectedViewportId","lineActive","lineUID","drawLine","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","handleUID","drawHandles","referenceColorCoordinates","xOffset","yOffset","circleRadius","circleUID","drawCircle","getAnnotations","toolGroupAnnotations","_onNewVolume","viewportIdArrayOne","viewportIdArrayTwo","itemFound","_getAnnotationsForViewportsWithDifferentCameras","viewportsWithDifferentCameras","cameraOfTarget","_filterViewportWithSameOrientation","referenceAnnotation","linkedViewportAnnotations","otherViewportsAnnotationsWithSameCameraDirection","otherViewPlaneNormal","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_checkIfViewportsRenderingSameScene","volumeIds","getAllVolumeIds","otherVolumeIds","viewportsAnnotationsToUpdate","sameScene","_applyDeltaShiftToSelectedViewportCameras","dir1","dir2","finalPointCanvas","originalPointCanvas","_isClockWise","rotationAxis","buildFromRadian","otherViewportsIds","referenceAnnotations","viewportsIds","dotProd","projectedDelta","mod","currentPoint","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","getToolInstance","setSlabThickness","lineViewport","lineSegment1","distanceToPoint1","lineSegment2","distanceToPoint2","getReferenceLineColor","getReferenceLineControllable","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","onSetToolPassive","onSetToolEnabled","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","toolCenterCanvas","visiblePointCanvas","visiblePointWorld","actorUIDs","blendModeToUse","COMPOSITE","setBlendMode","_applyDeltaShiftToViewportCamera","annotationCanvasCoordinate","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_hasBeenRemoved","_getReferencedImageId","_createMagnificationViewport","viewportProperties","originalViewportRotation","canvasPos","magnifyToolElement","querySelector","magnifyElement","classList","display","magnifyViewport","pow","_dragEndCallback","viewportElement","removeChild","getTargetId","csEvents","isSegmentation","AdvancedMagnifyToolActions","PARALLEL_THRESHOLD","AdvancedMagnifyTool","Actions","magnifyingGlass","zoomFactor","zoomFactorList","padding","actions","showZoomFactorsList","method","bindings","mouseButton","MouseBindings","Secondary","modifierKey","KeyboardBindings","Shift","config","canvasHandlePoints","_getCanvasHandlePoints","magnifyViewportId","sourceViewportId","isCanvasAnnotation","activeHandleIndex","magnifyViewportManager","createViewport","sourceEnabledElement","annotationPoints","canvasDelta","dispose","getAllAnnotations","canvasTop","canvasBottom","canvasLeft","radiusPoint","getCanvasCircleRadius","handle","handleIndex","newAnnotation","_dragDrawCallback","hasMoved","_dragModifyCallback","_dragHandle","canvasCenter","currentCanvasPoints","newRadius","newCanvasHandlePoints","getStyle","activeHandleCanvasCoords","isAnnotationVisible","handleGroupUID","update","canvasCenterPos","canvasRadius","AdvancedMagnifyViewportManager","getInstance","currentZoomFactor","dropdown","_getZoomFactorsListDropdown","newZoomFactor","parentElement","assign","focus","onChangeCallback","stopPropagation","keyCode","which","toLowerCase","option","title","defaultSelected","sourceViewport","sourceElement","AdvancedMagnifyViewport","_addSourceElementEventListener","_magnifyViewportsMap","magnifyViewportInfo","_annotationRemovedCallback","destroyViewport","_newStackImageCallback","magnifyViewportsMapEntries","_getMagnifyViewportsMapEntriesBySourceViewportId","getEnabledElementByViewportId","stackActorReInitialized","_reset","_newVolumeImageCallback","currentViewPlaneNormal","worldImagePlanePoint","vecHandleToImagePlane","worldDist","worldDelta","_initialize","_singleton","_removeEventListeners","_destroyViewports","magnifyViewportMapEntry","_removeSourceElementEventListener","newEnabledElement","_addEventListeners","ANNOTATION_REMOVED","newStackHandler","VIEWPORT_NEW_IMAGE_SET","newVolumeHandler","_enabledElement","_sourceToolGroup","_magnifyToolGroup","_isViewportReady","_radius","_resized","_canAutoPan","_viewportId","_sourceEnabledElement","_autoPan","visible","_browserMouseDownCallback","_browserMouseUpCallback","_handleToolModeChanged","_mouseDragCallback","_resizeViewportAsync","debounce","_resizeViewport","_syncViewports","parentNode","magnifyToolGroup","mode","toolBindingsOptions","setToolActive","setToolPassive","setToolEnabled","Disabled","setToolDisabled","_inheritBorderRadius","borderRadius","_createViewportNode","overflow","boxSizing","_convertZoomFactorToParallelScale","offsetWidth","_isStackViewport","_isVolumeViewport","_cloneToolGroups","sourceActors","magnifyToolGroupId","sourceToolGroup","toolInstance","addViewport","addSegmentationRepresentations","segmentationId","SegmentationRepresentations","Labelmap","_cloneStack","_cloneVolumes","volumeInputArray","_cloneViewport","sourceViewportOptions","toolGroups","_cancelMouseEventCallback","closest","canvasCurrent","magnifyRadius","dist","panDist","canvasDeltaPos","newCanvasPosition","currentWorldPos","newWorldPos","worldDeltaPos","autoPanCallbackData","currentPosition","_addBrowserEventListeners","_removeBrowserEventListeners","TOOL_MODE_CHANGED","sourceCanvas","_syncViewportsCameras","_syncStackViewports","setImageIdIndex","sourceProperties","resize","ReferenceLines","AnnotationDisplayTool","enforceSameFrameOfReference","showFullDimension","_init","getRenderingEngines","filterViewportsWithToolEnabled","sourceViewportCanvasCornersInWorld","onSetToolConfiguration","topLeft","bottomRight","sourceViewPlaneNormal","isParallel","targetViewportPlane","pointSet1","pointSet2","pointSetToUse","topBottomVec","topRightVec","newNormal","isPerpendicular","lineStartWorld","lineEndWorld","handleFullDimension","vec1","vec2","targetImage","getTargetImageData","topLeftImageCoord","topRightImageCoord","bottomRightImageCoord","bottomLeftImageCoord","lineStartImageCoord","lineEndImageCoord","intersectInfiniteLines","isInBound","err","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","a2","b2","c2","OverlayGridTool","sourceImageIds","pointSets","calculateImageIdPointSets","viewportData","imageIdNormal","getImageIdNormal","targetData","initializeViewportData","pointSetsToUse","lineStartsWorld","lineEndsWorld","SegmentationIntersectionTool","actorsWorldPointsMap","calculateSurfaceSegmentationIntersectionsForViewport","calculateSurfaceSegmentationIntersections","actorEntries","cacheId","getCacheId","clippingFilter","actorWorldPointMap","polyLineIdx","worldPointsSet","canvasPoints","fillColor","fillOpacity","closePath","polyLineUID","drawPath","actorWorldPointsMap","getOutputData","colorArray","colorComponentToString","component","componentString","colorToString","getColor","decimals","pointToString","ReferenceCursors","preventHandleOutsideImage","displayThreshold","positionSync","disableCursor","isHandleOutsideImage","_elementWithCursor","_currentCursorWorldPosition","_currentCanvasPosition","_disableCursorEnabled","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","textBox","worldPosition","worldBoundingBox","previousCamera","oldFocalPoint","cameraNormal","isElementWithCursor","updateViewportImage","lineWidthBase","crosshairUIDs","right","centerSpace","lineLength","currentMousePosition","closestIndex","currentDistance","normalizedViewPlane","scaledPlaneNormal","renderViewport","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","enabledElements","viewportCanvasCornersInWorld","thisAnnotation","computeScaleSize","worldWidthViewport","worldHeightViewport","location","scaleSizes","currentScaleSize","scaleSize","computeEndScaleTicks","locationTickOffset","bottom","endTick1","endTick2","computeInnerScaleTicks","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","computeWorldScaleCoordinates","pointSet","worldCoordinates","midpointLocation","midpoint","computeCanvasScaleCoordinates","canvasSize","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","computeScaleBounds","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","scaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textCanvasCoordinates","textBoxLines","_getTextLines","drawTextBox","fontFamily","fontSize","scaleSizeDisplayValue","scaleSizeUnits","SculptorTool","minSpacing","referencedToolNames","toolShape","referencedToolName","updateCursorSize","registeredShapes","isActive","commonData","activeAnnotationUID","isEditingOpenContour","canvasLocation","configureToolSize","selectFreehandTool","activateModify","updateCursor","endCallback","deactivateModify","activeAnnotation","filterSculptableAnnotationsForElement","calculateStats","HandlesUpdated","dragCallback","polyline","sculpt","registerShapes","CircleSculptCursor","shapeName","setToolShape","shapeClass","shape","cursorShape","selectedShape","sculptData","mousePoint","mouseCanvasPoint","deltaWorld","maxSpacing","getMaxSpacing","pushedHandles","pushHandles","first","insertNewHandles","interpolatePointsWithinMaxSpacing","indicesToInsertAfter","nextHandleIndex","contourIndex","currentCanvasPoint","nextCanvasPoint","updateToolSize","sculptableAnnotations","findNewHandleIndices","newIndexModifier","insertHandleRadially","previousIndex","nextIndex","handleData","getInsertPosition","closestAnnotationUID","getClosestFreehandToolOnElement","toolIndex","isLocked","isVisible","distanceFromTool","distancePointToContour","AnnotationStyleStates","Default","Highlighted","renderShape","DIRECTIONS","VolumeRotateTool","ax","ay","az","LabelTool","getTextCallback","changeTextCallback","svgLayer","textGroup","textGroupElement","bbox","getBBox","getAttribute","translateX","translateY","matches","text","initialWorldPos","anchorWorldPos","doneEditMemo","getLinkedTextBoxStyle","textBoxUID","hydrate","autoGenerated","_doneChangingTextCallback","updatedText","_isInsideVolume","index1","index2","doneChangingTextCallback","prompt","LengthTool","getTextLines","defaultGetTextLines","movingTextBox","canvasPoint1","canvasPoint2","worldPosDelta","unit","_throttledCalculateCachedStats","_calculateCachedStats","textLines","canvasTextBoxCoords","getTextBoxCoordsCanvas","textBoxPosition","boundingBox","drawLinkedTextBox","throttle","trailing","hydrateBase","serializableOptions","_calculateLength","pos1","pos2","worldPos1","worldPos2","targetIds","StatsUpdated","cachedVolumeStats","HeightTool","heightUID","drawHeight","_calculateHeight","outside","ProbeTool","probeDefaults","textCanvasOffset","mergeDefaultProps","createAnnotationForViewport","eventDispatchDetail","getStackViewports","referencedImageURI","currentImageURI","textUID","changeType","pixelUnitsOptions","isViewportPreScaled","isSuvScaled","ijk","modalityUnit","getAtIJKPoint","calibratedResults","hasEnhancedRegionValues","units","getPixelValueUnits","DragProbeTool","postMouseDownCallback","postTouchStartCallback","EllipticalROITool","storePointData","centerPointRadius","statsCalculator","BasicStatsCalculator","initialRotation","getRotation","w","h","minorEllipse","xRadius","yRadius","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","originalHandleCanvas","pointsCanvas","dX","dY","bottomCanvas","topCanvas","leftCanvas","rightCanvas","dYCanvas","newHalfCanvasWidth","canvasRight","dXCanvas","newHalfCanvasHeight","canvasCorners","getCanvasEllipseCorners","areaUnit","area","ellipseUID","centerPoint","_getCanvasEllipseCenter","pos1Index","post2Index","ellipseObj","zRadius","worldWidth","worldHeight","getWorldWidthAndHeightFromTwoPoints","isEmptyArea","pointsInShape","statsCallback","isInObject","pointLPS","pointInEllipse","fast","returnPoints","getStatistics","statsArray","ellipse","rotLocation","ellipseCanvasPoints","areaLine","CircleROITool","canvasEnd","getCanvasCircleCorners","radiusUnit","perimeter","wasInvalidated","pos2Index","aspect","radiusLine","ETDRSGridTool","degrees","diameters","diametersCanvas","diameter","worldMeasureToCanvas","degreesRad","angleRadians","degree","cos","sin","measurement","p1Canvas","p2Canvas","DEFAULT_SPLINE_CONFIG","controlPointAdditionDistance","controlPointDeletionDistance","showControlPointsConnectors","controlPointAdditionEnabled","controlPointDeletionEnabled","SplineTypesEnum","SplineToolActions","SplineROITool","ContourSegmentationBaseTool","SplineTypes","simplifiedSpline","contourHoleAdditionModifierKey","epsilon","spline","Cardinal","Class","CatmullRom","Linear","drawPreviewEnabled","enableTwoPointPreview","lastControlPointDeletionKeys","AddControlPoint","Primary","DeleteControlPoint","Ctrl","splineToolNames","fireChangeOnUpdate","contourHoleProcessingEnabled","Completed","_keyDownCallback","controlPointIndex","_deleteControlPointByIndex","_mouseMoveCallback","lastCanvasPoint","_mouseDownCallback","doubleClick","MOUSE_DOUBLE_CLICK","closeContour","addNewPoint","moveAnnotation","eventType","ANNOTATION_COMPLETED","ANNOTATION_MODIFIED","triggerChangeEvent","KEY_DOWN","MOUSE_DOWN","_renderStats","textboxStyle","addControlPointCallback","splineType","splineConfig","_getSplineConfig","closestPointInfo","deleteControlPointCallback","originalWorldPoint","deltaXPoint","deltaYPoint","deltaInX","deltaInY","canvasMaxX","canvasMaxY","canvasMinX","canvasMinY","getAABB","topLeftBBWorld","topLeftBBIndex","bottomRightBBWorld","getArea","annotationCompletedBinded","annotationCompleted","sourceAnnotation","isContourSegmentationTool","convertContourSegmentationAnnotation","initializeListeners","removeListeners","getMouseModifier","event","createAnnotation","cancelAnnotation","renderAnnotationInstance","renderContext","annotationStyle","locked","annotationLocked","childAnnotations","getChildAnnotations","childAnnotationUIDs","_isSplineROIAnnotation","splinePolylineCanvas","_updateSplineInstance","updateContourPolyline","targetWindingDirection","Clockwise","updateWindingDirection","previewPolylinePoints","drawPolyline","controlPointsConnectors","textbox","createInterpolatedSplineControl","contourAnnotation","createSpline","onInterpolationComplete","splineConfigs","splineInstance","SplineClass","SplineContourSegmentationTool","annotationCutMergeCompletedBinded","annotationCutMergeCompleted","ANNOTATION_CUT_MERGE_PROCESS_COMPLETED","LivewireContourTool","snapHandleNearby","nearestEdge","showInterpolationPolyline","cancelInProgress","proximitySquared","clearAnnotation","clearEditData","triggerContourAnnotationCompleted","worldToSlice","sliceToWorld","worldPosOriginal","currentPath","closestHandlePoint","distSquared","worldControlPoint","canvasControlPoint","snapPoint","scissors","findMinNearby","pathPoints","findPathToPoint","addPoints","prependPath","confirmedPath","lastPoint","getLastPoint","startSearch","updateAnnotation","imgWidth","imgHeight","slicePoint","editHandle","setupBaseEditData","nextPos","viewportImageData","sliceImageData","ijkPoint","startPos","LivewireScissors","createInstanceFromRawPixelData","scissorsNext","currentPathNext","confirmedPathNext","handlePoints","numHandles","previousHandle","nextHandle","findHandlePolylineIndex","slicePos","pathPointsLeft","pathPointsRight","appendPath","contourSegmentationAnnotation","canvasHandles","livewirePath","pointArray","imagePoints","LivewireContourSegmentationTool","updateInterpolatedAnnotation","interpolationSources","originalPolyline","queueMicrotask","repeatInterpolation","originalPoints","handleSmoothing","hIndex","testPoint","minPoint","acceptedPath","path","InterpolationUpdated","rendered","polylineCanvasPoints","ArrowAnnotateTool","arrowFirst","arrowHeadStyle","touchTapCallback","taps","doubleClickCallback","clickedAnnotation","stopImmediatePropagation","markerSize","arrowUID","drawArrow","viaMarker","AngleTool","showAngleArc","arcOffset","angleStartedNotYetCompleted","line1","canvasPoint3","line2","angleArcLineDash","anglePoints","temp","segments","worldPos3","fromCharCode","CobbAngleTool","showArcLines","distanceToLines","isNearFirstLine","isNearSecondLine","TOUCH_START","arc1Angle","arc2Angle","arc1Start","arc1End","arc2Start","arc2End","firstLine","secondLine","mid1","midPoint","mid2","arc1TextBoxUID","arc1TextLine","arch1TextPosCanvas","arc2TextBoxUID","arc2TextLine","arch2TextPosCanvas","point4","canvasPoint4","getArcsStartEndPoints","linkLine","arc1Side","arc2Side","midLinkLine","linkLineLength","midFirstLine","midSecondLine","directionVectorStartArc1","magnitudeStartArc1","normalizedDirectionStartArc1","directionVectorEndArc1","magnitudeEndArc1","normalizedDirectionEndArc1","directionVectorStartArc2","magnitudeStartArc2","normalizedDirectionStartArc2","directionVectorEndArc2","magnitudeEndArc2","normalizedDirectionEndArc2","seg1","seg2","minDist","MAX_VALUE","UltrasoundDirectionalTool","displayBothAxesDistances","startedDrawing","xValues","yValues","isHorizontal","isUnitless","drawHandle","canvasDeltaY","canvasDeltaX","projectedPointCanvas","imageIndex1","imageIndex2","values1","units1","values2","units2","dist1","dist2","UltrasoundPleuraBLineTool","USPleuraBLineAnnotationType","BLINE","PLEURA","bLineColor","pleuraColor","drawDepthGuide","depth_ratio","depthGuideColor","depthGuideThickness","depthGuideDashLength","depthGuideDashGap","depthGuideOpacity","fanOpacity","showFanAnnotations","updatePercentageCallback","pleuraAnnotations","bLineAnnotations","annotationType","getActiveAnnotationType","allPointsInsideShape","newPoint","isInsideFanShape","getFanShapeGeometryParameters","fanCenter","indexToCanvasRatio","getIndexToCanvasRatio","unMergedPleuraIntervals","mergedPleuraIntervals","pleuraIntervalsDisplayed","bLineIntervalsDisplayed","drawAnnotation","getColorForLineType","lineInterval","fanNumber","interval","clippedInterval","fanDataId","fanUID","drawFan","pleuraAnnotationsToDraw","bLineAnnotationsToDraw","calculateBLinePleuraPercentage","activeAnnotationType","filterAnnotations","filterFunction","countAnnotations","getImageIdIndex","annotationMapping","counts","bLine","pleura","deleteAnnotations","setActiveAnnotationType","deleteLastAnnotationType","annotationList","updateFanGeometryConfiguration","isFanShapeGeometryParametersValid","deriveFanGeometryFromViewport","pleuraIntervals","bLineIntervals","diffVector","radToDegree","rad","degreeToRad","indexToCanvas","depth_radius","theta_start","theta_range","arc_length","num_dashes","theta_step","theta1","theta2","start_point","end_point","strokeOpacity","KeyImageTool","dataSeries","seriesLevel","dataPoint","isPoint","canvasPosition","setPoint","AnnotationEraserTool","_deleteNearbyAnnotations","toolGroup","tools","_toolInstances","annotationsToRemove","interactableAnnotations","setAnnotationSelected","getAnnotation","createAnnotationMemo","deleting","RegionSegmentTool","GrowCutBaseTool","isPartialVolume","positiveSeedVariance","negativeSeedVariance","currentWorldPoint","growCutData","circleBorderPoint","runGrowCut","circleCenterPoint","getGrowCutLabelmap","segmentation","sphereInfo","growCut","segmentationData","canvasCenterPoint","canvasBorderPoint","vecCenterToBorder","getSegmentStyle","segmentIndex","RegionSegmentPlusTool","subVolumePaddingPercentage","islandRemoval","mouseTimer","allowedToProceed","cursor","clearTimeout","onMouseStable","mouseStabilityDelay","refVolume","seeds","positiveSeedIndices","negativeSeedIndices","requestAnimationFrame","worldIslandPoints","getRemoveIslandData","mergedOptions","NEGATIVE_PIXEL_RANGE","POSITIVE_PIXEL_RANGE","ISLAND_PIXEL_RANGE","WholeBodySegmentTool","positivePixelRange","negativePixelRange","islandPixelRange","_getHorizontalLineWorldPoints","horizontalLines","worldLine1P1","worldLine1P2","worldLine2P1","worldLine2P2","worldSquarePoints","worldTopLeft","worldBottomRight","_getWorldBoundingBoxFromProjectedSquare","boundingBoxInfo","ijkBottomRight","positiveSeedValue","negativeSeedValue","labelmapVolumeId","labelmapVolume","referencedVolumeData","labelmapData","islandPointIndexes","pixelValue","_projectWorldPointAcrossSlices","worldEdgePoint","vecDirection","_getViewportVolume","ijkLineP1","ijkLineP2","_getCuboidIJKEdgePointsFromProjectedWorldPoint","_getWorldCuboidCornerPoints","cuboidPoints","worldSquarePoint","worldEdgePoints","worldCuboidPoints","_getHorizontalLineIJKPoints","ijkPoint1","ijkPoint2","RectangleScissorsTool","LabelmapBaseTool","strategies","FILL_INSIDE","ERASE_INSIDE","defaultStrategy","activeStrategy","activeLabelmapSegmentation","activeSegmentation","segmentsLocked","segmentLocking","segmentColor","representationData","getSegmentation","segmentationImageId","getCurrentLabelmapImageIdForViewport","operationData","applyActiveStrategy","toolMetadata","CircleScissorsTool","SphereScissorsTool","activeSegmentationRepresentation","getEditData","CircleROIStartEndThresholdTool","numSlicesToPropagate","calculatePointsInsideVolume","showTextBox","throttleTimeout","spacingInNormal","startCoord","_getStartCoordinate","endCoord","_getEndCoordinate","startCoordinate","endCoordinate","pointsInVolume","projectionPoints","statistics","labelmapUID","_computeProjectionPoints","_computePointsInsideVolume","filterAnnotationsWithinSamePlane","viewplaneNormal","tempStartCoordinate","tempEndCoordinate","_getCoordinateForViewplaneNormal","roundedStartCoordinate","roundedEndCoordinate","cameraCoordinate","roundedCameraCoordinate","middleCoordinate","isMiddleSlice","_getIndexOfCoordinatesForViewplaneNormal","lineWidthToUse","lineDashToUse","_calculateCachedStatsTool","startIJK","endIJK","handlesToStart","startWorld","indexToWorldVec3","endWorld","projectionAxisIndex","newProjectionPoints","basePoints","pointsInsideVolume","measureInfo","modalityUnitOptions","worldPos1Index","worldProjectionPointIndex","indexOfProjection","worldPos2Index","numSlicesToPropagateFromStart","numSlicesToPropagateToEnd","endPos","viewplaneNormalAbs","pos","_context","PaintFillTool","currentSegmentationImageId","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","flooded","scalarDataIndex","setAtIndex","framesModified","getFramesModified","triggerSegmentationDataModified","boundaries","minJ","maxJ","seedIndex3D","getAtIJK","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","getScalarDataPosition","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","OverlayMarkerType","OrientationMarkerTool","CUBE","AXIS","VTPFILE","OVERLAY_MARKER_TYPES","orientationWidget","viewportCorner","Corners","BOTTOM_RIGHT","viewportSize","minPixelSize","maxPixelSize","overlayMarkerType","ANNOTATED_CUBE","overlayConfiguration","faceProperties","xPlus","faceColor","faceRotation","xMinus","yPlus","fontColor","yMinus","zPlus","zMinus","defaultStyle","fontStyle","fontSizeScale","res","edgeThickness","edgeColor","AXES","CUSTOM","polyDataURL","initViewports","_subscribeToViewportEvents","cleanUpData","orientationMarker","orientationMarkers","updateViewport","updatingOrientationMarker","unsubscribe","unobserve","setEnabled","offscreenMultiRenderWindow","getRenderWindow","widget","getWidget","isDeleted","addAxisActorInViewport","getRenderer","removeActor","createAnnotationCube","createCustomActor","renderer","renderWindow","interactor","getInteractor","parentRenderer","setViewportCorner","setViewportSize","setMinPixelSize","setMaxPixelSize","updateMarkerOrientation","addWidget","url","response","fetch","arrayBuffer","vtpReader","parseAsArrayBuffer","shallowCopy","setActiveScalars","setInputData","setColorModeToDirectScalars","setMapper","rotateZ","setDefaultStyle","setXPlusFaceProperty","setXMinusFaceProperty","setYPlusFaceProperty","setYMinusFaceProperty","setZPlusFaceProperty","setZMinusFaceProperty","createAnnotatedCubeActor","axes","annotatedCube","methodName","charAt","toUpperCase","SegmentSelectTool","SelectMode","Inside","Border","hoverTimeout","searchRadius","hoverTimer","_setActiveSegment","getActiveSegmentation","_setActiveSegmentForType","hoveredSegmentIndex","getSegmentIndexAtWorldPoint","getSegmentIndexAtLabelmapBorder","Contour","getHoveredContourSegmentationAnnotation","Surface","setActiveSegmentIndex","triggerSegmentationModified","SegmentBidirectionalTool","BidirectionalTool","getSegmentIndexColor","dataId1","dataId2","secondLineUID","toolAnnotations","existingAnnotation","majorAxis","minorAxis","major0","major1","minor0","minor1","SegmentLabelTool","_setHoveredSegment","_setHoveredSegmentForType","_editData","hoveredSegmentLabel","LabelMapEditWithContourTool","PlanarFreehandContourSegmentationTool","annotationsToViewportMap","viewportIdsChecked","allowOpenContours","onViewportAddedToToolGroupBinded","onViewportAddedToToolGroup","onSegmentationModifiedBinded","onSegmentationModified","annotationModified","SEGMENTATION_MODIFIED","cleanUpListeners","checkContourSegmentation","activeSeg","representations","getSegmentationRepresentation","BrushTool","viewportContoursToLabelmap","VideoRedactionTool","toolConfiguration","viewportUIDsToRender","toolDataCanvasCoordinate","rect","_getRectangleImageCoordinates","rectangle","active","drawRedactionRect","point0","viewportUID","renderingEngineUID","sceneUID","targetUIDs","targetUID","_getImageVolumeFromTargetUID","worldToIndexVec3","iMin","iMax","jMin","jMax","kMin","kMax","yMultiple","zMultiple","valueMinusMean","_getTargetVolumeUID","scene","volumeUID","getVolumeActors","coloneIndex","_getTargetStackUID","Dir","visited","DEFAULT_VALUES","publicAPI","model","initialValues","arguments","m","algo","requestData","inData","outData","output","extractContours","traverseLoop","pd","startLineId","startPtId","loopPoints","lineId","lastPtId","terminated","numInserted","cellPointIds","getCellPoints","ptId","lineCell","getPointCells","loops","inLines","setData","li","getNumberOfCells","outLines","insertNextCell","vtkContourLoopExtraction","newInstance","projectTo2D","geometricSurfaceUtils","checkStandardBasis","rotatePoints","getBoundingBoxAroundShapeWorld","isPlaneIntersectingAABB","polySegConverters","polySeg","polySegInitializing","polySegInitializingPromise","initializePolySeg","progressCallback","ICRPolySeg","moduleId","peerImport","default","initialize","updateProgress","convertContourToSurface","args","callbacks","polylines","numPointsArray","convertContourRoiToSurface","convertLabelmapToSurface","results","rotationInfo","isStandard","rotatedPoints","rotationMatrix","convertContourToVolumeLabelmap","segmentIndices","annotationUIDsInSegmentMap","segmentationVoxelManager","createScalarVolumeVoxelManager","setDimensions","setOrigin","setDirection","setSpacing","scalarArray","setScalars","holesPolyline","projectedPolyline","sharedDimensionIndex","holes","hole","projectedHole","firstDim","secondDim","pointIJK","setAtIJKPoint","point2D","convertContourToStackLabelmap","segmentationsInfo","segmentationVoxelManagers","segmentationInfo","manager","convertSurfaceToVolumeLabelmap","convertSurfaceToLabelmap","polys","convertSurfacesToVolumeLabelmap","segmentsInfo","promises","all","targetImageData","totalSize","outputVolumesInfo","extent","roundedIndex","getSurfacesAABBs","surfacesInfo","aabbs","numDimensions","cutSurfacesIntoPlanes","planesInfo","surfacesAABB","updateCacheCallback","numberOfPlanes","cutter","plane1","setCutFunction","surfacePolyData","planeInfo","sliceIndex","planes","polyDataResults","polyDataInfo","aabb3","getPolys","setNormal","getNumberOfPoints","cutterOutput","buildLinks","loopExtraction","loopOutput","lines","numberOfCells","loopError","progress","VIEWPORT_ELEMENT","getSvgNode","canvasHash","cacheKey","svgNodeCache","domRef","appendNode","svgLayerElement","svgNode","touched","setNodeTouched","clearUntouched","cacheEntry","internalDivElement","_getSvgLayer","svgNodeCacheForCanvas","fn","strokeWidth","svgNodeHash","existingCircleElement","attributes","stroke","newCircleElement","createElementNS","existingEllipse","rx","ry","svgEllipseElement","linkUID","annotationAnchorPoints","refPoint","findClosestPoint","boundingBoxPoints","halfWidth","halfHeight","_boundingBoxPoints","centering","canvasBoundingBox","midX","endfirstLine","endsecondLine","threeLine","zIndex","_getHash","existingFanElement","startRad","endRad","centerX","centerY","outerStartX","outerStartY","outerEndX","outerEndY","innerStartX","innerStartY","largeArcFlag","pathData","setAttributesIfNecessary","newFanElement","setNewAttributesIfValid","svgns","headLength","legacyDrawArrow","markerFullId","defs","arrowMarker","arrowPath","markerEndId","_width","existingRect","svgRectElement","Swipe","renderers","planarContourToolName","triggerSegmentationRender","segmentationRenderingEngine","renderSegmentationsForViewport","_needsRender","_animationFrameSet","_animationFrameHandle","_getAllViewports","_renderFlaggedSegmentations","_throwIfDestroyed","_triggerRender","_getViewportIdsForSegmentation","_setViewportsToBeRenderedNextFrame","renderSegmentation","segmentationRepresentations","_render","viewportRenderList","segmentationRenderList","representation","_addPlanarFreeHandToolIfAbsent","allSettled","segmentationDetails","status","onSegmentationRender","SEGMENTATION_RENDERED","hasTool","addTool","initialDefaultState","colorLUT","segmentations","viewportSegRepresentations","internalComputeVolumeLabelmapFromStack","segmentationImageIds","volumeLoader","internalConvertStackToVolumeLabelmap","defaultSegmentationStateManager","getDefaultRenderingConfig","_stackLabelmapImageIdReferenceMap","_labelmapImageIdReferenceMap","freeze","getState","updateState","updater","newState","getColorLUT","lutIndex","getNextColorLUTIndex","resetState","updateSegmentation","draftState","addSegmentation","newSegmentation","getLabelmapImageIds","removeSegmentation","filteredSegmentations","triggerSegmentationRemoved","addSegmentationRepresentation","renderingConfig","getSegmentationRepresentations","setRenderInactiveSegmentations","addDefaultSegmentationRepresentation","addLabelmapRepresentation","triggerSegmentationRepresentationModified","segmentReps","colorLUTIndex","_setActiveSegmentation","processLabelmapRepresentationAddition","isBaseVolumeSegmentation","updateLabelmapSegmentationImageReferences","_updateLabelmapSegmentationReferences","labelmapImageIds","updateCallback","referenceImageId","viewableLabelmapImageIdFound","labelmapImageId","isReferenceViewable","asOverlay","_updateLabelmapImageIdReferenceMap","_updateAllLabelmapSegmentationImageReferences","withNavigation","getLabelmapImageIdsForImageId","_generateMapKey","getCurrentLabelmapImageIdsForViewport","getStackSegmentationImageIdsForViewport","associatedReferenceImageAndLabelmapImageIds","removeSegmentationRepresentationsInternal","specifier","removedRepresentations","currentRepresentations","activeRepresentationRemoved","shouldRemove","removeSegmentationRepresentations","triggerSegmentationRepresentationRemoved","remainingRepresentations","removeSegmentationRepresentation","suppressEvent","currentValues","newValues","setActiveSegmentation","activeSegRep","segRep","viewportRepresentations","typeMatch","idMatch","getSegmentationRepresentationVisibility","viewportRepresentation","setSegmentationRepresentationVisibility","addColorLUT","removeColorLUT","_getStackIdForImageIds","getAllViewportSegmentationRepresentations","getSegmentationRepresentationsBySegmentationId","viewportReps","filteredReps","segmentationStyle","global","viewportsStyle","setStyle","styles","currentStyles","updatedStyles","copyActiveToInactiveIfNotProvided","renderInactiveSegmentations","repConfig","perSegment","allSegments","ALL_SEGMENTATIONS_KEY","segConfig","processedStyles","labelmapStyles","renderOutlineInactive","renderOutline","outlineWidthInactive","outlineWidth","renderFillInactive","renderFill","fillAlphaInactive","fillAlpha","outlineOpacityInactive","outlineOpacity","contourStyles","outlineDashInactive","outlineDash","combinedStyle","getDefaultStyle","allSegmentationsKey","getRenderInactiveSegmentations","clearSegmentationStyle","clearAllSegmentationStyles","clearViewportStyle","clearAllViewportStyles","resetToGlobalStyle","hasCustomStyle","segmentationStateManager","indexToUse","colorLUTToUse","missingColorLUTs","segmentationInputArray","segmentationInput","addContourRepresentationToViewport","contourInputArray","inputData","contourData","geometryIds","annotationUIDsMap","normalizedSegments","segmentsConfig","rest","normalizedSegment","surfaceData","geometryId","geometry","getGeometry","normalizeSurfaceSegments","normalizeSegments","addSegmentations","setColorLUT","colorLUTsIndex","segmentationRepresentation","colorValue","setSegmentIndexColor","colorReference","modifiedSlicesToUse","SEGMENTATION_DATA_MODIFIED","getSegmentations","getViewportSegmentations","getViewportSegmentationRepresentations","convertVolumeToStackLabelmap","segmentationVolume","computeVolumeLabelmapFromStack","internalAddSegmentationRepresentation","representationInput","getColorLUTIndex","colorLUTOrIndex","parse","rep","removeAllSegmentations","immediate","_removeSegmentationRepresentations","labelmapDisplay","contourDisplay","removeRepresentation","surfaceDisplay","_removeRepresentationObject","removeAllSegmentationRepresentations","removeLabelmapRepresentation","removeContourRepresentation","removeSurfaceRepresentation","isSegmentIndexLocked","setSegmentIndexLocked","getLockedSegmentIndices","destroy","re","toolGroupFilteredByIds","tg","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","canvasCoordPoints","shortAxisDistFromCenter","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos4","index3","index4","handles1","handles2","scale1","scale2","widthUnit","vector1","vector2","renderResult","pointCanProjectOnLine","PlanarFreehandROITool","alwaysRenderOpenContourHandles","closeContourProximity","checkCanvasEditFallbackProximity","makeClockWise","subPixelResolution","smoothing","smoothOnAdd","smoothOnEdit","knotsRatioPercentageOnAdd","knotsRatioPercentageOnEdit","displayOnePointAsCrosshairs","isEditingClosed","isEditingOpen","activateDraw","activateOpenContourEndEdit","activateClosedContourEdit","activateOpenContourEdit","previousPoint","pStart","pEnd","cancelDrawing","cancelOpenContourEdit","cancelClosedContourEdit","calibratedScale","numPoints","updateClosedCachedStats","updateOpenCachedStats","annotationsToDisplay","filterAnnotationsWithinSlice","filterAnnotationsForDisplay","annotationsWithParallelNormals","td","annotationViewPlaneNormal","vector","annotationsWithinSlice","renderContourBeingDrawn","renderClosedContourBeingEdited","renderOpenContourBeingEdited","renderPointContourWithMarker","renderContour","_calculateStatsIfActive","worldPosIndex","worldPosIndex2","iDelta","jDelta","kDelta","ceil","worldPosEnd","canvasPosEnd","curRow","intersections","intersectionCounter","_pointIJK","getLineSegmentIntersectionsCoordinates","shift","RectangleROITool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","THRESHOLD_INSIDE_CIRCLE","THRESHOLD_INSIDE_SPHERE","THRESHOLD_INSIDE_SPHERE_WITH_ISLAND_REMOVAL","brushSize","useCenterSegmentIndex","preview","previewColors","previewTimeMs","previewMoveDistance","dragMoveDistance","dragTimeMs","StrategyCallbacks","AcceptPreview","RejectPreview","Interpolate","useBallStructuringElement","noUseDistanceTransform","noUseExtrapolation","interpolateExtrapolation","createEditData","_previewData","isDrag","timerStart","Date","now","hoverData","_hoverData","createHoverData","getOperationData","applyActiveStrategyCallback","OnInteractionStart","timer","time","rejectPreview","previewCallback","strategyData","strategy","Preview","OnInteractionEnd","acceptPreview","_calculateCursor","viewRight","centerCursorInWorld","bottomCursorInWorld","topCursorInWorld","leftCursorInWorld","rightCursorInWorld","brushCursor","computeInnerCircleRadius","GetStatistics","interpolate","invalidateBrushCursor","getActiveSegmentationData","brushCursorUID","centerSegmentIndexInfo","dynamicRadiusInCanvas","circleUID1","previewData","NaN","memoMap","acceptedMemoIds","hasSegmentIndex","hasPreviewIndex","changedIndices","_historyRedoHandler","memoData","voxelManagerId","redoVoxelManager","ERROR_EVENT","message","cancelable","actors","volumes","referencedVolumeIdToThreshold","activeRepresentation","configColor","previewColor","previewSegmentIndex","factor","lightenColor","previewOnHover","addPreview","acceptReject","AddPreview","removeContours","viewAnnotations","contourAnnotations","fillInsideCircle","previewVoxels","segmentationVoxels","sourceVoxelManager","bound","activeIndex","startIndex","startValue","hasZeroIndex","hasPositiveIndex","polyPoint","polyIndex","polyValue","isPointInsidePolyline3D","setAtIJK","slices","getArrayOfModifiedSlices","initializeCircle","Initialize","segmentationImageData","centerIJK","circleCornersIJK","getBoundingBoxAroundShapeIJK","createPointInEllipse","isInObjectBoundsIJK","worldInfo","sphereObj","radius2","precalculated","precalculatePointInEllipse","CIRCLE_STRATEGY","regionFill","setValue","determineSegmentIndex","labelmapStatistics","CIRCLE_THRESHOLD_STRATEGY","dynamicThreshold","strategyFunction","thresholdInsideCircle","initializeRectangle","imageVoxelManager","pointInShapeFn","rectangleCornersIJK","coord","isStackViewport","isAligned","getSpacing","EPS","pointsBoundsLPS","xMin","xMax","yMin","yMax","zMin","zMax","createPointInRectangle","RECTANGLE_STRATEGY","RECTANGLE_THRESHOLD_STRATEGY","fillInsideRectangle","getClosestImageIdForStackViewport","ImagePositionPatient","calculateDistanceToImage","numSlicesToProject","sliceNormalIndex","DEFAULT_CONTOUR_SEG_TOOL_NAME","removeContourSegmentationAnnotation","endPointWorld","originalToolName","interpolationUID","interpolationCompleted","addContourSegmentationAnnotation","closestDistance","testIndex","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","useRAF","TypeError","invokeFunc","thisArg","startTimer","pendingFunc","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeSinceLastInvoke","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","Boolean","cancelAnimationFrame","cancelTimer","flush","pending","annotationCanvasPoints","handlesLeftToRight","_compareX","handlesTopToBottom","_compareY","_determineCorners","PIXEL_UNITS","VOXEL_UNITS","SUPPORTED_REGION_DATA_TYPES","SUPPORTED_LENGTH_VARIANT","SUPPORTED_PROBE_VARIANT","UNIT_MAPPING","SQUARE","getCalibratedLengthUnitsAndScale","hasPixelSpacing","volumeUnit","calibrationType","sequenceOfUltrasoundRegions","UNCALIBRATED","regions","region","regionLocationMinX0","regionLocationMaxX1","regionLocationMinY0","regionLocationMaxY1","regionDataType","physicalUnitsXDirection","physicalUnitsYDirection","physicalDeltaX","physicalDeltaY","USER","ERROR","getCalibratedProbeUnitsAndValue","supportedRegionsMetadata","referencePixelX0","referencePixelY0","yValue","getCalibratedAspect","_getSphereBoundsInfo","circlePoints","directionVectors","radiusWorld","rowCosine","columnCosine","vecNormal","topLeftIJK","bottomRightIJK","pointsIJK","_computeBoundsIJK","getSphereBoundsInfo","scanAxis","getSphereBoundsInfoFromViewport","getViewportForAnnotation","pointInSphere","sphere","interpolateSegmentPoints","iniIndex","endIndex","knotsRatioPercentage","amountOfKnots","minKnotDistance","interpolationIniIndex","interpolationEndIndex","segmentPointsUnchangedBeg","segmentPointsUnchangedEnd","knotsIndexes","minDistributionDistance","closedInterval","intervalIni","intervalEnd","intervalSize","continuosDistributionValue","getContinuousUniformDistributionValues","axisList","isAxisAlignedRectangle","rectangleVec1","rectangleVec2","calculateAnglesWithAxes","vec","SegmentStatsCalculator","calculators","indices","statsInit","statsData","calculator","lpad","string","character","seed","onBoundary","equals","startNode","permutations","perms","permutation","permute","perm","countNonZeroes","prunedPermutations","visits","currentArgs","job","getArgs","prevArgs","previousArgs","iKey","markAsVisited","member","markAsFlooded","nextArgs","pushAdjacent","markAsBoundary","getBrushToolInstances","toolInstances","annotationUIDs","indexIJK","onEdge","getNeighborIndex","deltaI","deltaJ","neighborCanvas","isSegmentOnEdge","isSegmentOnEdgeCanvas","segmentationActorEntry","deltaK","neighborIJK","isSegmentOnEdgeIJK","neighborRange","neighborIndex","desiredRepresentation","representationType","getScalarValueFromWorld","getSegmentIndexAtWorldForLabelmap","annotationsSet","getSegmentIndexAtWorldForContour","WEBGPU_MEMORY_LIMIT","DEFAULT_GROWCUT_OPTIONS","windowSize","maxProcessingTime","inspection","numCyclesInterval","numCyclesBelowThreshold","referenceVolumeId","workGroupSize","labelmap","numIterations","volumePixelData","requiredLimits","maxStorageBufferBindingSize","maxBufferSize","adapter","navigator","gpu","requestAdapter","device","requestDevice","BUFFER_SIZE","UPDATED_VOXELS_COUNTER_BUFFER_SIZE","Uint32Array","BYTES_PER_ELEMENT","BOUNDS_BUFFER_SIZE","Int32Array","shaderModule","createShaderModule","code","paramsArrayValues","gpuParamsBuffer","createBuffer","usage","GPUBufferUsage","UNIFORM","COPY_DST","gpuVolumePixelDataBuffer","STORAGE","queue","writeBuffer","gpuLabelmapBuffers","COPY_SRC","gpuStrengthBuffers","gpuCounterBuffer","gpuBoundsBuffer","initialBounds","bindGroupLayout","createBindGroupLayout","binding","GPUShaderStage","COMPUTE","bindGroups","outputLabelmapBuffer","outputStrengthBuffer","previouLabelmapBuffer","previousStrengthBuffer","createBindGroup","layout","resource","pipeline","createComputePipeline","createPipelineLayout","bindGroupLayouts","compute","module","entryPoint","constants","workGroupSizeX","workGroupSizeY","workGroupSizeZ","numWorkGroups","gpuUpdatedVoxelsCounterStagingBuffer","MAP_READ","limitProcessingTime","performance","currentInspectionNumCyclesInterval","belowThresholdCounter","commandEncoder","createCommandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","copyBufferToBuffer","submit","finish","mapAsync","GPUMapMode","READ","updatedVoxelsCounterResultBuffer","getMappedRange","updatedVoxelsRatio","unmap","outputLabelmapBufferIndex","labelmapStagingBuffer","boundsStagingBuffer","labelmapResultBuffer","labelmapResult","boundsResultBuffer","boundsResult","clearBounds","setBounds","POSITIVE_SEED_VALUE","NEGATIVE_SEED_VALUE","_createAndCacheSegmentationSubVolumeForBoundingBox","subVolPixelData","startSliceIndex","stopSliceIndex","pixelsPerSlice","zOffset","_setPositiveSeedValues","sliceOffset","bfs","slicePixelIndex","volumeVoxelIndex","volumeVoxelValue","scanLine","limitX","incX","_setNegativeSeedValues","runGrowCutForBoundingBox","subVolumeBoundsIJK","POSITIVE_SEED_VARIANCE","NEGATIVE_SEED_VARIANCE","vecColumn","sphereCenterPoint","sphereRadius","refVolImageData","topCirclePoint","bottomCirclePoint","sphereBoundsInfo","_getGrowCutSphereBoundsInfo","_createAndCacheSegmentationSubVolumeForSphere","refVolumePixelData","worldStartPos","ijkStartPosition","referencePixelValue","positiveSeedVarianceValue","minPositivePixelValue","maxPositivePixelValue","neighborsCoordDelta","startVoxelIndex","ijkVoxel","neighborCoordDelta","nz","neighborVoxelIndex","neighborPixelValue","getAtIndex","ijkSphereCenter","negativeSeedVarianceValue","minNegativePixelValue","maxNegativePixelValue","rotationAngle","worldQuat","vecRotation","worldCircleBorderPoint","ijkCircleBorderPoint","runGrowCutForSphere","sphereBoundsIJK","_createSubVolumeFromSphere","MAX_POSITIVE_SEEDS","calculateGrowCutSeeds","refImageData","referenceVolumeVoxelManager","neighborhoodRadius","initialNeighborhoodRadius","positiveK","positiveStdDevMultiplier","negativeK","negativeStdDevMultiplier","negativeSeedMargin","negativeSeedsTargetPatches","ijkStart","initialStats","positiveIntensityMin","positiveIntensityMax","currentQueueIndex","neighborValue","positiveSum","positiveSumSq","positiveCount","positiveMean","positiveVariance","negativeDiffThreshold","minXm","minYm","minZm","maxXm","maxYm","maxZm","attempts","patchesAdded","maxAttempts","rz","centerValue","patchContributed","runOneClickGrowCut","positiveSeedLabel","negativeSeedLabel","tool","getViewportsInfo","getDeltaPoints","curr","getMeanPoints","_subtractPoints2D","getDeltaDistance","_getDistance2D","_getDistance3D","getDeltaDistanceBetweenIPoints","_getMeanDistanceBetweenAllIPoints","lastDistance","copyPointsList","copyPoints","getMeanTouchPoints","touch","identifier","radiusX","radiusY","force","pairedDistance","triggerAnnotationRenderForToolGroupIds","toolGroupIds","DesiredOutputPrecision","DEFAULT","SINGLE","DOUBLE","Constants","AttributeCopyOperations","COPYTUPLE","INTERPOLATE","PASSDATA","ALLCOPY","AttributeLimitTypes","MAX","EXACT","NOLIMIT","AttributeTypes","SCALARS","VECTORS","NORMALS","TCOORDS","TENSORS","GLOBALIDS","PEDIGREEIDS","EDGEFLAG","NUM_ATTRIBUTES","CellGhostTypes","DUPLICATECELL","HIGHCONNECTIVITYCELL","LOWCONNECTIVITYCELL","REFINEDCELL","EXTERIORCELL","HIDDENCELL","PointGhostTypes","DUPLICATEPOINT","HIDDENPOINT","ghostArrayName","vtkErrorMacro","dataDescription","EMPTY","Float64Array","setGetArray","getArray","classHierarchy","setExtent","deleted","_len","inExtent","_key","extentArray","changeDetected","dims","nCells","SINGLE_POINT","X_LINE","Y_LINE","Z_LINE","XY_PLANE","YZ_PLANE","XZ_PLANE","XYZ_GRID","coords","getBounds","getSpatialExtent","ex","computeTransforms","ain","aout","indexToWorldBounds","bin","bout","worldToIndexBounds","onModified","getCenter","computeHistogram","worldBounds","voxelFunction","yStride","zStride","pixels","maximum","minimum","sumOfSquares","isum","inum","average","sigma","computeIncrements","increments","incr","computeOffsetIndex","_ref","getNumberOfComponents","getOffsetIndexFromWorld","offsetIndex","getComponent","vtkImageData$1","ColorSpace","Scale","ScalarMappingTarget","vtkDebugMacro","vtkWarningMacro","vtkColorTransferFunctionLabToMsh","lab","msh","L","M","vtkColorTransferFunctionAdjustHue","unsatM","hueSpin","vtkColorTransferFunctionInterpolateDiverging","rgb1","rgb2","lab1","lab2","msh1","msh2","localS","adiff","vtkColorTransferFunctionAngleDiff","Mmid","mshTmp","labTmp","vtkColorTransferFunctionMshToLab","clamping","colorSpace","RGB","hSVWrap","nanColor","belowRangeColor","aboveRangeColor","useAboveRangeColor","useBelowRangeColor","allowDuplicateScalars","tableSize","buildTime","discretize","numberOfValues","setGet","enum","setArray","addRGBPointLong","sharpness","removePoint","sortAndUpdateRange","addHSVPoint","addHSVPointLong","rgb","hsv","setNodes","before","after","modifiedInvoked","updateRange","oldRange","mappingRange","retVal","movePoint","oldX","newX","addRGBSegment","r1","g1","r2","g2","addHSVSegment","h1","s1","h2","hsv1","hsv2","mapValue","indexedLookup","numNodes","getAnnotatedValueIndexInternal","getNanColorByReference","nodeVal","getRedValue","getGreenValue","getBlueValue","xStart_","xEnd_","xStart","xEnd","lastR","lastG","lastB","tmpVec","usingLogScale","LOG10","logStart","logEnd","logX","log10","tidx","deltaRange","xn","discretizeIndex","getUseAboveRangeColor","getUseBelowRangeColor","HSV","hsvTmp","LAB","DIVERGING","ss","sss","h3","h4","getUint8Table","withAlpha","getMTime","tableWithAlpha","nbChannels","tmpTable","numComponents","getNumberOfTuples","buildFunctionFromTable","getNumberOfAvailableColors","nNodes","getIndexedColor","nodeValue","fillFromDataPointer","nb","ptr","originalRange","adjustRange","functionRange","estimateMinNumberOfSamples","findMinimumXDistance","currentDist","mapScalarsThroughTable","outFormat","inputOffset","mapDataIndexed","alpha","getAlpha","inIncr","outputV","inputV","RGBA","LUMINANCE","LUMINANCE_ALPHA","colorMap","oldColorSpace","isModified","oldNanColor","NanColor","oldNodes","callModified","vtkColorTransferFunction","vtkColorTransferFunction$1","out","fromValues","copy","subtract","multiply","divide","scaleAndAdd","squaredDistance","squaredLength","negate","inverse","normalize","bx","by","bz","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","rotateX","rotateY","mag","cosine","zero","exactEquals","a0","b0","mul","div","sqrDist","sqrLen","stride","arg","l","zip","interpolator","samples"],"sourceRoot":""}