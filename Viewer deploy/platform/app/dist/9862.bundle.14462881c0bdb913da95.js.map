{"version":3,"file":"9862.bundle.14462881c0bdb913da95.js","mappings":"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","sources":["webpack:///../../../extensions/measurement-tracking/src/viewports/TrackedCornerstoneViewport.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { ViewportActionArrows } from '@ohif/ui-next';\r\nimport { OHIFCornerstoneViewport } from '@ohif/extension-cornerstone';\r\n\r\nimport { annotation } from '@cornerstonejs/tools';\r\nimport { useTrackedMeasurements } from './../getContextModule';\r\nimport { BaseVolumeViewport, Enums } from '@cornerstonejs/core';\r\nimport { useSystem } from '@ohif/core';\r\n\r\nfunction TrackedCornerstoneViewport(\r\n  props: withAppTypes<{ viewportId: string; displaySets: AppTypes.DisplaySet[] }>\r\n) {\r\n  const { servicesManager } = useSystem();\r\n  const { displaySets, viewportId } = props as {\r\n    displaySets: AppTypes.DisplaySet[];\r\n    viewportId: string;\r\n    servicesManager: AppTypes.Services;\r\n  };\r\n\r\n  const { measurementService, cornerstoneViewportService, viewportGridService, toolbarService } =\r\n    servicesManager.services;\r\n\r\n  // Todo: handling more than one displaySet on the same viewport\r\n  const displaySet = displaySets[0];\r\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\r\n\r\n  const [isTracked, setIsTracked] = useState(false);\r\n  const [trackedMeasurementUID, setTrackedMeasurementUID] = useState(null);\r\n  const [viewportElem, setViewportElem] = useState(null);\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  const { SeriesInstanceUID } = displaySet;\r\n\r\n  const updateIsTracked = useCallback(() => {\r\n    const viewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\r\n\r\n    if (viewport instanceof BaseVolumeViewport) {\r\n      // A current image id will only exist for volume viewports that can have measurements tracked.\r\n      // Typically these are those volume viewports for the series of acquisition.\r\n      const currentImageId = viewport?.getCurrentImageId();\r\n\r\n      if (!currentImageId) {\r\n        if (isTracked) {\r\n          setIsTracked(false);\r\n        }\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (trackedSeries.includes(SeriesInstanceUID) !== isTracked) {\r\n      setIsTracked(!isTracked);\r\n    }\r\n  }, [isTracked, trackedMeasurements, viewportId, SeriesInstanceUID]);\r\n\r\n  const onElementEnabled = useCallback(\r\n    evt => {\r\n      if (evt.detail.element !== viewportElem) {\r\n        // The VOLUME_VIEWPORT_NEW_VOLUME event allows updateIsTracked to reliably fetch the image id for a volume viewport.\r\n        evt.detail.element?.addEventListener(\r\n          Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\r\n          updateIsTracked\r\n        );\r\n        setViewportElem(evt.detail.element);\r\n      }\r\n    },\r\n    [updateIsTracked, viewportElem]\r\n  );\r\n\r\n  const onElementDisabled = useCallback(() => {\r\n    viewportElem?.removeEventListener(Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME, updateIsTracked);\r\n  }, [updateIsTracked, viewportElem]);\r\n\r\n  useEffect(updateIsTracked, [updateIsTracked]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = cornerstoneViewportService.subscribe(\r\n      cornerstoneViewportService.EVENTS.VIEWPORT_DATA_CHANGED,\r\n      props => {\r\n        if (props.viewportId !== viewportId) {\r\n          return;\r\n        }\r\n\r\n        updateIsTracked();\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [updateIsTracked, viewportId]);\r\n\r\n  useEffect(() => {\r\n    if (isTracked) {\r\n      annotation.config.style.setViewportToolStyles(viewportId, {\r\n        ReferenceLines: {\r\n          lineDash: '4,4',\r\n        },\r\n        global: {\r\n          lineDash: '',\r\n        },\r\n      });\r\n\r\n      cornerstoneViewportService.getRenderingEngine().renderViewport(viewportId);\r\n\r\n      return;\r\n    }\r\n\r\n    annotation.config.style.setViewportToolStyles(viewportId, {\r\n      global: {\r\n        lineDash: '4,4',\r\n      },\r\n    });\r\n\r\n    cornerstoneViewportService.getRenderingEngine().renderViewport(viewportId);\r\n\r\n    return () => {\r\n      annotation.config.style.setViewportToolStyles(viewportId, {});\r\n    };\r\n  }, [isTracked]);\r\n\r\n  /**\r\n   * The effect for listening to measurement service measurement added events\r\n   * and in turn firing an event to update the measurement tracking state machine.\r\n   * The TrackedCornerstoneViewport is the best place for this because when\r\n   * a measurement is added, at least one TrackedCornerstoneViewport will be in\r\n   * the DOM and thus can react to the events fired.\r\n   */\r\n  useEffect(() => {\r\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\r\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\r\n    const subscriptions = [];\r\n\r\n    [added, addedRaw].forEach(evt => {\r\n      subscriptions.push(\r\n        measurementService.subscribe(evt, ({ source, measurement }) => {\r\n          const { activeViewportId } = viewportGridService.getState();\r\n\r\n          // Each TrackedCornerstoneViewport receives the MeasurementService's events.\r\n          // Only send the tracked measurements event for the active viewport to avoid\r\n          // sending it more than once.\r\n          if (viewportId === activeViewportId) {\r\n            const {\r\n              referenceStudyUID: StudyInstanceUID,\r\n              referenceSeriesUID: SeriesInstanceUID,\r\n              uid: measurementId,\r\n              toolName,\r\n            } = measurement;\r\n\r\n            sendTrackedMeasurementsEvent('SET_DIRTY', { SeriesInstanceUID });\r\n            sendTrackedMeasurementsEvent('TRACK_SERIES', {\r\n              viewportId,\r\n              StudyInstanceUID,\r\n              SeriesInstanceUID,\r\n              measurementId,\r\n              toolName,\r\n            });\r\n          }\r\n        }).unsubscribe\r\n      );\r\n    });\r\n\r\n    return () => {\r\n      subscriptions.forEach(unsub => {\r\n        unsub();\r\n      });\r\n    };\r\n  }, [measurementService, sendTrackedMeasurementsEvent, viewportId, viewportGridService]);\r\n\r\n  const switchMeasurement = useCallback(\r\n    direction => {\r\n      const newTrackedMeasurementUID = _getNextMeasurementUID(\r\n        direction,\r\n        servicesManager,\r\n        trackedMeasurementUID,\r\n        trackedMeasurements\r\n      );\r\n\r\n      if (!newTrackedMeasurementUID) {\r\n        return;\r\n      }\r\n\r\n      setTrackedMeasurementUID(newTrackedMeasurementUID);\r\n\r\n      measurementService.jumpToMeasurement(viewportId, newTrackedMeasurementUID);\r\n    },\r\n    [measurementService, servicesManager, trackedMeasurementUID, trackedMeasurements, viewportId]\r\n  );\r\n\r\n  const getCornerstoneViewport = () => {\r\n    return (\r\n      <OHIFCornerstoneViewport\r\n        {...props}\r\n        onElementEnabled={evt => {\r\n          props.onElementEnabled?.(evt);\r\n          onElementEnabled(evt);\r\n        }}\r\n        onElementDisabled={onElementDisabled}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\r\n      {getCornerstoneViewport()}\r\n    </div>\r\n  );\r\n}\r\n\r\nTrackedCornerstoneViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\r\n  viewportId: PropTypes.string.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n};\r\n\r\nfunction _getNextMeasurementUID(\r\n  direction,\r\n  servicesManager: AppTypes.ServicesManager,\r\n  trackedMeasurementId,\r\n  trackedMeasurements\r\n) {\r\n  const { measurementService, viewportGridService } = servicesManager.services;\r\n  const measurements = measurementService.getMeasurements();\r\n\r\n  const { activeViewportId, viewports } = viewportGridService.getState();\r\n  const { displaySetInstanceUIDs: activeViewportDisplaySetInstanceUIDs } =\r\n    viewports.get(activeViewportId);\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  // Get the potentially trackable measurements for the series of the\r\n  // active viewport.\r\n  // The measurements to jump between are the same\r\n  // regardless if this series is tracked or not.\r\n\r\n  const filteredMeasurements = measurements.filter(\r\n    m =>\r\n      trackedSeries.includes(m.referenceSeriesUID) &&\r\n      activeViewportDisplaySetInstanceUIDs.includes(m.displaySetInstanceUID)\r\n  );\r\n\r\n  if (!filteredMeasurements.length) {\r\n    // No measurements on this series.\r\n    return;\r\n  }\r\n\r\n  const measurementCount = filteredMeasurements.length;\r\n\r\n  const uids = filteredMeasurements.map(fm => fm.uid);\r\n  let measurementIndex = uids.findIndex(uid => uid === trackedMeasurementId);\r\n\r\n  if (measurementIndex === -1) {\r\n    // Not tracking a measurement, or previous measurement now deleted, revert to 0.\r\n    measurementIndex = 0;\r\n  } else {\r\n    measurementIndex += direction;\r\n    if (measurementIndex < 0) {\r\n      measurementIndex = measurementCount - 1;\r\n    } else if (measurementIndex === measurementCount) {\r\n      measurementIndex = 0;\r\n    }\r\n  }\r\n\r\n  const newTrackedMeasurementId = uids[measurementIndex];\r\n\r\n  return newTrackedMeasurementId;\r\n}\r\n\r\nconst _getArrowsComponent = (isTracked, switchMeasurement, isActiveViewport) => {\r\n  if (!isTracked) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ViewportActionArrows\r\n      onArrowsClick={direction => switchMeasurement(direction)}\r\n      className={isActiveViewport ? 'visible' : 'invisible group-hover/pane:visible'}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TrackedCornerstoneViewport;\r\n"],"names":["TrackedCornerstoneViewport","props","servicesManager","useSystem","displaySets","viewportId","measurementService","cornerstoneViewportService","viewportGridService","toolbarService","services","displaySet","trackedMeasurements","sendTrackedMeasurementsEvent","useTrackedMeasurements","isTracked","setIsTracked","useState","trackedMeasurementUID","setTrackedMeasurementUID","viewportElem","setViewportElem","trackedSeries","context","SeriesInstanceUID","updateIsTracked","useCallback","viewport","getCornerstoneViewport","BaseVolumeViewport","currentImageId","getCurrentImageId","includes","onElementEnabled","evt","detail","element","addEventListener","Enums","VOLUME_VIEWPORT_NEW_VOLUME","onElementDisabled","removeEventListener","useEffect","unsubscribe","subscribe","EVENTS","VIEWPORT_DATA_CHANGED","annotation","setViewportToolStyles","ReferenceLines","lineDash","global","getRenderingEngine","renderViewport","added","MEASUREMENT_ADDED","addedRaw","RAW_MEASUREMENT_ADDED","subscriptions","forEach","push","source","measurement","activeViewportId","getState","referenceStudyUID","StudyInstanceUID","referenceSeriesUID","uid","measurementId","toolName","unsub","direction","newTrackedMeasurementUID","trackedMeasurementId","measurements","getMeasurements","viewports","displaySetInstanceUIDs","activeViewportDisplaySetInstanceUIDs","get","filteredMeasurements","filter","m","displaySetInstanceUID","length","measurementCount","uids","map","fm","measurementIndex","findIndex","_getNextMeasurementUID","jumpToMeasurement","React","className","OHIFCornerstoneViewport","_extends","propTypes","PropTypes","isRequired","dataSource","children"],"sourceRoot":""}