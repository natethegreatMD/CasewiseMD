{"version":3,"file":"8740.bundle.caf905114579c4694161.js","mappings":"wJAMA,QANA,SAAuCA,EAAkBC,EAAsBC,GAC7E,MAAMC,EAAQF,EAAqBG,iBAAiB,oCAEpD,OAAOJ,EAAiBK,2BAA2BH,EAAaC,EAClE,E,eCqBA,QAvBA,UAA0B,gBACxBG,EAAe,cACfC,EAAa,WACbC,EAAU,oBACVC,EAAmB,gBACnBC,IAQA,OAAOC,EAAAA,MAAMC,sBAAsB,CACjCN,kBACAE,aACAK,WAAYN,EACZE,sBACAC,kBACAI,KAAM,OAEV,E,kPCwQA,QArRA,SAAoCC,GAClC,MAAM,gBAAET,EAAe,gBAAEU,IAAoBC,EAAAA,EAAAA,OACvC,SAAEC,EAAQ,YAAEC,EAAW,gBAAEC,GAAoBL,EAK7CP,EAAaY,EAAgBZ,YAE7B,kBAAEa,EAAiB,iBAAEC,EAAgB,oBAAEC,EAAmB,qBAAEtB,GAChEK,EAAgBkB,SAEZC,EAA+BxB,EAAqBG,iBACxD,mCAGIF,EAAc,gBAA8BM,IAGlD,GAAIW,EAAYO,OAAS,EACvB,MAAM,IAAIC,MAAM,sDAGlB,MAAMpB,EAAgBY,EAAY,IAC3BS,EAAcC,IAAuBC,EAAAA,EAAAA,QAGtC,wBAAEC,IAA4BC,EAAAA,EAAAA,iCAO7BC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAU5B,EAAc6B,WACzDC,EAAoBC,IAAyBH,EAAAA,EAAAA,UAAS,CAC3DI,gBAAiB,KACjBC,cAAe,OAIXC,GAA0BC,EAAAA,EAAAA,QAAO,OAEjC,UAAEC,EAAS,iBAAEC,GAAqBhB,EAElCiB,EAAkCtC,EAAcsC,gCAChDC,EAAuBzB,EAAkB0B,mBAC7CF,GAGIG,EAkMR,SAA0CF,EAAsBvC,GAC9D,MAAM,+BAAE0C,GAAmC1C,EAAc2C,SAEnDC,EAAwBC,MAAMC,QAAQJ,GACxCA,EAA+B,GAC/BA,GAEE,sBAAEK,GAA0BH,EAE5BI,EAAgBH,MAAMC,QAAQC,GAChCA,EAAsB,GACtBA,GAEE,qBAAEE,EAAoB,eAAEC,GAAmBF,EAE3CG,EAASZ,EAAqBa,OAAO,GACrCX,EAA+B,CACnCY,UAAWF,EAAOE,UAClBC,YAAaH,EAAOG,YACpBC,WAAYJ,EAAOI,WACnBC,WAAYL,EAAOK,WACnBN,eAAgBC,EAAOD,gBAAkBA,EACzCO,UAAWN,EAAOM,UAClBC,kBAAmBP,EAAOO,kBAC1BC,kBAAmBR,EAAOQ,kBAC1BC,aAAcT,EAAOS,aACrBC,sBAAuBV,EAAOU,sBAC9BZ,qBAAsBE,EAAOF,sBAAwBA,GAGvD,OAAOR,CACT,CAjOuCqB,CACnCvB,EACAvC,GAGFkC,EAAwB6B,QAAU,CAChCzD,WAAYiC,EACZyB,SAAUvB,GAGZ,MAAMwB,GAAyBC,EAAAA,EAAAA,aAAY,IAEvCC,EAAAA,cAACC,EAAAA,wBAAuBC,EAAA,GAClB7D,EAAK,CACTI,YAAa,CAACZ,GACda,gBAAiB,CACfyD,aAAczD,EAAgByD,aAC9B3E,YAAaA,EACb4E,YAAa1D,EAAgB0D,YAC7BtE,WAAYY,EAAgBZ,WAC5BuE,gBAAiB3D,EAAgB2D,iBAEnCC,iBAAkBC,IAChBlE,EAAMiE,mBAAmBC,OAI9B,CAACzE,EAAYD,EAAeL,EAAaa,EAAOK,KAEnD8D,EAAAA,EAAAA,WAAU,KACJjD,GAKAzB,IAAeoC,GAInBuC,EAAiB,CACf7E,kBACAE,aACAD,gBACAG,gBAAiB0E,gBACTpE,EAAgBqE,WAAW,6BAA8B,CAC7DxE,WAAYN,EACZC,gBAGK,MAGV,CAACF,EAAiBE,EAAYD,EAAe0B,EAAcjB,EAAiB4B,KAE/EsC,EAAAA,EAAAA,WAAU,KAER3D,EAAoB+D,iCAAiC9E,GAErD,MAAM,YAAE+E,GAAgBhE,EAAoBiE,UAC1CjE,EAAoBkE,OAAOC,8BAC3BT,IAKE,GAJIA,EAAI1E,cAAcoF,wBAA0BpF,EAAcoF,uBAC5DzD,GAAgB,GAGd3B,GAAeqF,4BAA8BxE,GAAiB2D,gBAAiB,CACjF,MAAM,2BAAEa,GAA+BrF,GACjC,gBAAEwE,GAAoB3D,EAE5BW,EAAwBgD,EAAgBc,uBAAwB,CAC9DC,cAAe,CACbC,kBAAmBH,IAGzB,IAIJ,MAAO,KACLL,MAED,CAAChF,KAEJ2E,EAAAA,EAAAA,WAAU,KACR,MAAM,YAAEK,GAAgBhE,EAAoBiE,UAC1CjE,EAAoBkE,OAAOO,yBAC3B,EAAGzD,kBAAiB0D,kBAClB3D,EAAsB,CACpBC,kBACAC,cAAeyD,MAKrB,MAAO,KACLV,MAED,CAAChF,KAKJ2E,EAAAA,EAAAA,WAAU,KACR,MAAMgB,EAAmC7E,EAAkBmE,UACzDnE,EAAkBoE,OAAOU,qBACzB,EAAGC,6BACD,MAAMC,EAAiB1D,EAAU2D,IAAI1D,GACjCwD,EAAuBG,SAASF,EAAeV,wBACjD9D,EAAoB2E,0BAA0B,CAC5ChG,WAAYoC,EACZwD,uBAAwB,OAMhC,MAAO,KACLF,EAAiCX,gBAElC,KAEHL,EAAAA,EAAAA,WAAU,KACR,IAAIuB,EAAYnF,EAAiBoF,aAAaxG,GAE9C,IAAIuG,EAmBJ,OAbAzF,EAAgBqE,WAAW,uCAAwC,CACjExE,WAAYN,EACZO,KAAM6F,EAAAA,4BAA4BC,WAKpCrF,EAAoB+D,iCAAiC9E,GAIrDiG,EAAYI,EAA8BvF,EAAkBrB,EAAsBC,GAE3E,KAGLqB,EAAoB+D,iCAAiC9E,GAGrDc,EAAiBwF,iBAAiB5G,KAEnC,IAGH,IAAI6G,EAAoB,KAExB,OACGtE,EAAwB6B,SACzBxB,EAAqB6C,wBACnBlD,EAAwB6B,QAAQzD,WAAW8E,uBAK3CzE,GAAYA,EAASQ,SACvBqF,EAAoB7F,EAAS8F,IAAI,CAACC,EAAOC,IAErCD,GACAvC,EAAAA,aAAmBuC,EAAO,CACxBzG,aACA2G,IAAKD,MAOXxC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAK0C,UAAU,wDACZnF,GACCyC,EAAAA,cAACjD,EAA4B,CAC3B2F,UAAU,gBACVC,aAAchF,EAAmBG,cACjCD,gBAAiBF,EAAmBE,gBACpC+E,YAAY,mBAGf9C,IACAuC,KA3BE,IA+BX,C","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/initSEGToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/promptHydrateSEG.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/OHIFCornerstoneSEGViewport.tsx"],"sourcesContent":["function createSEGToolGroupAndAddTools(ToolGroupService, customizationService, toolGroupId) {\r\n  const tools = customizationService.getCustomization('cornerstone.overlayViewportTools');\r\n\r\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools);\r\n}\r\n\r\nexport default createSEGToolGroupAndAddTools;\r\n","import { utils, Types } from '@ohif/extension-cornerstone';\r\n\r\nfunction promptHydrateSEG({\r\n  servicesManager,\r\n  segDisplaySet,\r\n  viewportId,\r\n  preHydrateCallbacks,\r\n  hydrateCallback,\r\n}: {\r\n  servicesManager: AppTypes.ServicesManager;\r\n  segDisplaySet: AppTypes.DisplaySet;\r\n  viewportId: string;\r\n  preHydrateCallbacks?: Types.HydrationCallback[];\r\n  hydrateCallback: Types.HydrationCallback;\r\n}) {\r\n  return utils.promptHydrationDialog({\r\n    servicesManager,\r\n    viewportId,\r\n    displaySet: segDisplaySet as AppTypes.DisplaySet,\r\n    preHydrateCallbacks,\r\n    hydrateCallback,\r\n    type: 'SEG',\r\n  });\r\n}\r\n\r\nexport default promptHydrateSEG;\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useViewportGrid } from '@ohif/ui-next';\r\nimport createSEGToolGroupAndAddTools from '../utils/initSEGToolGroup';\r\nimport promptHydrateSEG from '../utils/promptHydrateSEG';\r\nimport { usePositionPresentationStore, OHIFCornerstoneViewport } from '@ohif/extension-cornerstone';\r\nimport { SegmentationRepresentations } from '@cornerstonejs/tools/enums';\r\nimport { useSystem } from '@ohif/core/src/contextProviders/SystemProvider';\r\n\r\nconst SEG_TOOLGROUP_BASE_NAME = 'SEGToolGroup';\r\n\r\nfunction OHIFCornerstoneSEGViewport(props: withAppTypes) {\r\n  const { servicesManager, commandsManager } = useSystem();\r\n  const { children, displaySets, viewportOptions } = props as {\r\n    children: React.ReactNode;\r\n    displaySets: AppTypes.DisplaySet[];\r\n    viewportOptions: AppTypes.ViewportOptions;\r\n  };\r\n  const viewportId = viewportOptions.viewportId;\r\n\r\n  const { displaySetService, toolGroupService, segmentationService, customizationService } =\r\n    servicesManager.services;\r\n\r\n  const LoadingIndicatorTotalPercent = customizationService.getCustomization(\r\n    'ui.loadingIndicatorTotalPercent'\r\n  );\r\n\r\n  const toolGroupId = `${SEG_TOOLGROUP_BASE_NAME}-${viewportId}`;\r\n\r\n  // SEG viewport will always have a single display set\r\n  if (displaySets.length > 1) {\r\n    throw new Error('SEG viewport should only have a single display set');\r\n  }\r\n\r\n  const segDisplaySet = displaySets[0];\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n\r\n  // States\r\n  const { setPositionPresentation } = usePositionPresentationStore();\r\n\r\n  // Hydration means that the SEG is opened and segments are loaded into the\r\n  // segmentation panel, and SEG is also rendered on any viewport that is in the\r\n  // same frameOfReferenceUID as the referencedSeriesUID of the SEG. However,\r\n  // loading basically means SEG loading over network and bit unpacking of the\r\n  // SEG data.\r\n  const [segIsLoading, setSegIsLoading] = useState(!segDisplaySet.isLoaded);\r\n  const [processingProgress, setProcessingProgress] = useState({\r\n    percentComplete: null,\r\n    totalSegments: null,\r\n  });\r\n\r\n  // refs\r\n  const referencedDisplaySetRef = useRef(null);\r\n\r\n  const { viewports, activeViewportId } = viewportGrid;\r\n\r\n  const referencedDisplaySetInstanceUID = segDisplaySet.referencedDisplaySetInstanceUID;\r\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(\r\n    referencedDisplaySetInstanceUID\r\n  );\r\n\r\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\r\n    referencedDisplaySet,\r\n    segDisplaySet\r\n  );\r\n\r\n  referencedDisplaySetRef.current = {\r\n    displaySet: referencedDisplaySet,\r\n    metadata: referencedDisplaySetMetadata,\r\n  };\r\n\r\n  const getCornerstoneViewport = useCallback(() => {\r\n    return (\r\n      <OHIFCornerstoneViewport\r\n        {...props}\r\n        displaySets={[segDisplaySet]}\r\n        viewportOptions={{\r\n          viewportType: viewportOptions.viewportType,\r\n          toolGroupId: toolGroupId,\r\n          orientation: viewportOptions.orientation,\r\n          viewportId: viewportOptions.viewportId,\r\n          presentationIds: viewportOptions.presentationIds,\r\n        }}\r\n        onElementEnabled={evt => {\r\n          props.onElementEnabled?.(evt);\r\n        }}\r\n      />\r\n    );\r\n  }, [viewportId, segDisplaySet, toolGroupId, props, viewportOptions]);\r\n\r\n  useEffect(() => {\r\n    if (segIsLoading) {\r\n      return;\r\n    }\r\n\r\n    // if not active viewport, return\r\n    if (viewportId !== activeViewportId) {\r\n      return;\r\n    }\r\n\r\n    promptHydrateSEG({\r\n      servicesManager,\r\n      viewportId,\r\n      segDisplaySet,\r\n      hydrateCallback: async () => {\r\n        await commandsManager.runCommand('hydrateSecondaryDisplaySet', {\r\n          displaySet: segDisplaySet,\r\n          viewportId,\r\n        });\r\n\r\n        return true;\r\n      },\r\n    });\r\n  }, [servicesManager, viewportId, segDisplaySet, segIsLoading, commandsManager, activeViewportId]);\r\n\r\n  useEffect(() => {\r\n    // on new seg display set, remove all segmentations from all viewports\r\n    segmentationService.clearSegmentationRepresentations(viewportId);\r\n\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\r\n      evt => {\r\n        if (evt.segDisplaySet.displaySetInstanceUID === segDisplaySet.displaySetInstanceUID) {\r\n          setSegIsLoading(false);\r\n        }\r\n\r\n        if (segDisplaySet?.firstSegmentedSliceImageId && viewportOptions?.presentationIds) {\r\n          const { firstSegmentedSliceImageId } = segDisplaySet;\r\n          const { presentationIds } = viewportOptions;\r\n\r\n          setPositionPresentation(presentationIds.positionPresentationId, {\r\n            viewReference: {\r\n              referencedImageId: firstSegmentedSliceImageId,\r\n            },\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [segDisplaySet]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\r\n      ({ percentComplete, numSegments }) => {\r\n        setProcessingProgress({\r\n          percentComplete,\r\n          totalSegments: numSegments,\r\n        });\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [segDisplaySet]);\r\n\r\n  /**\r\n   Cleanup the SEG viewport when the viewport is destroyed\r\n   */\r\n  useEffect(() => {\r\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports.get(activeViewportId);\r\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\r\n          viewportGridService.setDisplaySetsForViewport({\r\n            viewportId: activeViewportId,\r\n            displaySetInstanceUIDs: [],\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      onDisplaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\r\n\r\n    if (toolGroup) {\r\n      return;\r\n    }\r\n\r\n    // keep the already stored segmentationPresentation for this viewport in memory\r\n    // so that we can restore it after hydrating the SEG\r\n    commandsManager.runCommand('updateStoredSegmentationPresentation', {\r\n      displaySet: segDisplaySet,\r\n      type: SegmentationRepresentations.Labelmap,\r\n    });\r\n\r\n    // always start fresh for this viewport since it is special type of viewport\r\n    // that should only show one segmentation at a time.\r\n    segmentationService.clearSegmentationRepresentations(viewportId);\r\n\r\n    // This creates a custom tool group which has the lifetime of this view\r\n    // only, and does NOT interfere with currently displayed segmentations.\r\n    toolGroup = createSEGToolGroupAndAddTools(toolGroupService, customizationService, toolGroupId);\r\n\r\n    return () => {\r\n      // remove the segmentation representations if seg displayset changed\r\n      // e.g., another seg displayset is dragged into the viewport\r\n      segmentationService.clearSegmentationRepresentations(viewportId);\r\n\r\n      // Only destroy the viewport specific implementation\r\n      toolGroupService.destroyToolGroup(toolGroupId);\r\n    };\r\n  }, []);\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  let childrenWithProps = null;\r\n\r\n  if (\r\n    !referencedDisplaySetRef.current ||\r\n    referencedDisplaySet.displaySetInstanceUID !==\r\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportId,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\r\n        {segIsLoading && (\r\n          <LoadingIndicatorTotalPercent\r\n            className=\"h-full w-full\"\r\n            totalNumbers={processingProgress.totalSegments}\r\n            percentComplete={processingProgress.percentComplete}\r\n            loadingText=\"Loading SEG...\"\r\n          />\r\n        )}\r\n        {getCornerstoneViewport()}\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet, segDisplaySet) {\r\n  const { SharedFunctionalGroupsSequence } = segDisplaySet.instance;\r\n\r\n  const SharedFunctionalGroup = Array.isArray(SharedFunctionalGroupsSequence)\r\n    ? SharedFunctionalGroupsSequence[0]\r\n    : SharedFunctionalGroupsSequence;\r\n\r\n  const { PixelMeasuresSequence } = SharedFunctionalGroup;\r\n\r\n  const PixelMeasures = Array.isArray(PixelMeasuresSequence)\r\n    ? PixelMeasuresSequence[0]\r\n    : PixelMeasuresSequence;\r\n\r\n  const { SpacingBetweenSlices, SliceThickness } = PixelMeasures;\r\n\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const referencedDisplaySetMetadata = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness || SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices || SpacingBetweenSlices,\r\n  };\r\n\r\n  return referencedDisplaySetMetadata;\r\n}\r\n\r\nexport default OHIFCornerstoneSEGViewport;\r\n"],"names":["ToolGroupService","customizationService","toolGroupId","tools","getCustomization","createToolGroupAndAddTools","servicesManager","segDisplaySet","viewportId","preHydrateCallbacks","hydrateCallback","utils","promptHydrationDialog","displaySet","type","props","commandsManager","useSystem","children","displaySets","viewportOptions","displaySetService","toolGroupService","segmentationService","services","LoadingIndicatorTotalPercent","length","Error","viewportGrid","viewportGridService","useViewportGrid","setPositionPresentation","usePositionPresentationStore","segIsLoading","setSegIsLoading","useState","isLoaded","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","viewports","activeViewportId","referencedDisplaySetInstanceUID","referencedDisplaySet","getDisplaySetByUID","referencedDisplaySetMetadata","SharedFunctionalGroupsSequence","instance","SharedFunctionalGroup","Array","isArray","PixelMeasuresSequence","PixelMeasures","SpacingBetweenSlices","SliceThickness","image0","images","PatientID","PatientName","PatientSex","PatientAge","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","_getReferencedDisplaySetMetadata","current","metadata","getCornerstoneViewport","useCallback","React","OHIFCornerstoneViewport","_extends","viewportType","orientation","presentationIds","onElementEnabled","evt","useEffect","promptHydrateSEG","async","runCommand","clearSegmentationRepresentations","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","displaySetInstanceUID","firstSegmentedSliceImageId","positionPresentationId","viewReference","referencedImageId","SEGMENT_LOADING_COMPLETE","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","get","includes","setDisplaySetsForViewport","toolGroup","getToolGroup","SegmentationRepresentations","Labelmap","createSEGToolGroupAndAddTools","destroyToolGroup","childrenWithProps","map","child","index","key","className","totalNumbers","loadingText"],"sourceRoot":""}